

  "THE TOKEN"

  * SERVER: Set the token as a global variable in the ws page. The key is worked out by User (from Session) + Workspace id (from page)
  * CLIENT: Change JsonRest call in client so that it automatically appends, to call URL, the key from the global variable
  * C/S   : On the server side, a middleware will read the token from URL and set req.application.workspaceId and req.application.userId:
            If the middleware finds that the user is not logged in, needs to return the right 4xx error. If the middleware finds out
            that the user IS logged in, but doesn't actually have access to that specific workspace, it needs to return a different
            error (and at that point the client needs to redirect to /login immediately). NOTE: IMPLEMENT ROLES.
  * SERVER: Write a function to check if a user has access to a specific workspace, use that instead of current find() in 3 spots
  * CLIENT: Write a quick form/call to add a user to a workspace (use existing silly form), make sure logging in as them works
  * C/S     Recheck everything.


  "THE LAST TOUCHES"

  * CLIENT: Hide passwords
  * C/S   : Make sure that workspace names are regiistered as lowercase, AND that searching them is case insensitive!
  * CLIENT: Fix password so that it's not "mustChange" in login form (user might decide to change username and not password)
  * SERVER: Make sure that all servers calls don't BOMB if parameters are not passed.
  * SERVER: Set an expiration time to the login, check that it can be "since last communication"
  * CLIENT: Fix problem where field with focus lose manually added tooltip straight away. It's making "wrong password" disappear.
  * C/S   : Encrypt passwords (!)
  * CLIENT: Check for "styles" in templates, and "height", make sure that widgets don't have useless parameters
  * C/S   : Comment each function, client and server, using Dojo's new standard
  * C/S   : Comment CSS nicely


+++ MESSAGES
  * SERVER: Write messages infrastructure, where app can send messages (email, sms) and then a queue manager sends them recording the
            status
  * SERVER: Write the password recovery script: work out accounts linked, sets a hash for each one, sends email out with a change password
            link and a list of workspaces attached. NOTE: the change password link should be a simple form, which then redirects to /login
            which in turns should output the list of workspaces (since the user is already logged in)
  * C/S   : Write an "invite user" mechanism where users can be invited into the system (they receive an email, will redirect to a screen
            which allows them to register a new user (if available, etc.) or link the workspace to their existing user. Good chance to
            write a bit of a wizard.

+++ BROWSING DATA
  * SERVER: Create generic functions to parse the query launched by JsonRest queries (filter, range) use it for invites sent
  * CLIENT: Show a bunch of records (grid, etc.) using the data stores. Make sure there is proper error recovery with
          reload if there are network issues. 

+++ SETTINGS
  * Write basic "User settings" screen where people can update their info (Name, Photo, others).
  * Add a link to the user profile in the workspace picker if a user logs in without ANY workspaces
  * Write basic "settings" screen with sub-tabs where people can set things for their workspace. Decide on a few, generic, basic settings
  * Write a widget that allows users to create line-records and edit them (account types, booking types, and so on)

+++ USE CASE
  * Add a "customer" form, and a customers browser

                          ----------------------------
                          !!  BOILERPLATE FINISHED  !!
                          ----------------------------

  * Add messages *receiving* infrastructure (smtp, pop, sms), with configuration and setting of default for sending
  * View messages widget under customers with ability to send messages
  * Inbox: ability to see the inbox, and match a "from" to a contact (messages will obviously appear under contact)
  * 
  * Ability to create bookings
  * Ability to send invoices AND store invoices
  * Basic accounting
  * First version finished

  DONE:
  * Password1 and password2, fields, make dependent on each other
  * Understand, fully, the whole "events" on widgets and DOM nodes http://livedocs.dojotoolkit.org/quickstart/events
  * Add a busybutton -- Look into dojox/widgets/standby and forms/busybutton
  * Check things with server, make sure server can respond with form setting error messages
  * Understand _fully_ the whole promise thing in Dojo
  * Write functions for server (sending errors) to keep things dry
  * Initial data saving with MongoDB
  * Write async code to save everything, MAYBE using Async library https://github.com/caolan/async#series (niiice!)
  * Actually create account/workspace with MongoDB
  * CLIENT: Fix forms, as it turns out we don't really need labels (not possible, I was dreaming)
  * Validation/error manager framework:
  -- Change client so that it shows which fields had what problem from the server adding validators on the fly
  -- CLIENT: Add a xhr function for client (making request, writing a message) to keep things dry. Do it with promises and new Form
  -- CLIENT: Make sure that the busybutton itself cancels itself if the form doesn't validate _somehow_
  -- CLIENT: Finish the new warning bar!
  -- CLIENT: Make error printing MUCH nicer than a bloody alert() using the new great bar!
  -- CLIENT: Simplify IFs so that it only needs to cancel if it didn't validate, and do anything if it worked OK. Errors
             and messages handled by generic function 
  -- C/S   : Complete the validation server-side and client-size properly (use the same validators as client side!)
  --SERVER: Make up log library to log ANYTHING with Workspace as a key (not just errors). Log ALL activity
  --CLIENT: Enable logging of all activity with Console.log (to be turned on, so wrap console.log in function)
    +++ THE INTERACTION GALORE (2 days)
  --CLIENT: Create initial models on the client side for Mongo's data ('workspace')
  --CLIENT: Write more models for future use/reference (won't work until implemented on server)
    CLIENT: Change COMPLETELY the logic for forms. Make stores "NewWorkspaces" and "NewWorkspacesAsUser" 
  --SERVER: Write function part on server for workspace and username checking (store: "Workspaces" which only works with the
            right filter).
  --CLIENT: Actually check workspace names and user names using AJAX on the client side (don't allow submit if duplicate)
  * SERVER: Reinstall Express, work out what's in the "-s" field (see differences with and without) AND check that app still runs
  * SERVER: Have a look at the middleware used to refresh your memory a little
  * SERVER: Configure a store with Mongodb
  * SERVER: Get familiar with sessions
  * C/S   : Set "logged in variable" when login is successful (store password unencrypted for now)
  * CLIENT: Slim up the submit function, avoid ANY code repetition that is not 100% strictly necessary
  * CLIENT: Write a basic empty applicationwith a simple button to interact with server
  * C/S   : Restructure the whole directory tree so that it makes a lot more sense and can use Dojo 1.8 as a library
  * C/S   : Add logout button to the app and to the server and to the application (make widget), so that we can test things out
  * C/S   : Change app so that if a request is made and response is "unauthorised", asks for login 3 times and after that redirects to login
  * CLIENT: Make sure logging in will _actually_ direct to the app
  * CLIENT: Decide how to store the login name client-side, get client to re-send it
  * C/S   : Change app so that if you are not logged in it will send TO login screen (redirect straight from the jade page)
  * CLIENT: Change login form so that if the user is already set, it will not ask for it again (and option to change user)
  * SERVER: Put the login/logout/register pages (non-data ones) in a separate module
  * C/S   : Add a proper button that does something to test the "session expires" thing to test things properly
  * C/S   : Change the "register" page so that if you are logged in, it redirects to the login page
  * C/S   : Change register form so that if user is already logged in it only asks for the workspace name
- * C/S   : In case user already is logged in, register form should have an info box and explain that they are already logged in and
            the workspace will be registered under their username, providing a logout link too.
  * CLIENT: In case user is not logged in, warn users that if they already are customers, they should login so that
            the workspace will fall under their existing username (with link to a login page)
            * The app URL must always have /workspacename at the end
  * C/S     Do things so that the workspace ID is part of the URL, and not the workspace name, so that URLs stay forever even
            if workspace name changes
  * C/S     Make sure that the workspace name can be appended to the login screen, and that users are automatically redirected there if
            login has worked and user has access to it. To do this, get the login screen to be there with workspaceId set as a variable
            if present, and get the login routine to check if that is available.
  * C/S     Change login screen so that if you login and have only one workspace, redirects there; if you have several workspaces, don't
            redirect: pull out a list of workspaces instead, and let user pick (open them in a new window)
  * CLIENT: Make LoginForm functional, needs to find out the workspace to redirect to from the URL bar using a path
  * SERVER: Finish (write) the picker
  * CLIENT: Add roundForm classes to CSS so that notFound and "error" don't have the loginForm class (silly)
  * CLIENT: Make picker way prettier, 
  * SERVER: Fix problem where if user is logged in, and creates a workspace, he is not added to the permissions (DB changed)
  * SERVER: Change req.XXXX set by workspaceName and workspaceId tokens so that they are under "app", to keep namespace clean
            grep 'req\.[^sbqu]' `find .` Note: change workspaceId's parameter string into workspaceIdPages 
  * SERVER: Tidy up code for middleware, put it in a different file.
  * SERVER: Get TOKENS (rename "key" in db and code) actually created when a user is added.

