
  "THE BASICS"

  1 DAY:
  ----
  * Make the new authentication fully work (add user when workspace is created, actually login when login is successful)
    * Finish RESUME properly (make widget to show resume buttons, write resume part in Facebook's strategy)
    * Complete missing bits (client/server) in the Local strategy (signin DONE, register DONE, recover )
      * For recovery, for now just create a hash/expiry in login info 
    * Document hotDojoAuth and hotCoreAuth

  3-5 DAYS:
  ----
  * Make Comet messenging work again using JsonRestStores API only (it's currently completely broken)
    * STORES: Add ability to filter for ranges as part of the JsonRestStore if necessary. YES do this one, it's necessary. Make it work
              from URLs as well with searchSchema specific fields
    * STORES: Add ability to scan through GetQuery by calling a function rather than returning an Array
    * Check hotDojoCometMessages/client/messages.js and hotDojoStores/client/AppStoreNotify.js: "add" needs to check if it's not within
      "add" like it happens in Observer.js (check if the Observer.js way is indeed sane)

  1 DAY
  -----
  * Move the buttonsConstructor somewhere where it makes more sense
  * Normalise all the topic.publish namespace, which is messy now. Watch out: comet events are echoed as well, put those in a different ns

  1 DAY
  -----
  * Add a "new contact" form, and a contacts browser/editor. Add ability to type messages underneath contacts. (30 mins and 200 lines of code?)
    Make sure you have "contact type" in the list of configurations

  1 DAY
  -----
  * Improve the look of widgets: Overlay with reload icon, top bar with shade, nothingToPick form, etc.
  * Check: http://dojo-toolkit.33424.n3.nabble.com/Question-on-CSS-with-widgets-td3995316.html

  1 DAY
  -----
  * DOCUMENTATION BASICS: Document Hotplate itself, as well as two or three representing modules, to have a starting point for all docs

  --------------------------
  DEADLINE: 25th August 2013
  --------------------------

  NOTE: TO be added to JsonRestStores:
  * Ability to have a default "order" field, which will be influenced by "placeBefore" in options
  * Ability to have range fields
  * Ability to have getQuery that returns a function rather than an array
  This will be enough for the messaging infrastructure, as well as the Comet infrastructure

  **************************************************************************************************************************
  Note: at this point, I can create a store server-side in 2 minutes, _and_ a view/editing system client-side in 10 minutes.
  **************************************************************************************************************************

  "THE MISSING PIECES"

  Message infrastructure:

  * Write messages infrastructure, where app can send messages (email, sms) and then a queue manager sends them recording the
    status. Write modules to send (smtp/sms gateway) _and_ receive (pop/sms gateway) messages. Note: this is simply a very fancy
    JsonRest store

  * Integrate message-sending with the current simple comment infrastructure (!). user picks if it's an SMS or if it's an email.
    The sending/editing widget will have to change accordingly (SMSes are given less space, no subject)


  User management and invites in Hotplate:

  * Write the password recovery script: work out accounts linked, sets a hash for each one, sends email out with a change password
    link and a list of workspaces attached. NOTE: the change password link should be a simple form, which then redirects to /login
    which in turns should output the list of workspaces (since the user is already logged in)
    This is part of hotDojoAuth
    ...
    Maybe 2 fields in the login info, a hash and an expiry, AND an URL to reset them?
    IDEA. They all create a URL, with a temporary hash. Going to that URL makes the user logged in. Only lasts 30 minutes.


  * Write an "invite user" mechanism where users can be invited into the system (they receive an email, will redirect to a screen
    which allows them to register a new user (if available, etc.) or link the workspace to their existing user.
    TO DO THIS, I can definitely get away with just 1) Adding a page that adds a session variable 1a) Redirect to the
    normal welcome page 2) Adding a hook to register and login, so that if that session variable is set, the created user will be
    added to that workspace (UsersWorkspaces store)


  * Add a "user management" section in settings for Admins only
  * Write a "message browser" for the workspace admin so that they can see exactly what was sent, when, and see the logs
  * Write a "log browser" for workspace owners and for ME to see what happened

  * Make an "booking": an abstract entity with a name and a bunch of people attached. When an email comes in, match it to a booking

  * Develop the "booking inbox"


  ------------------------------
  DEADLINE: 15th September 2013
  ------------------------------


                          ----------------------------
                          !!  HOTPLATE IS FINISHED  !!
                          ----------------------------

  The following is the short TODO list for my own booking system, which is what I was meant to start from day 1 (and was "slightly"
  side tracked by writing a "boilerplate"... err...)

  PHASE 1: Information
  * Ability to set "presence types" (dancer, security, paying guest) -- presentational only
  * Ability to set products for each contact (once|minute|hour|day rate, commission-only allowed, restrict who can buy/offer it,
    money range: from/to booking owner, from/to person, tangible/intangible, tax rate, that's it )
  * Ability to create bookings. For each person added, [ product, quantity, $ from/to booking owner, $ from/to person, from time, to time]
  * Ability to match incoming (and outgoing) messages to bookings from inbox
  * Ability to set templates for messages of different types, with previews

  PHASE 2: Money/billing
  * Accounting entries for products for each booking (with system-calculated ones)
  * Interface with payment system
  * Ability to send invoices and _store_ received invoices


  DONE:
  * Password1 and password2, fields, make dependent on each other
  * Understand, fully, the whole "events" on widgets and DOM nodes http://livedocs.dojotoolkit.org/quickstart/events
  * Add a busybutton -- Look into dojox/widgets/standby and forms/busybutton
  * Check things with server, make sure server can respond with form setting error messages
  * Understand _fully_ the whole promise thing in Dojo
  * Write functions for server (sending errors) to keep things dry
  * Initial data saving with MongoDB
  * Write async code to save everything, MAYBE using Async library https://github.com/caolan/async#series (niiice!)
  * Actually create account/workspace with MongoDB
  * CLIENT: Fix forms, as it turns out we don't really need labels (not possible, I was dreaming)
  * Validation/error manager framework:
  -- Change client so that it shows which fields had what problem from the server adding validators on the fly
  -- CLIENT: Add a xhr function for client (making request, writing a message) to keep things dry. Do it with promises and new Form
  -- CLIENT: Make sure that the busybutton itself cancels itself if the form doesn't validate _somehow_
  -- CLIENT: Finish the new warning bar!
  -- CLIENT: Make error printing MUCH nicer than a bloody alert() using the new great bar!
  -- CLIENT: Simplify IFs so that it only needs to cancel if it didn't validate, and do anything if it worked OK. Errors
             and messages handled by generic function 
  -- C/S   : Complete the validation server-side and client-size properly (use the same validators as client side!)
  --SERVER: Make up log library to log ANYTHING with Workspace as a key (not just errors). Log ALL activity
  --CLIENT: Enable logging of all activity with Console.log (to be turned on, so wrap console.log in function)
    +++ THE INTERACTION GALORE (2 days)
  --CLIENT: Create initial Models on the client side for Mongo's data ('workspace')
  --CLIENT: Write more Models for future use/reference (won't work until implemented on server)
    CLIENT: Change COMPLETELY the logic for forms. Make stores "NewWorkspaces" and "NewWorkspacesAsUser" 
  --SERVER: Write function part on server for workspace and username checking (store: "Workspaces" which only works with the
            right filter).
  --CLIENT: Actually check workspace names and user names using AJAX on the client side (don't allow submit if duplicate)
  * SERVER: Reinstall Express, work out what's in the "-s" field (see differences with and without) AND check that app still runs
  * SERVER: Have a look at the middleware used to refresh your memory a little
  * SERVER: Configure a store with Mongodb
  * SERVER: Get familiar with sessions
  * C/S   : Set "logged in variable" when login is successful (store password unencrypted for now)
  * CLIENT: Slim up the submit function, avoid ANY code repetition that is not 100% strictly necessary
  * CLIENT: Write a basic empty applicationwith a simple button to interact with server
  * C/S   : Restructure the whole directory tree so that it makes a lot more sense and can use Dojo 1.8 as a library
  * C/S   : Add logout button to the app and to the server and to the application (make widget), so that we can test things out
  * C/S   : Change app so that if a request is made and response is "unauthorised", asks for login 3 times and after that redirects to login
  * CLIENT: Make sure logging in will _actually_ direct to the app
  * CLIENT: Decide how to store the login name client-side, get client to re-send it
  * C/S   : Change app so that if you are not logged in it will send TO login screen (redirect straight from the jade page)
  * CLIENT: Change login form so that if the user is already set, it will not ask for it again (and option to change user)
  * SERVER: Put the login/logout/register pages (non-data ones) in a separate module
  * C/S   : Add a proper button that does something to test the "session expires" thing to test things properly
  * C/S   : Change the "register" page so that if you are logged in, it redirects to the login page
  * C/S   : Change register form so that if user is already logged in it only asks for the workspace name
- * C/S   : In case user already is logged in, register form should have an info box and explain that they are already logged in and
            the workspace will be registered under their username, providing a logout link too.
  * CLIENT: In case user is not logged in, warn users that if they already are customers, they should login so that
            the workspace will fall under their existing username (with link to a login page)
            * The app URL must always have /workspacename at the end
  * C/S     Do things so that the workspace ID is part of the URL, and not the workspace name, so that URLs stay forever even
            if workspace name changes
  * C/S     Make sure that the workspace name can be appended to the login screen, and that users are automatically redirected there if
            login has worked and user has access to it. To do this, get the login screen to be there with workspaceId set as a variable
            if present, and get the login routine to check if that is available.
  * C/S     Change login screen so that if you login and have only one workspace, redirects there; if you have several workspaces, don't
            redirect: pull out a list of workspaces instead, and let user pick (open them in a new window)
  * CLIENT: Make LoginForm functional, needs to find out the workspace to redirect to from the URL bar using a path
  * SERVER: Finish (write) the picker
  * CLIENT: Add roundForm classes to CSS so that notFound and "error" don't have the loginForm class (silly)
  * CLIENT: Make picker way prettier, 
  * SERVER: Fix problem where if user is logged in, and creates a workspace, he is not added to the permissions (DB changed)
  * SERVER: Change req.XXXX set by workspaceName and workspaceId tokens so that they are under "app", to keep namespace clean
            grep 'req\.[^sbqu]' `find .` Note: change workspaceId's parameter string into workspaceIdPages 
  * SERVER: Tidy up code for middleware, put it in a different file.
  * SERVER: Get TOKENS (rename "key" in db and code) actually created when a user is added.
  * SERVER: Set the token as a global variable in the ws page. The key is worked out by User (from Session) + Workspace id (from page)
  * CLIENT: Change JsonRest call in client so that it automatically appends, to call URL, the key from the global variable
  * C/S   : Revise all code, make sure that names of stores are consistent, place pages under /pages/login, pages/register etc,
            change the store names
  * C/S   : On the server side, a middleware will read the token from URL and set req.application.workspaceId and req.application.userId:
            If the middleware finds that the user is not logged in, needs to return the right 4xx error.
  * SERVER: Check that middleware tokenApi actually works (check by getting Javascript to provide the wrong API key).
  * CLIENT: Hide passwords
  * SERVER: Rename error objects so that make more sense, _and_ make sure that original error is kept in case of "Runtime error".
  * SERVER: Improve the Log() function so that IT does all the work (lookup etc.) and stores things right
  * C/S   : Since 403 is for "user is not logged in", return a different error in case the user IS logged in but has no access to
            the url requested. (It shouldn't happen, and it will only really happen when a permission change happens while the
            user is using the application).
  * SERVER: Find a _good_ way to keep the original error when throwing messages in db errors, maybe providing info to the user? Check
            logging too -- check that logging is happening properly (sent email to stack overflow)
  * SERVER: Uniform the way things are set, into req.application, regardless of what middleware is called
            
  * SERVER: Check logging, and Check that things haven't bombed after latest extensive changes, and that logging still happens OK.
  * C/S   : Revise "protocol", make it a lot better and nicer so that the response is always, always the same (and extra "things" can
            be sent to the app in terms of what to refresh, for example). MAKE SURE THAT IT'S ALWAYS THE SAME FORMAT FOR EVERY ERROR
  * CLIENT: Fix password so that it's not "mustChange" in login form (user might decide to change username and not password)
  * SERVER: Change the login scheme completely. The client mustn't send the token for each call, but simply "session" (as an option). On
            the server, the "session" needs to go by workspace. So, when token is "session", setting of variables will depend on
            the session rather than the passed token. (the "login" request makes sense)
  * SERVER: Make a middleware that requires the person to be logged in  (silly idea)
  * SERVER: Understand how the error management works, discovered that throw(err) is the very same as next(err) for the catch{} there
  * SERVER: Change page middleware so that it redirects automatically, without getting the actual routes methods to do it
  * SERVER: Write a middleware for the ID
  * SERVER: Implement logging in case of server problems when delivering pages (add logging calls manually where needed?)
  * SERVER: [NOT DONE] Write a function to check if a user has access to a specific workspace, use that instead of current find() in 3 spots
  * SERVER: Fixed IDIOTIC way I used to give access to workspaces, based on used name rather than ids.
  * SERVER: Major, major reorganisation of the code, errors are now in their own little files, etc.
  * Fixed order of things, so that it makes more sense. This framework is bigger than I expected, will I ever get to write
    the _actual_ booking system I wanted to write? I am amazed something like this didn't exist already
  * SERVER: Made sessions persistent using connect-mongod, fixed a silly bug in the creation of the stores client-side (left from testing)
  * SERVER: Added the first query call
  * CLIENT: Improved the code in _AjaxValidatorMixin.js so that it can work both if search is good or not, improved that code in the meantime
  * Write a module loader which will load all modules in a specific directory and run init(), as well as create a list of
    loaded modules
  * Move the existing calls into a module called "system"
  * Create system so that modules have a public directory
  * Make sure that the application runs some init() method javascript-side as well, so that modules can add their widgets to the app
  * Empty root directory completely (including errors.js etc.), turn it into a straight Express server with modules
  * Write a hook system, server and client side, where other modules can listen and "enrich" each other's objects, forms, etc.
  * Write a topic/publish system, server side, where things can happen
  * Add function to add fields that will be logged by the logger, defining them as "indexes" or not. (This will be used to
    make up the schema on the spot by the mongologger)
  * Add ability to register a module later (change the load function so that it calls register, and then
    make sure that the template is recalculated after the registration for that particular module so that
    JS and CSSes are added). Also, see if it's possible to make file loading work as well (!), this will require
    one middleware call per module). This way, people can use *any* module to integrate with hotplate -- the modules will
    just need to provide the right hooks
  * Put core modules into a "core" directory somehow (revise the way modules are loaded, allow two stage loading and THEN init() )
  * Write dependency system so that init() methods are called in the right order
  * Port "hotDojoError" so that it uses the new globalAlertBar
  * Make application work "as is" (making it use the new hotDojoError and stores etc. )
  * Make sure hooks are called asynchronously so that hooks can be used within callbacks
  * Add function to log to console if turned on (add it to logger), put log messages using that from now on
  * Add function invokeAllFlattened, which gets all results from an invokeAll and flattens them onto an array, to be used for thinks
    like roles etc.
  * Write a topic/publish system, client side, where clients can change other client's forms, templates etc. before they get
    sent to the client. For example, another mixin to _templatedMixin which calls hotplate's hooks?
  * C/S   : Make sure that workspace names are registered as lowercase, AND that searching them is case insensitive!
  * SERVER: Make sure that all servers calls don't BOMB if parameters are not passed (use custom function)
  * SERVER: Set an expiration time to the login, check that it can be "since last communication" (add flag?)
  * CLIENT: Fix problem where field with focus lose manually added tooltip straight away. It's making "wrong password" disappear.
  * C/S   : Encrypt passwords using strong encryption
  * Check for "styles" in templates, and "height", make sure that widgets don't have useless parameters
  * DECIDE IF dojoAppContainer SHOULD BE LEFT LIKE THIS, GENERIC, OR NOT (CONTAINER Vs. BOILERPLATE)
    In the end, it's a generic container publishing a topic with its object, so that others can piggyback
  * SERVER: Create generic function to parse the query launched by JsonRest queries (filter, range) use it for logs
  * CLIENT: Show a bunch of records (grid, etc.) using the data stores. Make sure there is proper error recovery with
            reload if there are network issues. 
  * SERVER: Write a "Dashboard" page for the "system" workspace, with a tab that displays logs (filter by time, user, workspace, gravity)
            Improve logging accordingly (now that you can see them...)
  * Write utility functions to copy data taken from a JsonRest query into a form -- UNNECESSARY!
  * Write an overlay widget which will be placed over a form if initialisation goes wrong. Allow user to click to try again
  * Make app look a little nicer (login button, small avatar, at the top, etc.)
  * Add the overlay widget to Dgrids as well, allowing users to re-load the dgrid if connection goes down. That was fun, discovering that
    dgrid isn't _actually_ a widget and adapting the hell out of _OvelayMixin...
  * Write basic "Workspace settings" (generic Workspace Settings table)
  * Write generic function to find one and save
  * Write basic "Workspace-User settings" (user's settings for that specific workspace). Make fields part of DojoAuth's tables? (Hooks for that)
  * Strenghten existing forms in bd.js (add parametersAreThere as general functions from hotDojoAuth), validate email
  * Write basic "User settings" (General user-wide settings) and show name of logged in user at the top
  * Change the protocol (sigh). Any get needs to return just the object or null. Maybe sendGetResponse, sendPostResponse? 
  * (Don't) Get rid of that stupid "self" in the user config. Use the proper user _id.
  * Make sure that changing a list in point A will also change the select box in point B immediately.
  * Change config so that it comes in a variable at load time. Somehow shove that into the store cache if possible
  * Make both cache and main store observable, shove things into cache at load time, and check that savings/updating works OK)
  * Make sure AppConfig creates a updated object usable straight from the application without running `get` on the store, make sure
    object is updated after `put`. Code to use config values right now is way too long
  * Use comet/messenging to make stores observable by remote. Check that changes apply if 1) They are made within the tab 2) They are
    made from another tab (through comet).
  * Change "self" in id, and write two layers: one for store changes in general, and another one which piggy backs and provides
    real-time configuration changes.
  * Add app-wide tabId, workspaceId, userId as they are just so often used. Maybe, I say maybe, make a namespace
  * Add an aspect to the store's put method to add tabId, and then take it out just before writing, so that the server always knows
    who to notify for config changes
  * Finalised, polished up, re-checked the whole Comet/messages infrastructure
  * Check permissions with permission module. Decide on whether to leave the session minimalistic as it is now ( best way ). Or maybe
    do load the user's config in the session (and refresh it if it gets modified).
  * Get the user form to appear at the top and not on the left
  * Add a link to the user profile in the workspace picker if a user logs in without ANY workspaces. Use Hotplate's Dojo mixin for this
  * Move login/userId from bd.js to hotDojo Auth, where it makes a lot more sense. Document which variables are provided for each page
  * Fix permission of get/post UserConfig (there is no :workspaceId anymore, as it shouldn't). Write a custom Auth function for it
  * Improve ID checking for mongoDB ids, make them one-liners as they are in every single call
  * Fixed mystery of ghost collections created by Mongoose when app started. It was old indexes. ALSO deleted Access as a global Model
  * !! Change the "configuration" form so that if things change (see: version is higher), then it blanks. Note that
    it cannot get registered as a tab, so it won't get the Comet signals etc. Good chance to check versions in general 
    (increment __v when editing etc.)
  * DEFINITELY switch away from Mongoose
  * Write a builder function that creates get() and put() callbacks based on information <--- !!!
  * GET RID OF THOSE GLOBAL VARIABLES in BookingDojo.js. They seemed a good idea at the time... No No No. Maybe make module that works them out
  * Created the SyncPublish widget to make sure that no call is lost
  * Changed the register form to include name and last name
  * Use schemas in postWorkspacesAnon and postWorkspacesUser, and call hooks to change those schemas
  * Use schema anywhere with post/soft validation in hotDojoAuth
  * Use schema hooks to add name and surname to workspace creation calls
  * Make a general widget to edit fields out of the ones currently used in Settings, so that most of the default stuff is done
    - Add alertBar manually to the widget so that users don't have to worry about it
    - See if I can use Jade as the template engine instead of ugly HTML.
    - Convert all forms to new system, make them a _loooot_ shorter!
  * Reorganise code so that all of the Dojo calls are in one spot, and hotDojoAuth is decoupled from Dojo.
  * Take out EVERY ServiceUnavailable errors, just throw the normal errors, and let the error manage deal with it
  * Change JsonRestStore so that it can pass through 'all', 'http', 'none'
  * Fine-tune the error manager so that it handles Json _and_ HTML the right way
  * Rename all core modules hotSomething -> hotCoreSomethig and put ALL modules under node_modules. Test that a clean install works 100%
  * Shared validators made available easily through SimpleSchema
  * Make a local, patched copy of cache.js
  * Take out that rubbish about partial update from Cache.js
  * Change update so that values in schema but NOT in update object are case/set (doesn't this already happen?!?)
  * Make a note: PUT is not partial, it is complete
  * See how dgrid works for rendering lists and provide a custom renderer widget
  * Fix issue where if entries get out of visible area and list is reloaded, it stops adding them to the grid when added! Geeee, I had to
    write my own JsonObserver for this.
  * See if it's OK to pass just the store to EditingWidget as a whole, rather than the two parameters, BOTH for EditingWidget and EditableList
  * Make the "add" form reset after adding in EditingList
  * Move widget to external file, into its own module (the same module that includes dgrid)
  * Take "ds" out of the equation for EditableList, emit a signal instead and display the global error thing in case of problems (not done)
  * Add option to add the *adding* widget (before, after, none)
  * Make a widget to ask for confirmation -- incredibly, Dojo didn't have one
  * Add option for deletion confirmation via alert (on by default)
  * Fix the "submit message" issue (change spot where it appears, or give the option of getting it to appear underneath so that 
    tiny inline forms will still work)
  * Fix the problem with EditingWidget if there is an error -- escape at EditableList must close all editing widgets
  * Make a widget that accepts one store, an editing widget, a displaying widget per item and a "style" (+button at the bottom, in-line
    editing, etc.), and make it render/edit a bunch of items.
  * Select box: create a widget that allows user to pick one amongst one of the allowed line-record -- PLUS the current one!
  * Use Use the dgrid widgets and the select widget as engines for the settings screen, finally finally use it!
  * Fix the veeeery broken system that adds tabId to each request. Now it adds it to the header, which makes it impossible to use for
    deletions. Use aspect.around() and make AppStoreNotify completely agnostic in terms of used store. Move the part about adding 
    tabId to the dojo messages module.
  * Make it possible to place the buttons underneath the widget, aligned to the top, or aligned to the bottom
  * Make it easier to notify multiple stores if a mongoDB table changes, as it's very possible that one different stores will use
    the same table (e.g. users seen by admins and by normal users). MOVE IT to a different hotplate module
  * Redo the function that loads modules in hotplate.js, it's a giant mess right now. Use it for hotCoreJsonRestStores.js
  * Get rid of the "error" variable in hotError, use allhttperrors instead (like you should)
  * Change that workspaceIdCall into workspaceId
  * Change jsonreststores-mongo so that it deals with sub-stores properly
  * YES, DONE (Login) Check if there is a better way to "login", right now it sets a bunch of server variables
  * YES, DONE (Login) Check if hotDojoAuth can be used for other systems (like passport, for example)
  * YES, DONE (Login/other) See if there is a better way to create "drivers" where "hooks" just don't cut it (see: authentication)
  * NO, NOT DONE Add function to add per-module routes to make it easier to add URLs
  * NO, NOT DONE Have a "settings" infrastructure, where modules can define settings widgets which then get added to settings
  * NO, NOT DONE Add functions to hotplate.use() routes allowing definition of stores at the same time (add stores use existing function)
  * REALLY decide on capital letters in collection names, in JsonRestStore docs and in actual code
  * Add a hook so that when a workspace is added, the creating user is also added immediately to that workspace
  * Rewrite "pick" (in hotCoreMultiHome) so that it allows user to pick an existing one and go there immediately
  * Get CONFIG stores to be marked automatically as such
  * Get hotplate to ONLY use hotCoreAuth by writing a new module to deliver a page (both multihome version, and "straight" one)
  * Make the application work again (!)
  * NO, DONE Check if there is a better way to include modules, now each function needs to (because of async inits() ). THere isn't
  * NO, DONE Move hotplate's defined stuff (`vars`, etc.) into its own namespace? Bad idea. using "vars" as a global will work fine
  * Make the application's ability to refresh itself work again (config and normal)
  * Check why login/password in manager (client side) no longer works
  * Add "resume" as an option (resume once logged in)
  * Fortify things a little (pages/ws/undefined works?!?, login widget mustnt come out if redirect vars isn't set, page mustn't be served if
    logged in user ID doesn't exist, pick mustn't work if userId doesn't exist, ...more? )
