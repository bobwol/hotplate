/*!
 * Module dependencies.
 */

var
  hotplate = require('hotplate')
, path = require('path')
, async = require('async')
;

var configStores = {};

var hooks = exports.hotHooks = {};

var getConfig = exports.getConfig = function( workspaceId, userId, cb ){

  var registry = hotplate.getModule('hotCoreStoreRegistry');

  var functionList = {};
  Object.keys( registry.storeRegistry ).forEach( function( storeName ){

    var storeEntry = registry.storeRegistry[ storeName ];

    var Store = storeEntry.Store;
    var storeObject = storeEntry.storeObject;

    // The store is a config store: magic happens
    if( storeObject.configStore ){

      console.log("Pushing checked function for " + storeObject.storeName );

      var pushFunction = true;
      if( storeObject.configStore.workspaceId && ! workspaceId ) pushFunction = false;
      if( storeObject.configStore.userId && ! userId ) pushFunction = false;

      // Pre-load the values for that store -- those values will then be shown
      // as objects in the page, so that the application won't have to make a Json REST call to fetch them.
      if( pushFunction ){
        functionList[ storeName ] = loadConfigStoreFunction( Store, storeObject );
      }

      function loadConfigStoreFunction( Store, storeObject ){

        return function( next ){
          console.log("PRE-LOADING RECORD FOR " + storeObject.storeName ); 

          var filter = {};

          if( storeObject.configStore.workspaceId ){
            filter.workspaceId = workspaceId;
          }
          if( storeObject.configStore.userId ){
            filter.userId = userId;
          }

          // It's a one-field set, it will only return ONE value
          if( storeObject.idProperty == 'workspaceId' || storeObject.idProperty == 'userId' ){

            console.log("ONE-RECORD config store -- getting it (or creating it if missing");
            Store.GetQuery( { filters: filter }, function( err, docs ){
              if( err ) {
                 next( err );
              } else {
                if( docs.length !== 0 ){
                  console.log("Record existed, all good for " + storeObject.storeName ); 
                  // configStoreRecords[ storeObject.storeName ] = docs[ 0 ];
                  next( null, docs[ 0 ] );
                } else {
                  console.log("Record didn't exist! Creating one for " + storeObject.storeName ); 
                  Store.Post( filter, { killComet: true }, function( err, doc ){
                    next( err, doc );
                  })
                }
              }
            });

          } else {
            console.log("COLLECTION config store -- getting it");
            Store.GetQuery( { filters: filter }, function( err, docs ){
              next( err, docs );
            });
          }

        }
      }
  
    }
  });

  async.series( functionList, function( err, docs ){
    cb( err, docs );
  });

}


hooks.pageElements = function( done ){

  done( null, { moduleName: 'hotCoreStoreConfig', result: {
    vars:  [ { name: 'configStores', value: configStores } ],
  } } );
}

hooks.pageElementsPerPage = function( elements, req, pageName, done ){


  // Took this one out, as ANY page with workspaceId in the parameter should
  // have a variable with its configuration

  // Only acts on pages that end with "container"
  //function endsWith(str, suffix) {
  //  return str.indexOf(suffix, str.length - suffix.length) !== -1;
  //}

  //if( ! endsWith( pageName, 'container' ) ){
  //  return done( null, { moduleName: 'hotCoreStoreConfig', result: { } } );
  //}
  
  getConfig( req.params.workspaceId, req.session.userId, function( err, configStoreRecords ){
    if( err ){
      done( err );
    } else {
      done( null, { moduleName: 'hotCoreStoreConfig', result: {
        vars:  [ { name: 'configStoreRecords', value: configStoreRecords } ],
      } } );
    }
  });

}


hooks.init = function( done ){

  var registry = hotplate.getModule('hotCoreStoreRegistry');

  var functionList = [];
  Object.keys( registry.storeRegistry ).forEach( function( storeName ){
    var storeEntry = registry.storeRegistry[ storeName ];

    var Store = storeEntry.Store;
    var storeObject = storeEntry.storeObject;

    // The store is a config store: magic happens
    if( storeObject.configStore ){
      // Add store to the list of configStores in the page variables
      configStores[ storeObject.storeName ] = { workspaceId: !!storeObject.configStore.workspaceId, userId: !!storeObject.configStore.userId };
    }
  });

  // Load the lot, run done() at the end
  done( null );
}

hooks.init.after = [ 'hotCoreStoreRegistry' ];


