define([
  'hotplate/hotDojoStores/JsonRest',
  'hotplate/hotDojoStores/JsonObservable',
  'hotplate/hotDojoStores/Cache',
  'dojo/topic',
  'dojo/_base/Deferred',
  'dojo/store/Memory',
  'hotplate/hotDojoWidgetHooks/SyncTopic',
  'dojo/domReady!',
  ],function(
    JsonRest
  , JsonObservable
  , Cache
  , topic
  , Deferred
  , Memory
  , Sync
  ){

  var cache = {};

  var stores = function( storeName, hash, newStore ){

    var definedStores, definedStore, resolvedTarget;
    // console.log("Asked for: " + storeName);

    // Gets definedStores from the global registry (in the hotplate global variable)
    if(
      typeof( vars ) == 'object' &&
      typeof( vars.hotCoreStoreVars ) == 'object' &&
      typeof( vars.hotCoreStoreVars.stores ) == 'object'
    ){
      definedStores = vars.hotCoreStoreVars.stores;
    }


    // If the `storeName` parameter is undefined, then the call
    // is simple used to get _all_ cached stores.
    if( typeof( stores ) === 'undefined' ){
      return cache;
    }

    // If the `hash` parameter is undefined, then the call
    // is simple used to get some stores (matching `storeName`) from the cache. Note that
    // there might well be several stores each with a different target (`/user/3443`, `/user/1111')
    // for the same storeName
    if( typeof( hash ) === 'undefined' ){
      return cache[ storeName ];
    }

        // Gets the store from the global registry (in the hotplate global variable)
    if( typeof( definedStores) !== 'undefined' && typeof( definedStores[ storeName ] ) !== 'undefined' ){
      var definedStore = definedStores[ storeName ];

      if( typeof( hash ) === 'object' ){
        resolvedTarget = definedStore.target;
        for(var k in hash) if( typeof( hash[ k ] ) !== 'undefined' ) resolvedTarget = resolvedTarget.replace( ':' + k, hash[ k ]);
      } else {
        throw( new Error( "Second parameter needs to be a hash: " + storeName ) );
      }
      // if( typeof( hash ) === 'string' ){
      //  resolvedTarget = hash;
      // }
    }

    if( typeof( definedStore ) !== 'undefined' ){


      // *************************************************
      // CASE #0: It's a request to overwrite the cache
      // *************************************************
      if( typeof( newStore ) !== 'undefined' ){
        cache[ storeName ][ resolvedTarget ] = newStore;
        return newStore;
      }


      // ***************************
      // CASE #1: It's in the cache
      // ***************************
   
      if( typeof( cache[ storeName ] ) !== 'undefined' &&
          typeof( cache[ storeName ][ resolvedTarget ] ) !== 'undefined'
      ){

        // console.log("Returned as cached!");
        // console.log(storeName);
        // console.log(resolvedTarget);
        return cache[ storeName ][ resolvedTarget ];

    
      // ********************************
      // CASE #1: It's NOT cached (yet?)
      // ********************************
      } else {

        // Create the store
        var store = new JsonRest({
          target: resolvedTarget,
          idProperty: definedStore.idProperty,
          sortParam: definedStore.sortParam,
        });

        var memCache =  new Memory({
           idProperty: definedStore.idProperty
        });

        // Make up the "finalStore" (which includes refences to the JsonRest
        // one and the memCache one)
        var finalStore = new JsonObservable( Cache( store, memCache ) );
        finalStore['noCache'] = store;
        finalStore['memCache'] =  memCache;
        finalStore['storeName'] = storeName;

        // Add this result to the cache (including the resolvedTarget)
        if( typeof( cache[ storeName ] ) === 'undefined' ) cache[ storeName ] = {};
        cache[ storeName ][ resolvedTarget ] = finalStore;

        // Publish the fact that a new store was added
        // Other modules can hook to this to modify the store
        Sync.publishWhenReady( 'hotplate/hotDojoStores/newStore', storeName, finalStore );

        // console.log("Final store: (name and object)");
        // console.log( storeName);
        // console.log(finalStore);
        return finalStore;
      }
    } else {
      throw( new Error( "Asked for a non existing store: " + storeName ) );
    }

  }
  
  // A "resetStores" topic means that _all_ caches need to be cleared
  topic.subscribe( 'resetStores', function( fromUserId, message ){
        
    console.log('resetStores message received: clearing up the lot');
    



  });


  return stores;

});

