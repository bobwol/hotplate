
define([
  "dojo/_base/declare",
  "dojo/_base/lang",
  "dojo/topic",
  "dojo/when",
  "dojo/aspect",
  "hotplate/hotDojoStores/stores",
  "hotplate/hotDojoStores/AppStoreNotify",
  "hotplate/hotDojoStores/JsonObservable",
  "hotplate/hotDojoComet/messages",
  "hotplate/hotDojoGlobals/globals",

  "dojo/domReady!",
   ], function(
   declare
 , lang
 , topic
 , when
 , aspect

 , stores
 , dummy
 , JsonObservable
 , messages
 , globals
 ){


  var r = {};

  Object.keys( vars.hotCoreStoreConfig.configStores ).forEach( function( storeName ){

    // Loads the store
    var store = stores( storeName, { workspaceId: globals.workspaceId, userId: globals.userId } );

    // Sets "caching query" for the store to true. This means that hotplate's implementation
    // of cache.js will return cached results when `query()`ed. This is important for config stores,
    // since they are loaded from an in-page variable
    store.cacheQuery = true;

    // Get the config records value from the global variable on the page
    var configStoreRecords = vars.hotCoreStoreConfig.configStoreRecords[ storeName ];

    // It's a one-record value
    if( store.idProperty == 'userId' || store.idProperty == 'workspaceId' ){

      // Put the in-page record in the store's cache
      store.memCache.put( configStoreRecords );

      // Put the in-page record in 'r', which will be returned to the caller
      // Note that this only actually happens with the 'one-value- records, since the
      // others are hardly used in the application (and they would add a lot of complexity
      // to the code
      r[ storeName ] = configStoreRecords;

    // It's a multi-record value (a list of options)
    } else {
      configStoreRecords.forEach( function( item ){
        store.memCache.put( item );
      });
    }


    // Subscribe to changes to those records, so that the 'r' variable (representing the current
    // configuration) always stays current (only for one-record config stores)
    topic.subscribe('storeRecordUpdate', function( from, message, remote ){

      if( remote ){

        // Get the idProperty
        var idProperty = vars.hotCoreStoreVars.stores[ message.storeName ].idProperty;

        if( idProperty == 'userId' || idProperty == 'workspaceId' ){ 
          // Figure out the idProperty from the `vars.hotCoreStoreVars.stores` variable

          var cachedIdProperty = r[ message.storeName ][ idProperty ];

          if( message.storeName == storeName && typeof( cachedIdProperty ) == 'string' &&  message.object[ idProperty ] == cachedIdProperty ){
            r[ storeName ] = message.object;
            topic.publish('configChange/' + storeName, r[ storeName ], message );
          }
        }
      }
    });

    
  });

  return r;

});


