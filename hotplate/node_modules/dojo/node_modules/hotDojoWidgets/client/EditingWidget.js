define([
  "dojo/_base/declare",
  "dojo/_base/json",
  "dojo/store/Observable",
  "dojo/topic",
  "dojo/on",
  "dojo/dom",
  "dojo/dom-class",
  "dojo/dom-construct",
  "dojo/when",
  "dojo/store/Memory",

  "dijit/_WidgetBase",
  "dijit/_TemplatedMixin",
  "dijit/_WidgetsInTemplateMixin",
  "dijit/form/Form",
  "dijit/form/TextBox",
  'dijit/layout/TabContainer',
  'dijit/layout/ContentPane',
  "dijit/Destroyable",

  'dgrid/OnDemandGrid',
  'dgrid/OnDemandList',
  'dgrid/Keyboard',
  'dgrid/Selection',
  'dgrid/_StoreMixin',

  "hotplate/hotDojoSubmit/defaultSubmit",
  "hotplate/hotDojoLogger/logger",
  "hotplate/hotDojoStores/stores",

  "hotplate/hotDojoWidgets/AlertBar",
  "hotplate/hotDojoWidgets/_OverlayMixin",
  "hotplate/hotDojoWidgets/BusyButton",

  "hotplate/bd/globals",

   ], function(
     declare
     , json
     , Observable
     , topic
     , on
     , dom
     , domClass
     , domConstruct
     , when
     , Memory

     , _WidgetBase
     , _TemplatedMixin
     , _WidgetsInTemplateMixin
     , Form
     , TextBox
     , TabContainer
     , ContentPane
     , Destroyable

     , OnDemandGrid
     , OnDemandList
     , Keyboard
     , Selection
     , _StoreMixin

     , ds
     , Logger
     , stores

     , AlertBar
     , _OverlayMixin
     , BusyButton

     , globals

 ){


  return declare( [ _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, _OverlayMixin ] , {

    templateString: '<div><p>You need to set a template for this widget!</p></div>',

    // These will be defined by the templateString
    formWidget: null,
    alertBarWidget: null,
    buttonWidget: null,

    storeName: '',
    storeFields: {},
    recordId: null,
    recordIdField: '_id',

     // The store for records
    recordStore: null,

    postCreate: function(){
      this.inherited(arguments);

      var that = this;

      // If there is no alertBarWidget defined, then make one up and
      // place it at the top of the form
      if( ! this.alertBarWidget ){
        this.alertBarWidget = new AlertBar();
        this.alertBarWidget.placeAt( this.formWidget.containerNode, 'first' );
      }
     
      // Artificially add a hidden _id field to the form. This way, once the form has loaded,
      // the _id will be stored and it will then be re-submitted 
      var idTextBox = new TextBox( { type:"hidden", name: this.recordIdField } );
      idTextBox.placeAt( this.formWidget.containerNode, 'first' );

      // Sets the record store for the widget
      this.recordStore = stores(this.storeName, this.storeFields );

      // When the form's overlay is clicked, try and show the form again
      on(this, 'overlayClick', function(e){
        this._onShow();
      });


      // Check that the record doesn't get updated by remote
      topic.subscribe('storeUpdate', function(from, message){
        if( message && message.remote ){
          if( message.storeName === that.storeName ){
            that.set( 'overlayed', true );
            that.set( 'overlayClickable', true );
          }
        }
      });

      // Submit form, trying to save values
      this.formWidget.onSubmit = ds.defaultSubmit(this.formWidget, this.buttonWidget, function(){

        // Set the values about to be saved
        var formValues = that.formWidget.get('value');

        // Try to save the values
        when( that.recordStore.put( formValues )) .then(
          ds.UIMsg( that.buttonWidget, that.alertBarWidget, 'Configuration saved!' ),
          ds.UIErrorMsg( that.formWidget, that.buttonWidget, that.alertBarWidget )
        );

      }); // this.formWidget.onSubmit
    }, // postCreate()

  resize: function(){
      this.inherited(arguments);
      this._onShow();
    },


    _onShow: function(){

      this.inherited(arguments);

      var that = this;

      // By default, this widget is overlayed
      this.set( 'overlayed', true );
      this.set( 'overlayClickable', false );

      when( this.recordStore.noCache.get( this.recordId )).then(
        ds.UIMsg(),
        ds.UIErrorMsg(null, null, this.alertBarWidget )
      ).then(
        function(res){

          // OK things worked out: the overlay can go, values are assigned to form
          that.set( 'overlayed', false );
          that.formWidget.set( 'value', res ); // Thanks Karl Tiedt :D

          // Return for chaining...
          return res;

        },
        function(err){
          that.set('overlayClickable', true );

          // Error handlers need to rethrow...
          throw( err );
        }
      );

    },



  }); // declare

});



