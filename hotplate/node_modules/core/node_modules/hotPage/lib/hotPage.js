
/* TODO:
*/

/*!
 * Module dependencies.
 */

var dummy
, util = require('util')
, fs = require('fs')
, path = require('path')
, send = require('send')

, hotplate = require('hotplate')
, Vars = require('./Vars.js')
, Csses = require('./Csses.js')
, Jses = require('./Jses.js')
, HeadLines = require('./HeadLines.js')
;


/**
 * HotPage constructor.
 *
 * The exports object of the `HotPage` module is an instance of this class.
 * Most apps will only use this one instance.
 *
 * @api public
 */

function HotPage() {

  // Make these objects available to other modules too
  // with hotPage.Vars, hotPage.Csses, hotPage.Jses
  this.Vars = Vars;
  this.Csses = Csses;
  this.Jses = Jses;
  this.HeadLines = HeadLines;

  this.vars = new Vars;
  this.csses = new Csses;
  this.jses = new Jses;
  this.headLines = new HeadLines;

  // The page template
  this.pageTemplate = "<!DOCTYPE HTML>\n<html>\n<head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>[[TITLE]]</title>\n[[HEAD]]\n</head>\n[[BODY]]\n</html>\n";

};


/**
 * The exports object is an instance of HotPage.
 *
 * @api public
 */

module.exports = exports = new HotPage;
var hotPage = module.exports;


/**
 * The HotPage constructor
 *
 * ####Example:
 *
 *     var hotPage= require('hotplate');
 *     var hotPage2 = new hotpage.HotPage();
 *
 * @api public
 */

hotPage.HotPage = HotPage;


function replacePageElements(r, elements){

  // Replace the elements: csses, jses and vars will go where [[HEAD]] is,
  // the title will go wheer [[TITLE]] is, the body where [[BODY]] is
  if ( elements.headLines ) r = r.replace(/(\[\[HEAD\]\])/,  elements.headLines.render() + '$1' );
  if ( elements.vars)       r = r.replace(/(\[\[HEAD\]\])/,  elements.vars.render() + '$1' );
  if ( elements.csses )     r = r.replace(/(\[\[HEAD\]\])/,  elements.csses.render() + '$1' );
  if ( elements.jses )      r = r.replace(/(\[\[HEAD\]\])/,  elements.jses.render() + '$1' );

  if ( elements.title ) r = r.replace(/(\[\[TITLE\]\])/, elements.title + '$1' );
  if ( elements.body )  r = r.replace(/(\[\[BODY\]\])/,  elements.body + '$1' );

  return r;
}


function cleanupPageElements( r ){
  return r.replace(/\[\[(HEAD|TITLE|BODY)\]\]/g, '');
}


function enrichElementsWithResults( elements, results ) {

  // Everything in `elements` needs to be set properly
  elements.jses = elements.jses ? elements.jses : new hotPage.Jses;
  elements.csses = elements.csses ? elements.csses : new hotPage.Csses;
  elements.vars = elements.vars ? elements.vars : new hotPage.Vars;
  elements.headeLines = elements.headLines ? elements.headLines : new hotPage.HeadLines;
 
  results.forEach( function(element) {
    var moduleName = element.moduleName;
    var result = element.result;

    for( var type in result){
      switch( type ) {

        case 'jses':
         result[type].forEach( function(element) {
            elements.jses.add(moduleName, element);
          });
        break;

        case 'headLines':
          result[type].forEach( function(element) {
            elements.headLines.add(moduleName, element );
          });
        break;

        case 'csses':
          result[type].forEach( function(element) {
            elements.csses.add(moduleName, element);
          });
        break;

        case 'vars':
          result[type].forEach( function(element) {
            elements.vars.add(moduleName, element.name, element.value );
          });
        break;
      }
    }
  });

}


HotPage.prototype.processPageTemplate = function( elements, req, pageName, done ) {

  elements = elements || {};
  var r;
  var that = this;
  var hotPage = hotplate.getModule( 'hotPage' )

  // There is a callback: check for last minute additions to the page, and then call the callback
  // with "r" being the enhanced page

  hotplate.invokeAll('pageElementsPerPage', elements, req, pageName, function(err, results){
    if(err){
      done( err );
    } else {
      enrichElementsWithResults( elements, results )
      r = replacePageElements( that.pageTemplate, elements );
      r = cleanupPageElements( r );
      done( null, r );
    }
  });

}

HotPage.prototype.hotHooks = {};

HotPage.prototype.hotHooks.init = function( done ){

  var that = this;
  var moduleName;

  hotplate.invokeAll('pageElements', function(err, results){
    enrichElementsWithResults( that, results )

    that.pageTemplate = replacePageElements( that.pageTemplate, { 
       csses:that.csses,
       jses:that.jses,
       vars:that.vars, 
       headLines:that.headLines 
    } );

    done( null );

  });
}

HotPage.prototype.hotHooks.init.invokes = [ 'pageElements' ];

