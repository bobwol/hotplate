
/* TODO:
*/

/*!
 * Module dependencies.
 */

var util = require('util')
, fs = require('fs')
, path = require('path')
, send = require('send')
, Vars = require('./Vars.js')
, Csses = require('./Csses.js')
, Jses = require('./Jses.js')
, hotplate = require('hotplate')
;


/**
 * HotPage constructor.
 *
 * The exports object of the `HotPage` module is an instance of this class.
 * Most apps will only use this one instance.
 *
 * @api public
 */

function HotPage() {

  // Make these objects available to other modules too
  // with hotPage.Vars, hotPage.Csses, hotPage.Jses
  this.Vars = Vars;
  this.Csses = Csses;
  this.Jses = Jses;

  this.vars = new Vars;
  this.csses = new Csses;
  this.jses = new Jses;

  // The page template
  this.pageTemplate = "<!DOCTYPE HTML>\n<html>\n<head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>[[TITLE]]</title>\n[[HEAD]]\n</head>\n<body>\n[[BODY]]\n</body>\n";


};


/**
 * The exports object is an instance of HotPage.
 *
 * @api public
 */

module.exports = exports = new HotPage;
var hotPage = module.exports;


/**
 * The HotPage constructor
 *
 * The exports of the mongoose module is an instance of this class.
 *
 * ####Example:
 *
 *     var hotPage= require('hotplate');
 *     var hotPage2 = new hotpage.HotPage();
 *
 * @api public
 */

hotPage.HotPage = HotPage;


HotPage.prototype.processPageTemplate = function( elements, leavePlaceholders ) {

  elements = elements || {};

  var r = this.pageTemplate;

  // Replace the elements: csses, jses and vars will go where [[HEAD]] is,
  // the title will go wheer [[TITLE]] is, the body where [[BODY]] is
  if ( elements.csses ) r = r.replace(/(\[\[HEAD\]\])/,  elements.csses.render() + '$1' );
  if ( elements.jses )  r = r.replace(/(\[\[HEAD\]\])/,  elements.jses.render() + '$1' );
  if ( elements.vars)   r = r.replace(/(\[\[HEAD\]\])/,  elements.vars.render() + '$1' );

  if ( elements.title ) r = r.replace(/(\[\[TITLE\]\])/, elements.title + '$1' ); 
  if ( elements.body )  r = r.replace(/(\[\[BODY\]\])/,  elements.body + '$1' ); 
  
  // Take placeholders away. The template is probably being processed by a page,
  // which most likely added its own title, csses, js, etc.
  if( ! leavePlaceholders){
      r = r.replace(/\[\[(HEAD|TITLE|BODY)\]\]/g, '');
  }

  return r;
}

HotPage.prototype.hotHooks = {};


HotPage.prototype.hotHooks.init = function(){

  var that = this;
  var moduleName;


  hotplate.invokeAll('pageElements').forEach( function(element) {
    moduleName = element.moduleName;
    result = element.result;

    for( var type in result){
      var elements = result[type];
      switch( type ) {

        case 'jses':
          elements.forEach( function(element) { 
            that.jses.add(moduleName, element);
          });
        break;

        case 'csses':
          elements.forEach( function(element) { 
            that.csses.add(moduleName, element);
          });
        break;

        case 'vars':
          elements.forEach( function(element) { 
            that.vars.add(moduleName, element.name, element.value );
          });
        break;

      }
    }
  });
  
  // Renders the template with the values returned by the hooks...
  this.pageTemplate = this.processPageTemplate( { csses:this.csses, jses:this.jses, vars:this.vars } , true );

}

HotPage.prototype.hotHooks.init.invokes = [ 'pageElements' ];

