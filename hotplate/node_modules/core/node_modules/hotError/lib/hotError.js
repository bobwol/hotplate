/*!
 * Module dependencies.
 */

var util = require('util')
  , hotplate = require('hotplate')
  , path = require('path')
  , logger = require('hotServerLogger')
;

exports.errors = errors = {};

exports.hotHooks = hooks = {}


hooks.init = function( done ){

  var app = hotplate.app;

  // Get all shared functions from all modules, and populating the
  // variable `sharedFunctions`
  hotplate.invokeAll('definedErrors', function(err, results){
    results.forEach(function(entry){
      var errorsFromModule = entry;

      for(var error in errorsFromModule){
        errors[error] = errorsFromModule[error];
      }
    })
    done( null );
  });
}
hooks.init.invokes = [ 'definedErrors' ];


exports.hotErrorHandler = function( err, req, res, next){

  var logLevel, httpError;
  var sendResponse = hotplate.getModule('hotProtocol').sendResponse;
  var message;


  logLevel = err.logLevel ? err.logLevel : 3;

  logger.log({
    logLevel     : logLevel,
    errorName    : err.originalError ? err.originalError.name    : err.name,
    message      : err.originalError ? err.originalError.message : err.message,
    data         : { error: err },
  });


  // If the error object has sendResponse defined, then
  // send the response following hotplate's protocol
  if( err.sendResponse ) {
      httpError = err.httpError ? err.httpError : 500;
      message = err.message ? err.message : 'Error';
      sendResponse( res, { ack: 'ERROR', message: message, errors: err.errors, status: httpError } );
  } else {
    next(err);
  }
}


hooks.definedErrors = function( done ){
  var vars = {};

  vars['RuntimeError'] = function(err){
    this.httpError = 503;
    this.message = err.message || "General error";
    this.name = 'RuntimeError';
    this.originalError = err;
    this.sendResponse = true;
    this.logLevel = 5;
  }
  util.inherits(vars['RuntimeError'], Error);

  vars['NotFoundError'] = function( message ){
    this.httpError = 404;
    this.message = message || 'Resource not found';
    this.name = 'NotFoundError';
    this.sendResponse = true;
    this.logLevel = 3;
  }
  util.inherits(vars['NotFoundError'], Error);

  vars['ValidationError'] = function( message, errors ){
    this.httpError = 422;
    this.message = message || 'Validation problem';
    this.name = 'ValidationError';
    this.sendResponse = true;
    this.logLevel = 2;
    this.errors = errors;
  }
  util.inherits(vars['ValidationError'], Error);
  
  vars['ForbiddenError'] = function( message ){
    this.httpError = 403;
    this.message = message || 'Not enough privileges for the requested resource';
    this.name = 'ForbiddenError';
    this.sendResponse = true;
    this.logLevel = 3;
  }
  util.inherits(vars['ForbiddenError'], Error);


  // FIXME: Move this to auth when auth is ported
  vars['BadTokenError'] = function( message ){
    this.httpError = 403;
    this.message = message || 'Bad Token';
    this.name = 'BadTokenError';
    this.sendResponse = true;
    this.logLevel = 3;
  }
  util.inherits(vars['BadTokenError'], Error);

  done( null, vars );

}

