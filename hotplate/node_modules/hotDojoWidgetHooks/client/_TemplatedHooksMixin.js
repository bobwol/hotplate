define([
  'dojo/_base/declare',
  'dojo/_base/lang',
  'dojo/topic',
  "hotplate/hotDojoWidgetHooks/SyncTopic",
 

  ], function(
    declare
  , lang
  , topic

  , Sync

  ){

    return  declare(null, {

      templatedHooks: true,

      constructor: function(){
        this.templatedHooks = true;
        Sync.publishWhenReady('hotplate/hotDojoWidgetHooks/constructor/' + this.id, this);
      },

      buildRendering: function(){
        Sync.publishWhenReady('hotplate/hotDojoWidgetHooks/buildRendering/before/' + this.id, this);
        this.inherited(arguments);
        Sync.publishWhenReady('hotplate/hotDojoWidgetHooks/buildRendering/after/' + this.id, this);
      },

      destroyRendering: function(){
        Sync.publishWhenReady('hotplate/hotDojoWidgetHooks/destroyRendering/before/' + this.id, this);
        this.inherited(arguments);
        Sync.publishWhenReady('hotplate/hotDojoWidgetHooks/destroyRendering/after/' + this.id, this);
      },

      postCreate: function(){
        Sync.publishWhenReady('hotplate/hotDojoWidgetHooks/postCreate/before/' + this.id, this);
        this.inherited(arguments);
        Sync.publishWhenReady('hotplate/hotDojoWidgetHooks/postCreate/after/' + this.id, this);
      },

      startup: function(){
        Sync.publishWhenReady('hotplate/hotDojoWidgetHooks/startup/before/' + this.id, this);
        this.inherited(arguments);
        Sync.publishWhenReady('hotplate/hotDojoWidgetHooks/startup/after/' + this.id, this);

      },

      destroy: function(){
        Sync.publishWhenReady('hotplate/hotDojoWidgetHooks/destroy/before/' + this.id, this);
        this.inherited(arguments);
        Sync.publishWhenReady('hotplate/hotDojoWidgetHooks/destroy/after/' + this.id, this);
      }

    });
  }
);

