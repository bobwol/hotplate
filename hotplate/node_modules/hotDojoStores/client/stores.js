define([
  'hotplate/hotDojoStores/JsonRest',
  'dojo/topic',
  'dojo/_base/Deferred',
  'dojo/store/Cache',
  'dojo/store/Observable',
  'dojo/store/Memory',
  'dojo/domReady!',
  ],function(
  JsonRest
  , topic
  , Deferred
  , Cache
  , Observable
  , Memory
  ){

  var cache = {};

  var stores = function( storeName, hash ){


    // console.log("Asked for: " + storeName);
    if( typeof(cache[storeName]) !== 'undefined'){
      // console.log("Returned as cached!");
      return cache[storeName];
    }

    // If the global variable for the stores is defined...
    if(
      typeof( vars ) == 'object' &&
      typeof( vars.hotStoresVars ) == 'object' &&
      typeof( vars.hotStoresVars.stores ) == 'object'
    ){
      // console.log("Wasn't cached, looking in the stores var");

      // Checks if the store name is `something:data`, in which case it will
      // create a store passing the parameter `dataSet` set properly
      //var dataSet = '';
      //var tokens;
      //if( tokens = storeName.match(/^(.*):(.*)$/) ){
      //  storeName = tokens[1];
      //  dataSet = tokens[2];
      //}

      var definedStores = vars.hotStoresVars.stores;
      if( typeof( definedStores[storeName]) !== 'undefined' ){

        // console.log("It IS one of the stores, returning it");

        definedStore = definedStores[storeName];

        target = definedStore.target;

        // Replace from the passed hash. This allows you to have stores like
        // /test/:workspaceIdCall/action and then create a store with the
        // hash "resolved" within the store's URL
        for(var k in hash){
          target = target.replace(':' + k, hash[k]);
        }


        // Create the store
        var store = new JsonRest({
          target: target,
          idProperty: definedStore.idProperty,
          sortParam: definedStore.sortParam,
        });

        var memCache =  new Memory({
           idProperty: definedStore.idProperty
        });

        var finalStore = new Observable( Cache( store, memCache ) );

        finalStore['noCache'] = store;
        finalStore['memCache'] =  memCache;

        cache[storeName] = finalStore;
        topic.publish( 'hotplate/hotDojoStores/newStore', storeName, finalStore );
        // console.log("Final store:");
        // console.log(finalStore);
        return finalStore;
      }
    }
  }



  return stores;

});

