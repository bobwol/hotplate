
var 
  dummy
, hotplate =  require('hotplate')
, path = require('path')
, mongoose = require('mongoose')
, Schema = mongoose.Schema
, ObjectId = Schema.ObjectId
, async = require('async')
, util = require('util')
, mongoUtil = require('mongoUtil')
;

app = hotplate.app;

exports.hotHooks = hooks = {}

hooks.creatingUser = function( done, u ){
  u.settings.email = u.registerEmail; 
  done( null );
}

hooks.creatingWorkspace = function( done, u, w ){
  w.access[0].settings = {};
  w.access[0].settings.localEmail = u.registerEmail; 
  w.settings.tag = "Your tagline here";
  w.settings.longName = "Your workspace's long name"
  done( null );
}


hooks.init = function( done ){
  done( null );
}

hooks.enrichAuthUserSchema = function( done, User ){

  User.add( { settings: {
    name     : { type: String, index: true, set: mongoUtil.trim(40) },
    lastName : { type: String, index: true, set: mongoUtil.trim(40) },
    email    : { type: String, index: true, set: mongoUtil.trimAndLowerCase(80) },
    __v      : { type: Number, index: true },
  }});

  done( null );
}

hooks.enrichAuthWorkspaceSchema = function( done, Workspace) {

  Workspace.add({
    settings: {
      tag            : { type: String, index: false, set: mongoUtil.trim(150) } ,
      longName       : { type: String, index: false, set: mongoUtil.trim(50) },
      __v            : { type: Number, index: true },
  } } );

  done( null );
}

hooks.enrichAuthAccessSchema = function( done, Access ) {

  Access.add( { settings: {
    adminFlag      : { type: Boolean, index: true },
    localEmail     : { type: String, required: true, index: true, set: mongoUtil.trimAndLowerCase(80) },
    __v            : { type: Number, index: true },
  } });

  done( null );
}


hooks.run = function( done ){

  app.get( '/call/:workspaceIdCall/userConfig/:userId', getUserConfig );
  app.put( '/call/:workspaceIdCall/userConfig/:userId', putUserConfig );
  app.get( '/call/:workspaceIdCall/userConfig', getUserConfigQuery );

  app.get( '/call/:workspaceIdCall/workspaceConfig/:workspaceId', getWorkspaceConfig );
  app.put( '/call/:workspaceIdCall/workspaceConfig/:workspaceId', putWorkspaceConfig );

  app.get( '/call/:workspaceIdCall/accessConfig/:userId', getAccessConfig );
  app.put( '/call/:workspaceIdCall/accessConfig/:userId', putAccessConfig );

  // app.put('/emptyResponse/self', function(req,res,next){ res.send(''); } );
  // app.get('/emptyResponse/self', function(req,res,next){ res.send(''); } );

  done( null );
}


hooks.pageElementsPerPage = function( done, elements, req, pageName ){

  var resUtils = hotplate.getModule('hotResUtils');

  if( pageName  === 'hotDojoAppContainer/container' ){

    var userConfig, accessConfig, workspaceConfig;
    var User = mongoose.model('User');
    var Workspace = mongoose.model('Workspace');
   

    // Pre-fetch the settings  
    User.findOne({ _id: req.application.userId } , function( err, u){
      resUtils.checkFindOneResponse( err, u, done, function(){
        u = u.toObject();
        Workspace.findOne({ _id: req.application.workspaceId  }, function( err, w ){
          resUtils.checkFindOneResponse( err, w, done, function(){
            w = w.toObject();
            Workspace.findOne({ _id: req.application.workspaceId , 'access._id': req.application.userId } , 
                              { 'access': { $elemMatch: { _id: req.application.userId } } }, { strict: true } 
                              , function( err, access){
              resUtils.checkFindOneResponse( err, access, done, function(){
                access = access.toObject();


                // Settings the "artificial" ids (they are sub-records, so they
                // get their parent's
                u.settings._id = req.application.userId;
                w.settings._id = req.application.workspaceId;
                access.access[0].settings._id = req.application.userId;
 
                // Sending the page out
                done( null, {
 
                  moduleName: 'bd', result: {
                    jses: ['bd.js'],
                    csses: ['bd.css'],
                    vars: [
                      { name: 'userConfig', value: u.settings },
                      { name: 'accessConfig', value:access.access[0].settings },
                      { name: 'workspaceConfig', value:w.settings } 
                    ], 
                  }
                });
              });
            });
          });
        });
      });
    });


  } else {
    done( null, { moduleName: 'bd', result: {} }  );
  }
}


// Simply activate path to client files
hooks.clientPaths = function( done ){
  done( null, { moduleName: 'bd', result: [ path.join(__dirname, '../client') ] } );
}


hooks.stores = function( done ){
  done( null, {
    accessConfig   : { target: '/call/:workspaceIdCall/accessConfig/',    idProperty: '_id', sortParam: 'sortBy', },
    workspaceConfig: { target: '/call/:workspaceIdCall/workspaceConfig/', idProperty: '_id', sortParam: 'sortBy', },
    userConfig     : { target: '/call/:workspaceIdCall/userConfig/',      idProperty: '_id', sortParam: 'sortBy', },
  });
}


hooks.sharedFunctions = function( done ) {
  var result = {};
  done( null, { moduleName: 'bd', result: result } );
}


function getWorkspaceConfig( req, res, next ){
 
  var resUtils = hotplate.getModule('hotResUtils');
  var sendResponse = hotplate.getModule('hotProtocol').sendResponse;
  var e = hotplate.getModule('hotError').errors;
  var Workspace = mongoose.model('Workspace');

  if( ! hotplate.mongoIdCheck(req.params.workspaceId ) )
    return next( new e.ValidationError( "Workspace ID not valid" ) );

  Workspace.findOne({ _id: req.params.workspaceId }, function( err, doc ){
    resUtils.checkFindOneResponse( err, doc, next, function(){
      sendResponse( res, doc.settings );
    });
  });
}


function putWorkspaceConfig( req, res, next ){
 
  var resUtils = hotplate.getModule('hotResUtils');
  var sendResponse = hotplate.getModule('hotProtocol').sendResponse;
  var e = hotplate.getModule('hotError').errors;
  var errors = [];


  if( ! hotplate.mongoIdCheck(req.params.workspaceId ) )
    return next( new e.ValidationError( "Workspace ID not valid" ) );
  req.body._id = req.params.workspaceId;

  // Looks for a workspace. If it's there, answers without errors. If not,
  // answers with a very short error
  var Workspace = mongoose.model('Workspace');

  // Stop here if required parameters are empty
  if( resUtils.parametersAreEmpty(req.body, ['longName', 'tag'], errors, next) ) return; 

  var updateObject = resUtils.makeUpdateObject('settings.', req.body );
  
  Workspace.findByIdAndUpdate( req.params.workspaceId, updateObject, function( err, doc ){
    resUtils.checkUpdateResponse( err, doc, next, function(){
      sendResponse( res );
    });
  });

}


function getAccessConfig( req, res, next ){
 
  var resUtils = hotplate.getModule('hotResUtils');
  var sendResponse = hotplate.getModule('hotProtocol').sendResponse;
  var e = hotplate.getModule('hotError').errors;
  var Workspace = mongoose.model('Workspace');
 
  if( ! hotplate.mongoIdCheck(req.params.userId ) )
    return next( new e.ValidationError( "User ID not valid" ) );

  Workspace.findOne({ _id: req.application.workspaceId , 'access._id': req.params.userId } , 
                    { 'access': { $elemMatch: { _id: req.application.userId } } }, { strict: true } 
                    , function( err, doc){
    resUtils.checkFindOneResponse(err, doc, next, function(){
      doc = doc.toObject();
      doc.access[0].settings._id = req.params.userId; // Artificial ID, will match the user's
      sendResponse( res, doc.access[0].settings );
    });
  });
}


function putAccessConfig( req, res, next ){

  var resUtils = hotplate.getModule('hotResUtils');
  var sendResponse = hotplate.getModule('hotProtocol').sendResponse;
  var Validators = hotplate.getModule('hotSharedCode').sharedFunctions.hotCommonValidators; 
  var e = hotplate.getModule('hotError').errors;
  var errors = [];

  var Workspace = mongoose.model('Workspace');


  if( ! hotplate.mongoIdCheck(req.params.userId ) )
    return next( new e.ValidationError( "User ID not valid" ) );

  // The ID comes from the URL, the version is calculated
  req.body._id = req.params.userId;
     
  // Check for required parameters
  // if( resUtils.parametersAreEmpty( req.body, ['localEmail'], errors, next ) ) return; // FOR FUTURE NEEDS

  // Validate passed fields
  if( ! Validators.email(req.body.localEmail) ){
     errors.push( { field: 'localEmail' , message: Validators.email(false), mustChange: false } );
  }
  if( resUtils.respondIfErrors( errors, next ) ) return;

  // Make up update object
  var updateObject = resUtils.makeUpdateObject('access.$.settings.', req.body );
  console.log(updateObject);
 
  // Actually update the object on the database
  Workspace.update( { _id: req.application.workspaceId, 'access._id': req.params.userId }, updateObject).exec(function( err, doc){ 
    resUtils.checkUpdateResponse( err, doc, next, function(){
      sendResponse( res );
    });
  });
}



function getUserConfig( req, res, next ){
 
  var resUtils = hotplate.getModule('hotResUtils');
  var sendResponse = hotplate.getModule('hotProtocol').sendResponse;
  var User = mongoose.model('User');
  var e = hotplate.getModule('hotError').errors;

  if( ! hotplate.mongoIdCheck(req.params.userId ) )
    return next( new e.ValidationError( "User ID not valid" ) );

  User.findOne({ _id: req.params.userId } , function( err, doc){
    resUtils.checkFindOneResponse(err, doc, next, function(){
      // var obj = doc.settings.toObject();
      // sendResponse( res, obj );
      sendResponse( res );
    });
  });
}

function getUserConfigQuery( req, res, next ){
 
  var resUtils = hotplate.getModule('hotResUtils');
  var sendResponse = hotplate.getModule('hotProtocol').sendResponse;
  var User = mongoose.model('User');
  var e = hotplate.getModule('hotError').errors;

  if( ! hotplate.mongoIdCheck(req.params.userId ) )
    return next( new e.ValidationError( "User ID not valid" ) );

  User.findOne({ _id: req.params.userId } , function( err, doc){
    resUtils.checkFindOneResponse(err, doc, next, function(){
      var obj = doc.settings.toObject();
      obj._id = 'self';
      console.log("About to send:");
      console.log(obj);
      sendResponse( res, [obj] );
    });
  });
}


function putUserConfig( req, res, next ){

  var resUtils = hotplate.getModule('hotResUtils');
  var sendResponse = hotplate.getModule('hotProtocol').sendResponse;
  var Validators = hotplate.getModule('hotSharedCode').sharedFunctions.hotCommonValidators; 
  var errors = [];
  var User = mongoose.model('User');
  var e = hotplate.getModule('hotError').errors;
  var messages = hotplate.getModule('hotMessages');

  if( ! hotplate.mongoIdCheck(req.params.userId ) )
    return next( new e.ValidationError( "User ID not valid" ) );

  if( req.params._tabId && ! hotplate.mongoIdCheck(req.params._tabId ) )
    return next( new e.ValidationError( "TAB ID not valid" ) );


  req.body._id = req.params.userId;
       
  // Check for required parameters
  // if( resUtils.parametersAreEmpty( req.body, ['localEmail'], errors, next ) ) return; // FOR FUTURE NEEDS

  // Validate passed fields
  if( ! Validators.email(req.body.email) ){
     errors.push( { field: 'email' , message: Validators.email(false), mustChange: false } );
  }
  if( resUtils.respondIfErrors( errors, next ) ) return;

  // Make up update object
  var updateObject = resUtils.makeUpdateObject('settings.', req.body );

  // Actually update the object on the database
  User.findByIdAndUpdate( req.params.userId, updateObject).exec(function( err, doc){ 
    resUtils.checkUpdateResponse( err, doc, next, function(){
      sendResponse( res );
      
      messages.sendToTabsOfWorkspace(req.application.workspaceId,
                            req.body._tabId, 
                            req.application.userId,
                            'storeChange', 
                            { storeName: 'userConfig', objectId: req.params.userId, object: doc.settings, remote: true } );
    });
  });
}

