var 
  dummy
, hotplate =  require('hotplate')
, path = require('path')
, mongoose = require('mongoose')
, Schema = mongoose.Schema
, ObjectId = Schema.ObjectId
, util = require('util')
;

app = hotplate.app;

exports.hotHooks = hooks = {}


hooks.init = function( done ){

  // Global settings for the user
  var UserAccount = new Schema( {
    _id      : { type: ObjectId, index: true }, // userId
    name     : { type: String, index: true }, // Global name
    lastName : { type: String, index: true }, // Global lastName
    email    : { type: String, index: true }, // Global email
  });
  mongoose.model( 'UserAccount', UserAccount );

  
  // Workspace-specific settings
  var UserConfig = new Schema( {
    _id            : { type: ObjectId, index: true }, // userId
    adminFlag      : { type: Boolean, index: true }, 
    localName      : { type: String, index: true },
    localLastName  : { type: String, index: true },
    localEmail     : { type: String, index: true },
  });
  mongoose.model('UserConfig', UserConfig);
  var WorkspaceSettings = new Schema({
    _id            : { type: ObjectId, index: true }, // WorkspaceId
    tag            : { type: String, validate: [function(v){ return v.length < 5;}, 'Tag too long'], index: false },
    longName       : { type: String, index: false },
    userConfig     : [ UserConfig ],
  });
  mongoose.model( 'WorkspaceSettings', WorkspaceSettings );


  done(null);
}

hooks.run = function( done ){

  app.get( '/call/:workspaceIdCall/workspaceSettings/self', getWorkspaceSettings );
  app.put( '/call/:workspaceIdCall/workspaceSettings/self', putWorkspaceSettings );

  app.get( '/call/:workspaceIdCall/userConfig/self', getUserConfig );
  app.put( '/call/:workspaceIdCall/userConfig/self', putUserConfig );

  done( null );
}


hooks.pageElementsPerPage = function( done, elements, req, pageName ){

  if( pageName  === 'hotDojoAppContainer/container' ){

    done( null, {
      moduleName: 'bd', result: {
        jses: ['bd.js'],
        csses: ['bd.css']
      }
    });
  } else {
    done( null, { moduleName: 'bd', result: {} }  );
  }
}



// Simply activate path to client files
hooks.clientPaths = function( done ){
  done( null, { moduleName: 'bd', result: [ path.join(__dirname, '../client') ] } );
}


hooks.stores = function( done ){
  done( null, {

    userConfig  :      { target: '/call/:workspaceIdCall/userConfig/',        idProperty: '_id', sortParam: 'sortBy', },
    workspaceSettings: { target: '/call/:workspaceIdCall/workspaceSettings/', idProperty: '_id', sortParam: 'sortBy', },
  });
}



function getWorkspaceSettings( req, res, next ){
 
  var sendResponse = hotplate.getModule('hotProtocol').sendResponse;
  var e = hotplate.getModule('hotError').errors;

  // Looks for a workspace. If it's there, answers without errors. If not,
  // answers with a very short error
  var WorkspaceSettings = mongoose.model('WorkspaceSettings');
  WorkspaceSettings.findOne({ _id: req.application.workspaceId }, function(err, doc){
    if(err ){
      next(new e.RuntimeError( err ) );
    } else {

      // Warning! Workspace settings NOT found! Creating one on the spot.
      if( ! doc ){
        var w = new WorkspaceSettings();
        w.tag = "";
        w.longName = "";
        w._id = req.application.workspaceId;
        w.save( function( err ) {
          if( err ){
            next( new e.RuntimeError( err ) );
          } else {
            sendResponse( res, { data: w  } );
          }
        });
      } else {
        sendResponse( res, { data: doc  } );
      }
    }
  });
}


function putWorkspaceSettings( req, res, next ){
 
  var sendResponse = hotplate.getModule('hotProtocol').sendResponse;
  var e = hotplate.getModule('hotError').errors;

  // Looks for a workspace. If it's there, answers without errors. If not,
  // answers with a very short error
  var WorkspaceSettings = mongoose.model('WorkspaceSettings');

  // Delete the ID and the version since there's no point,
  //  _id is set as "self" and __v is unimportant
  delete req.body._id;
  delete req.body.__v;

  var updater = function( doc ){
    for( var k in req.body ) doc[k] = req.body[k];
  }

  // Save the new record
  findAndSave( WorkspaceSettings, { _id: req.application.workspaceId }, updater, function( err, doc ) {
    sendSaveResponse( err, doc, res, next ); // This WILL call next()
  });
}


function getUserConfig( req, res, next ){
 
  var sendResponse = hotplate.getModule('hotProtocol').sendResponse;
  var e = hotplate.getModule('hotError').errors;

  var WorkspaceSettings = mongoose.model('WorkspaceSettings');
  var UserConfig = mongoose.model('UserConfig');

  
  WorkspaceSettings.findOne({ _id: req.application.workspaceId, 'userConfig._id': req.application.userId }, function(err, doc){
    if(err ){
      next(new e.RuntimeError( err ) );
    } else {

      // Warning! User settings for this workspace settings NOT found! Creating one on the spot.
      if( ! doc ){

        // Make a blank UserConfig. NOTE: this will absolutely have to inherit from UserAccount
        var uc = new UserConfig();
        uc.localName = "";
        uc.localLastName = "";
        uc._id = req.application.userId;

        WorkspaceSettings.findById( req.application.workspaceId, function( err, ws ){
          if (err){
            next( e.RuntimeError( err ) );
          } else {
            ws.userConfig.push(uc);
            ws.save( function(err) {
              if( err ){
                next( e.RuntimeError( err ) );
              } else {
                sendResponse( res, { data: uc } );
              }
            });
          }
        });
 
      } else {
        sendResponse( res, { data: doc.userConfig[0] } );
      }

    }

  });
}



function putUserConfig( req, res, next ){
  var sendResponse = hotplate.getModule('hotProtocol').sendResponse;
  var e = hotplate.getModule('hotError').errors;

  var WorkspaceSettings = mongoose.model('WorkspaceSettings');
  var UserConfig = mongoose.model('UserConfig');
         
  // Delete the ID and the version since there's no point,
  //  _id is set as "self" and __v is unimportant
  delete req.body._id;
  delete req.body.__v;

  // Will search the right userId within the document and will
  // update the right sub_document based on what's been passed to the
  // form
  var updater = function( doc ){
    var subdoc = doc.userConfig.id(req.application.userId); 
    for( var k in req.body ) subdoc[k] = req.body[k];
  }

  findAndSave( WorkspaceSettings, { _id: req.application.workspaceId,'userConfig._id': req.application.userId }, updater, function( err, doc) {
    sendSaveResponse( err, doc, res, next ); // This WILL call next()
  });
}




function findAndSave( model, query, updater, next ){

  model.findOne( query, function( err, doc ) {
    if( err ){
      next( err, null );
    } else {
      if(! doc ){
        next( new Error("Object to save not found"), null );
      } else {

        // Run the updater and save...
        updater( doc );
        doc.save( next );
        
      }
    }
  });
}


function sendSaveResponse( err, doc, res, next ){

  var sendResponse = hotplate.getModule('hotProtocol').sendResponse;
  var e = hotplate.getModule('hotError').errors;
  var errors = [];

  // Something went wrong
  if( err ){

    // It's a validation error. It's a "soft" problem, will simply
    // throw the ValidationError error with the right errors set
    if( err.name == 'ValidationError' ){
      for( var y in err.errors ){
        errors.push( { field: y, message:err.errors[y].type } );
        next( new e.ValidationError('Validation problem', errors) );
      }
    // It's a more serious error, throw the exception
    } else {
      next( new e.RuntimeError( err ) );
    }

  // All good and saved
  } else {
    sendResponse( res, { message: "Data saved" }  );
  }

};


