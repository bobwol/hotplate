var 
  dummy
, hotplate =  require('hotplate')
, path = require('path')
, mongoose = require('mongoose')
, Schema = mongoose.Schema
, ObjectId = Schema.ObjectId
, util = require('util')
;

app = hotplate.app;

exports.hotHooks = hooks = {}


hooks.init = function( done ){

  var WorkspaceSettings = new Schema({
    workspaceId    : { type: ObjectId, index: true },
    tag            : { type: String, index: false },
    longName       : { type: String, index: false },
  });
  mongoose.model('WorkspaceSettings', WorkspaceSettings);

  done(null);
}

hooks.run = function( done ){

  // app.get( '/call/:workspaceIdCall/userSettings', getUserSettings );
  // app.put( '/call/:workspaceIdCall/userSettings', postUserSettings );

  app.get( '/call/:workspaceIdCall/workspaceSettings/self', getWorkspaceSettings );
  app.put( '/call/:workspaceIdCall/workspaceSettings/self', putWorkspaceSettings );

  done( null );
}


hooks.pageElementsPerPage = function( done, elements, req, pageName ){

  if( pageName  === 'hotDojoAppContainer/container' ){

    done( null, {
      moduleName: 'bd', result: {
        jses: ['bd.js'],
        csses: ['bd.css']
      }
    });
  } else {
    done( null, { moduleName: 'bd', result: {} }  );
  }
}



// Simply activate path to client files
hooks.clientPaths = function( done ){
  done( null, { moduleName: 'bd', result: [ path.join(__dirname, '../client') ] } );
}


hooks.stores = function( done ){
  done( null, {

    userSettings:      { target: '/call/:workspaceIdCall/userSettings/',      idProperty: '_id', sortParam: 'sortBy', },
    workspaceSettings: { target: '/call/:workspaceIdCall/workspaceSettings/', idProperty: '_id', sortParam: 'sortBy', },

  });
}



function getWorkspaceSettings( req, res, next ){
 
  var name = req.query.name;
  var sendResponse = hotplate.getModule('hotProtocol').sendResponse;
  var e = hotplate.getModule('hotError').errors;

  // Looks for a workspace. If it's there, answers without errors. If not,
  // answers with a very short error
  var WorkspaceSettings = mongoose.model('WorkspaceSettings');
  WorkspaceSettings.findOne({ _id: req.application.workspaceId }, function(err, doc){
    if(err ){
      next(new e.RuntimeError( err ) );
    } else {

      // Warning! Workspace settings NOT found! Creating one on the spot.
      if( ! doc ){
        var w = new WorkspaceSettings();
        w.tag = "";
        w.longName = "";
        w._id = req.application.workspaceId;
        w.save( function( err ) {
          if( err ){
            next( new e.RuntimeError( err ) );
          } else {
            sendResponse( res, { data: w  } );
          }
          
        });
      } else {
        sendResponse( res, { data: doc  } );
      }
    }
  });
}

function putWorkspaceSettings( req, res, next ){

  // setTimeout( function() { 
 
  var name = req.query.name;
  var sendResponse = hotplate.getModule('hotProtocol').sendResponse;
  var e = hotplate.getModule('hotError').errors;

  // Looks for a workspace. If it's there, answers without errors. If not,
  // answers with a very short error
  var workspaceSettings = mongoose.model('WorkspaceSettings');

  // Delete the ID and the version since there's no point,
  //  _id is set as "self" and __v is unimportant
  delete req.body._id;
  delete req.body.__v;

  // Insert and update
  workspaceSettings.findByIdAndUpdate( req.application.workspaceId, { $set: req.body  }, function( err, doc ) {
  
    if( err ){
      next( new e.RuntimeError(err) );
    } else {
      if(! doc ){
        next( new e.RuntimeError("Unexpected Object not found") );
      } else {
        sendResponse( res );
      }
    }
  });

  // }, 1000 );

}





