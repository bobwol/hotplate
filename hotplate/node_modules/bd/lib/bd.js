
var 
  dummy
, hotplate =  require('hotplate')
, path = require('path')
, mongoose = require('mongoose')
, Schema = mongoose.Schema
, ObjectId = Schema.ObjectId
, async = require('async')
, util = require('util')
, mongoUtil = require('mongoUtil')
, resUtil = require('resUtil')
;

app = hotplate.app;

exports.hotHooks = hooks = {}


hooks.init = function( done ){

  done(null);
}

hooks.enrichAuthUserSchema = function( done, User ){

  User.add( { settings: {
    name     : { type: String, index: true  set: mongoUtil.trim(15) },
    lastName : { type: String, index: true, set: mongoUtil.trim(15) },
    email    : { type: String, index: true, set: mongoUtil.trimAndLowerCase(60) },
  }});

  done( null );
}


hooks.enrichAuthWorkspaceSchema = function( done, Workspace) {

  Workspace.add({
    settings: {
      tag            : { type: String, index: false, set: mongoUtil.trim(3) } ,
      longName       : { type: String, index: false, set: mongoUtil.trim(150) },
  } } );

  done( null );
}

hooks.enrichAuthAccessSchema = function( done, Access ) {

  Access.add( { settings: {
    adminFlag      : { type: Boolean, index: true },
    localName      : { type: String, index: true, required: true, set: mongoUtil.trim(5)  },
    localLastName  : { type: String, index: true, required: true, set: mongoUtil.trim(10) },
    localEmail     : { type: String, index: true, required: true, set: mongoUtil.trimAndLowerCase(60) },
  } });

  done( null );
}


hooks.run = function( done ){

  // app.get( '/call/:workspaceIdCall/accountConfig/self', getAccountConfig );
  // app.put( '/call/:workspaceIdCall/accountConfig/self', putAccountConfig );

  app.get( '/call/:workspaceIdCall/workspaceConfig/self', getWorkspaceConfig );
  app.put( '/call/:workspaceIdCall/workspaceConfig/self', putWorkspaceConfig );

  app.get( '/call/:workspaceIdCall/accessConfig/self', getAccessConfig );
  app.put( '/call/:workspaceIdCall/accessConfig/self', putAccessConfig );


  // Apply validators from shared functions
  // Note: you need to do it here, in run(), as it's the only spot where you are
  // _guaranteed_ to have all of them loaded by the sharedFunctions module
  mongoUtil.addSharedValidator( 'Access', 'settings.localEmail', 'hotCommonValidators', 'email' );

  done( null );
}


hooks.pageElementsPerPage = function( done, elements, req, pageName ){

  if( pageName  === 'hotDojoAppContainer/container' ){

    done( null, {
      moduleName: 'bd', result: {
        jses: ['bd.js'],
        csses: ['bd.css']
      }
    });
  } else {
    done( null, { moduleName: 'bd', result: {} }  );
  }
}


// Simply activate path to client files
hooks.clientPaths = function( done ){
  done( null, { moduleName: 'bd', result: [ path.join(__dirname, '../client') ] } );
}


hooks.stores = function( done ){
  done( null, {
    userConfig  :      { target: '/call/:workspaceIdCall/accessConfig/',        idProperty: '_id', sortParam: 'sortBy', },
    workspaceSettings: { target: '/call/:workspaceIdCall/workspaceConfig/', idProperty: '_id', sortParam: 'sortBy', },
  });
}


hooks.sharedFunctions = function( done ) {
  var result = {};
  done( null, { moduleName: 'bd', result: result } );
}



function getWorkspaceConfig( req, res, next ){
 
  var sendResponse = hotplate.getModule('hotProtocol').sendResponse;

  // Looks for a workspace. If it's there, answers without errors. If not,
  // answers with a very short error
  var Workspace = mongoose.model('Workspace');
  Workspace.findOne({ _id: req.application.workspaceId }, function( err, doc ){

    resUtil.checkFindOneResponse( err, doc, next, function(){
      sendResponse(res,  { data: doc.settings } );
    });
  });
}


function putWorkspaceConfig( req, res, next ){
 
  var sendResponse = hotplate.getModule('hotProtocol').sendResponse;
  var e = hotplate.getModule('hotError').errors;

  // Looks for a workspace. If it's there, answers without errors. If not,
  // answers with a very short error
  var Workspace = mongoose.model('Workspace');

  // Delete the ID and the version since there's no point,
  //  _id is set as "self" and __v is unimportant
  delete req.body._id;
  delete req.body.__v;

  var updateObject = resUtil.makeUpdateObject('settings.', req.body );

  Workspace.findByIdAndUpdate( req.application.workspaceId, updateObject, function( err, doc ){
    resUtil.checkUpdateResponse( err, doc, 'settings.', 'Validation problems!', next, function(){
      sendResponse( res, { message: 'Data saved!' } );
    });
  });

}


function getAccessConfig( req, res, next ){
 
  var sendResponse = hotplate.getModule('hotProtocol').sendResponse;
  var e = hotplate.getModule('hotError').errors;

  var Workspace = mongoose.model('Workspace');

 
  Workspace.findOne({ _id: req.application.workspaceId , 'access._id': req.application.userId } , 
                    { 'access': { $elemMatch: { _id: req.application.userId } } } 
                    , function( err, doc){
    resUtil.checkFindOneResponse(err, doc, next, function(){
      sendResponse( res, { data: doc.access[0].settings } );
    });
  });
}



function putAccessConfig( req, res, next ){
  var sendResponse = hotplate.getModule('hotProtocol').sendResponse;
  var e = hotplate.getModule('hotError').errors;

  var Workspace = mongoose.model('Workspace');
       
  // Delete the ID and the version since there's no point,
  //  _id is set as "self" and __v is unimportant
  delete req.body._id;
  delete req.body.__v;

  console.log(req.body.localEmail);
  

  var updateObject = resUtil.makeUpdateObject('access.$.settings.', req.body );
  
  Workspace.update( { _id: req.application.workspaceId, 'access._id': req.application.userId }, updateObject).exec(function( err, doc){ 
    resUtil.checkUpdateResponse( err, doc, 'access.$.settings.', 'Validation problems!', next, function(){
      sendResponse( res, { message: "Data saved!" }  );

    });
  });
}



/* CURRENTLY UNUSED */

/*
function findAndSave( model, query, updater, next ){

  model.findOne( query, function( err, doc ) {
    if( err ){
      next( err, null );
    } else {
      if(! doc ){
        next( new Error("Object to save not found"), null );
      } else {

        // Run the updater and save...
        updater( doc );
        doc.save( next );
        
      }
    }
  });
}

*/
