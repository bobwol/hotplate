var 
  dummy
, hotplate =  require('hotplate')
, path = require('path')
, JsonRestStores = require('jsonreststores')
, async = require('async')
, util = require('util')
, ObjectId = require('mongowrapper').ObjectId
, checkObjectId = require('mongowrapper').checkObjectId
, db = hotplate.get('db')
, declare = require( 'simpledeclare' )
;

app = hotplate.app;

exports.hotHooks = hooks = {}

hooks.creatingUser = function( done, u, body ){
  u.settings = u.settings || {};
  u.settings.email = u.registerEmail; 

  u.settings.name = body.name;
  u.settings.surname = body.surname;

  done( null );
}

hooks.creatingWorkspace = function( done, u, w ){

  w.access[0].settings = {};
  w.access[0].settings.localEmail = u.registerEmail; 

  w.settings = w.settings || {};
  w.settings.tag = "Your tagline here";
  w.settings.longName = "Your workspace's long name"

  done( null );
}


hooks.createWorkspaceAnonSchema = function( done, schema ){

  schema.structure.name    = { type: 'string', notEmpty: true, required: true, trim: 45 };
  schema.structure.surname = { type: 'string', notEmpty: true, required: true, trim: 60 };

  done( null );
}

hooks.init = function( done ){
  done( null );
}

hooks.run = function( done ){

  var resUtils = hotplate.getModule('hotResUtils');
  var mongoUtils = hotplate.getModule('hotMongoUtils');
  var MongoStores2 = hotplate.getModule('hotMongoStores').MongoStores2;

  var Store = hotplate.getModule('hotMongoStores').MongoStore;
  var e = hotplate.getModule('hotMongoStores').Errors;


  var Store = JsonRestStores.Store;
  var MongoStore = JsonRestStores.MongoStore;
  var MongoSchema = JsonRestStores.MongoStore.Schema;
 
  var OptionsStore = declare( MongoStore,  {
    storeName: 'options',

    schema: new MongoSchema({
    // schema: new JsonRestStores.MongoStore.Schema({
    // schema: new JsonRestStores.SimpleSchema({
      _id   : { type: 'id', required: true },
      _tabId: { type: 'id', required: true, doNotSave: true },

      name  : { type: 'string', notEmpty: true, trim: 50, searchable: true, sortable: true, searchPartial: true },
      age   : { type: 'number', notEmpty: true , searchable: true, sortable: true },
    }),

    paramIds: [ 'optionId' ],
    handleGet: true,
    handlePut: true,
    /*extrapolateDoc: function(){
      console.log("In the Store's extrapolateDoc");
      return this.inherited(arguments);
    }*/
  });


  // app.get( '/call/:workspaceIdCall/Options/:optionId', JsonRestStores.Store.makeGet( OptionsStore ) );
  
  Store.makeAll( app,  '/call/:workspaceIdCall/Options/', ':optionId', OptionsStore );



  var userConfig = new mongoUtils.MongoStore( {

    // COMMON
    schema: new resUtils.SimpleSchema({
      _id     : { type: 'id', isRequired: true },
      _tabId  : { type: 'id', doNotSave: true  },

      email   : { type: 'string', notEmpty: true, trim: 70 },
      surname : { type: 'string', notEmpty: true, trim: 50 },
      name    : { type: 'string', notEmpty: true, trim: 50 },
    } ),

    collection:'users',
    storeName:  'userConfig',
    paramsIds: [ 'userId' ],
    // findOne: function( req, next, cb ){ }
    setDocSection: function( req, next, cb){
      this.docSection = this.fetchedDoc.settings;
      cb();
    },

    // GET
    checkPermissionsGet: function( req, next, cb ) {
      var f = this.fetchedDoc;
      // Workspace where user has logged in needs to have, in `access`, the user that is being requested
      if ( req.application.workspace.access.filter( function(o){ return o._id.toString() === f._id.toString(); } ).length  ){
        cb();
      } else {
        next( new this.e.ForbiddenError() );
      }
    },
    prepareDocSectionBeforeSend: function(req, next, cb){
      this.docSection._id = this.fetchedDoc._id;
      cb();
    },

    // PUT

    // findAndModify: function( req, next, cb ) {} 
    checkPermissionsPut: function( req, next, cb ) {
      var f = this.fetchedDoc;
      cb();
    },
    updateObjectPrefix: 'settings.',
    setBroadcastObject: function( req, next, cb ){
      this.broadcastObject = this.docSection;
      this.broadcastObject._id = this.fetchedDoc._id;
      cb();
    },
  });

  app.get( '/call/:workspaceIdCall/userConfig/:userId', userConfig.makeGet() );
  app.put( '/call/:workspaceIdCall/userConfig/:userId', userConfig.makePut() );



  // Copy userConfig onto a new object
  // This is not pretty, but it works. It's a "flat" object though
  userConfigNoWorkspace = {};
  for( var k in userConfig ){
     userConfigNoWorkspace[k] = userConfig[k];
   }

  // Redefine the permission calls 
  userConfigNoWorkspace.checkPermissionsGet = function( req, next, cb ){
    if ( req.session.userId.toString() == req.params.userId ){
      cb();
    } else {
      next( new this.e.ForbiddenError() );
    }
  };
  userConfigNoWorkspace.checkPermissionsPut = function( req, next, cb ) {
    if( req.session.userId.toString() == this.fetchedDoc._id.toString() ){
      cb();
    } else {
      next( new this.e.ForbiddenError() );
    }
  };
  userConfigNoWorkspace.killComet = true;

  app.get( '/call/userConfigNoWorkspace/:userId', userConfigNoWorkspace.makeGet() );
  app.put( '/call/userConfigNoWorkspace/:userId', userConfigNoWorkspace.makePut() );

  var workspaceConfig = new mongoUtils.MongoStore( {

    // COMMON

    schema: new resUtils.SimpleSchema({
      _id     : { type: 'id', isRequired: true, doNotSave: true },
      _tabId  : { type: 'id', doNotSave: true  },

      longName: { type: 'string', notEmpty: true, trim: 35 },
      tag     : { type: 'string', notEmpty: true, notEmpty: true, trim: 70 },
    }),
    collection:'workspaces',
    storeName:  'workspaceConfig',
    paramsIds: [ 'workspaceId' ],
    objectId:  [ 'workspaceId' ], // TODO: MAKE THIS USEFUL
    setDocSection: function( req, next, cb){
      this.docSection = this.fetchedDoc.settings;
      cb();
    },

    // GET

    checkPermissionsGet: function( req, next, cb ) {
      if ( resUtils.currentUserInWorkspaceAccess( req, this.fetchedDoc ) ){
        cb();
      } else {
        next( new this.e.ForbiddenError() );
      }
    },
    prepareDocSectionBeforeSend: function(req, next, cb){
      this.docSection._id = this.fetchedDoc._id;
      cb();
    },

    // PUT

    updateObjectPrefix: 'settings.',
    checkPermissionsPut:function( req, next, cb ) {
      // Asking user needs to be in the workspace's `access` list
      if ( resUtils.currentUserInWorkspaceAccess( req, this.fetchedDoc ) ){
        cb();
      } else {
        next( new this.e.ForbiddenError() );
      }
    },
    setBroadcastObject: function( req, next, cb ){
      this.broadcastObject = this.docSection;
      this.broadcastObject._id = this.fetchedDoc._id;
      cb();
    },
  } );


  app.get( '/call/:workspaceIdCall/workspaceConfig/:workspaceId', workspaceConfig.makeGet() );
  app.put( '/call/:workspaceIdCall/workspaceConfig/:workspaceId', workspaceConfig.makePut() );


  var accessConfig = new mongoUtils.MongoStore( {

    // COMMON

    schema: new resUtils.SimpleSchema({
      _id       : { type: 'id', isRequired: true, doNotSave: true },
      _tabId    : { type: 'id', doNotSave: true  },

      localEmail: { type: 'string', notEmpty: true, trim: 35 },
    }),

    collection:   'workspaces',
    storeName:    'accessConfig',
    paramsIds:    [ 'userId' ],

    findOne: function( req, next, cb ) {
      this.collectionObject.findOne({ _id: req.application.workspace._id , 'access._id': ObjectId( req.params.userId) }, cb );
    },
    setDocSection: function( req, next, cb ){
      var ds = this.fetchedDoc.access.filter(
        function(o) { return o._id.toString() === req.params.userId.toString() }
      )[0];
      this.accessUserId = ds._id;
      this.docSection = ds.settings;
      cb();
    },

    // GET

    checkPermissionsGet:function( req, next, cb ) {
      if ( true ){ 
        cb();
      } else {
        next( new this.e.ForbiddenError() );
      }
    },
    prepareDocSectionBeforeSend: function(req, next,  cb){
      this.docSection._id = this.accessUserId;
      cb( );
    },

    // PUT

    checkPermissionsPut:function( req, next, cb ) {
      if ( req.application.user._id.toString() == this.accessUserId.toString() ){
        cb();
      } else {
        next( new this.e.ForbiddenError() );
      }
    },
    updateObjectPrefix: 'access.$.settings.',
    findAndModify: function( req, next, cb ){

       this.collectionObject.findAndModify(
         {  
           _id: req.application.workspace._id , 
           'access._id': ObjectId( req.params.userId ),
           access: { $elemMatch: { _id: ObjectId( req.params.userId ) } }
         }, 
         { },
         this.updateObject, 
         { new: true }, 
         cb );
    },

    setBroadcastObject: function( req, next, cb ){
      this.broadcastObject = this.docSection;
      this.broadcastObject._id = this.accessUserId;
      cb();
    },
  } );

  app.get( '/call/:workspaceIdCall/accessConfig/:userId', accessConfig.makeGet() );
  app.put( '/call/:workspaceIdCall/accessConfig/:userId', accessConfig.makePut() );



  newStore = new MongoStores2( {

    schema: new resUtils.SimpleSchema({
      _id       : { type: 'id', isRequired: true, doNotSave: true },
      _tabId    : { type: 'id', doNotSave: true  },

      localEmail: { type: 'string', notEmpty: true, trim: 35 },
    }),

    collection:   'newstore',
    storeName:    'newStore',
    objectId:     'userId',
  });



  app.get( '/call/newStore/:userId', newStore.makeGet() );
  app.put( '/call/newStore/:userId', newStore.makePut() );

  // app.put('/emptyResponse/self', function(req,res,next){ res.send(''); } );
  // app.get('/emptyResponse/self', function(req,res,next){ res.send(''); } );
  //
  // app.get( '/call/userConfig', getUserConfigQuery );

  done( null );
}


hooks.pageElementsPerPage = function( done, elements, req, pageName ){

  var resUtils = hotplate.getModule('hotResUtils');
  var mongoUtils = hotplate.getModule('hotMongoUtils');


  switch(pageName){


    case 'hotDojoAppContainer/container':

      var userConfig, accessConfig, workspaceConfig;

      workspaceConfig     = req.application.workspace.settings;
      workspaceConfig._id = req.application.workspace._id;

      userConfig          = req.application.user.settings;
      userConfig._id      = req.application.user._id;

      accessConfig        = req.application.access.settings;
      accessConfig._id    = req.application.user._id;

      // Sending the page out
      done( null, {
              moduleName: 'bd', result: {
                jses:  ['bdMain.js', 'jade.js' ],
                csses: ['bdMain.css'],
                vars: [
                  { name: 'userConfig',      value: userConfig },
                  { name: 'accessConfig',    value: accessConfig },
                  { name: 'workspaceConfig', value: workspaceConfig } 
                ], 
              }
      });
    break;

    // Add an extra div to the "No workspaces to pick!" page, so that
    // a user can click on their config if they like (they are logged in after all)
    case 'hotDojoAuth/pickButEmptyPage':

      done( null, {
               moduleName: 'bd', result: {
                 body: elements.body.replace('</div></body>', '<div id="userConfig"></div></div></body>'),
                 jses: ['mainPickEnrich.js', 'jade.js'],
              }
      });
    break;

    case 'hotDojoAuth/registerPage':
      done( null, {
               moduleName: 'bd', result: {
                 jses: ['mainChangeRegisterForm.js'],
              }
      });
    break;

    default:
      done( null, { moduleName: 'bd', result: {} }  );
    break;
  }
}


// Simply activate path to client files
hooks.clientPaths = function( done ){
  done( null, { moduleName: 'bd', result: [ path.join(__dirname, '../client') ] } );
}


hooks.stores = function( done ){
  done( null, {
    newStore             : { target: '/call/:workspaceIdCall/newStore/',        idProperty: '_id', sortParam: 'sortBy', },
    accessConfig         : { target: '/call/:workspaceIdCall/accessConfig/',    idProperty: '_id', sortParam: 'sortBy', },
    workspaceConfig      : { target: '/call/:workspaceIdCall/workspaceConfig/', idProperty: '_id', sortParam: 'sortBy', },
    userConfig           : { target: '/call/:workspaceIdCall/userConfig/',      idProperty: '_id', sortParam: 'sortBy', },
    userConfigNoWorkspace: { target: '/call/userConfigNoWorkspace/',            idProperty: '_id', sortParam: 'sortBy', },
    options              : { target: '/call/:workspaceIdCall/Options/',         idProperty: '_id', sortParam: 'sortBy', },
  });
}


hooks.sharedFunctions = function( done ) {
  var result = {};
  done( null, { moduleName: 'bd', result: result } );
}




