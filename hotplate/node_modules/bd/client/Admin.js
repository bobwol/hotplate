
define([
  "dojo/_base/declare",
  "dojo/_base/json",
  "dojo/store/Observable",
  "dojo/topic",
  "dojo/on",
  "dojo/dom",
  "dojo/dom-class",
  "dojo/when",

  "dijit/_WidgetBase",
  "dijit/_TemplatedMixin",
  "dijit/_WidgetsInTemplateMixin",
  "dijit/form/Form",
  'dijit/layout/TabContainer',
  'dijit/layout/ContentPane',
  "dijit/Destroyable",

  'dgrid/OnDemandGrid',
  'dgrid/OnDemandList',
  'dgrid/Keyboard',
  'dgrid/Selection',
  'dgrid/_StoreMixin',

  "hotplate/hotDojoSubmit/defaultSubmit",
  "hotplate/hotDojoLogger/logger",
  "hotplate/hotDojoStores/stores",

  "hotplate/hotDojoWidgets/AlertBar",
  "hotplate/hotDojoWidgets/_OverlayMixin",
  "hotplate/hotDojoWidgets/BusyButton",


   ], function(
     declare
     , json
     , Observable
     , topic
     , on
     , dom
     , domClass
     , when

     , _WidgetBase
     , _TemplatedMixin
     , _WidgetsInTemplateMixin
     , Form
     , TabContainer
     , ContentPane
     , Destroyable

     , OnDemandGrid
     , OnDemandList
     , Keyboard
     , Selection
     , _StoreMixin

     , ds
     , Logger
     , stores

     , AlertBar
     , _OverlayMixin
     , BusyButton

 ){


  var AdminTabContainer = declare('hotplate/bd/AdminTabContainer', [ ContentPane, _TemplatedMixin, _WidgetsInTemplateMixin ], {

    widgetsInTemplate: true,

    templateString: '' +
      '<div class="adminSection" >' +
      '  <div data-dojo-attach-point="widget" data-dojo-type="dijit/layout/ContentPane">' +
      '    <div data-dojo-type="dijit/layout/TabContainer" data-dojo-props="tabPosition: \'top\'" data-dojo-attach-point="settingsTab">' +
      '      <div data-dojo-type="hotplate/bd/AdminWorkspaceSettings" data-dojo-props="title:\'General\'"></div>' + 
      '      <div data-dojo-type="hotplate/bd/AdminLogs" data-dojo-attach-point="logs" data-dojo-props="title: \'Logs\'"></div>' +
      '    </div>' +
      '  </div>' +
      '</div>',
  });



  declare('hotplate/bd/AdminLogs', [ContentPane, _TemplatedMixin, _WidgetsInTemplateMixin ], {

    widgetsInTemplate: true,

    templateString: '' +
      '<div>' +
      '  <div data-dojo-type="hotplate.hotDojoWidgets.AlertBar" data-dojo-attach-point="alertBar"></div>' +
      '  <div id="grid"></div>' + 
      '</div>',

    postCreate: function(){
      this.inherited(arguments);
      var that = this;
    }, // postCreate


    onShow: function(){
      this.inherited(arguments);
      console.log("Shown!");
    },



    startup: function(){

      this.inherited(arguments);

      var customGrid = declare( [OnDemandGrid, Keyboard, Selection, _OverlayMixin ]);    

      var grid = new customGrid({
        columns: {
          loggedOn: "Logged On",
          data: "Data",
          errorName: 'Error name',
          logLevel: "Log level",
          message: "Message",
          _id: "ID",
        },
        // selectionMode: "extended",
        cellNavigation: true,
        store: stores('logs:data', { workspaceIdCall: vars['hotDojoAppContainer']['workspaceId'] } ) ,
        query: {} , //  data: 'pp' },
        // query: {errorName: 'Refe', logLevel: 0 },
        sort: [
          { attribute: 'logLevel', descending: true },
          { attribute: 'data', descending: true },
        ],

      }, "grid");

      grid.refresh();

      grid.on('dgrid-error', function(event){
        topic.publish( 'globalAlert', 'Dgrid error: ' + event.error.message, 5000 );
        grid.set('overlayed', true);
        grid.set('overlayClickable', true);
        console.log("HERE TRYING TO MAKE AN OVERLAY");

      });

      grid.onOverlayClick = function(event){
        grid.refresh();
        grid.set('overlayed', false );
      };

    },

      
  });


  declare('hotplate/bd/AdminWorkspaceSettings', [ ContentPane, _TemplatedMixin, _WidgetsInTemplateMixin, _OverlayMixin ], {

    templateString: '' +
      '<div>' +
      '  <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST"> ' +
      '    <div data-dojo-type="hotplate.hotDojoWidgets.AlertBar" data-dojo-attach-point="alertBarWidget"></div>' +
      '    <div class="box"><p class="boxTitle">Workspace information</p>' +
      '      <div class="inputField" style="display:inline-block; margin-right:30px">' +
      '        <label for="${id}_WorkspaceLongName">Workspace name</label>' +
      '        <input id="${id}_WorkspaceLongName" data-dojo-type="dijit/form/ValidationTextBox" style="width:10em;" maxlength="25" name="longName" data-dojo-props="" />' + 
      '      </div>' +
      '      <div class="inputField" style="display:inline-block;">' +
      '        <label for="${id}_WorkspaceTag">Workspace\'s tag line</label>' +
      '        <input id="${id}_WorkspaceTag" data-dojo-type="dijit/form/ValidationTextBox" style="width:40em" maxlength="250" name="tag" data-dojo-props="" />' +
      '      </div>' +
      '    </div>' +
      '    <input class="formSubmit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Update" />' +
      '  </form>' +
      '</div>',


    // Current record data (id, version)
    recordId: null,
    recordVersion: null,

    // The store for records
    recordStore: null,


    postCreate: function(){
      this.inherited(arguments);

      var that = this;

      // Sets the record store for the widget
      this.recordStore = stores('workspaceSettings', { workspaceIdCall: vars['hotDojoAppContainer']['workspaceId'] } );

      // When the form's overlay is clicked, try and show the form again
      on(this, 'overlayClick', function(e){
        this.onShow();
      });

 
      // Submit form, trying to save values
      this.formWidget.onSubmit = ds.defaultSubmit(this.formWidget, this.buttonWidget, function(){

        // Set the values about to be saved
        var formValues = that.formWidget.get('value');
        formValues._id = that.recordId;
        formValues.__v = that.recordVersion;

        formValues._id = 'self';            // Actually, it's just "self"...
        delete formValues._recordVersion;   // Actually, this is less than needed

        // Try to save the values
        when( that.recordStore.put( formValues )) .then(
          ds.UIMsg('ok', that.formWidget, that.buttonWidget, that.alertBarWidget ),
          ds.UIMsg('error', that.formWidget, that.buttonWidget, that.alertBarWidget )
        ).then( function( res ) {
           // ...
        });

      }); // this.formWidget.onSubmit
    }, // postCreate()


    onShow: function(){

      var that = this;

      // By default, this widget is overlayed
      this.set( 'overlayed', true );
      this.set( 'overlayClickable', false );

      when( this.recordStore.noCache.get('self')).then(
        ds.UIMsg( 'ok' ),
        ds.UIMsg( 'error' )
      ).then(
        function(res){

          // Save the id for later -- needed during saving
          that.recordId = res.data._id;
          that.recordVersion = res.data.__v;

          // OK things worked out: the overlay can go, values are assigned to form
          that.set( 'overlayed', false );
          that.formWidget.set( 'value', res.data ); // Thanks Karl Tiedt :D

        },
        function(err){
          that.set('overlayClickable', true );
        }
      );

    },



  }); // declare('hotplate/bd/SettingsGeneral'



 return AdminTabContainer;
});



