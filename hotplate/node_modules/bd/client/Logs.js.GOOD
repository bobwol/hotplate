
define([
  "dojo/_base/declare",
  "dojo/_base/json",
  "dojo/store/Observable",
  "dojo/topic",
  "dojo/on",

  "dijit/_WidgetBase",
  "dijit/_TemplatedMixin",
  "dijit/_WidgetsInTemplateMixin",
  "dijit/form/Form",
  "dijit/layout/ContentPane",

  'dgrid/OnDemandGrid',
  'dgrid/OnDemandList',
  'dgrid/Keyboard',
  'dgrid/Selection',
  'dgrid/_StoreMixin',

  "hotplate/hotDojoSubmit/defaultSubmit",
  "hotplate/hotDojoLogger/logger",
  "hotplate/hotDojoStores/stores",

  "hotplate/hotDojoWidgets/AlertBar",
  "hotplate/hotDojoWidgets/BusyButton",
  "hotplate/hotDojoAuth/ValidationWorkspace",
  "hotplate/hotDojoAuth/ValidationUsername",

   ], function(
     declare
     , json
     , Observable
     , topic
     , on

     , _WidgetBase
     , _TemplatedMixin
     , _WidgetsInTemplateMixin
     , Form
     , ContentPane

     , OnDemandGrid
     , OnDemandList
     , Keyboard
     , Selection
     , _StoreMixin

     , ds
     , Logger
     , stores

     , AlertBar
     , BusyButton
     , ValidationWorkspace
     , ValidationUsername
 ){



    // Create the "login" pane, based on a normal ContentPane
    return declare('hotplate.bd.Logs', [ContentPane, _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin ], {


      widgetsInTemplate: true,

      templateString: '' +
        '<div>' +
        '  <div data-dojo-type="hotplate.hotDojoWidgets.AlertBar" data-dojo-attach-point="alertBar"></div>' +
        '  <div id="grid"></div>' + 
        '  <form data-dojo-type="dijit.form.Form" data-dojo-attach-point="form" method="POST"> ' +
        '    <input id="${id}_user" data-dojo-type="hotplate.hotDojoAuth.ValidationUsername" name="login" data-dojo-props="ajaxInvalidMessage:\'User not found!\'" />' +
        '    <input type="submit" data-dojo-attach-point="button" data-dojo-type="hotplate.hotDojoWidgets.BusyButton" label="Create!" />' +
        '  </form>' +
        '</div>',


      startup: function(){


    var customGrid = declare( [OnDemandGrid, Keyboard, Selection ]);    

    var grid = new customGrid({
        columns: {
            loggedOn: "Logged On",
            data: "Data",
            errorName: 'Error name',
            logLevel: "Log level",
            message: "Message",
            _id: "ID",
        },
        // selectionMode: "extended",
        cellNavigation: true,
        store: stores('logs:data', { workspaceIdCall: vars['hotDojoAppContainer']['workspaceId'] } ) ,
        query: {} , //  data: 'pp' },
        // query: {errorName: 'Refe', logLevel: 0 },
        sort: [
          { attribute: 'logLevel', descending: true },
          { attribute: 'data', descending: true },
        ],

    }, "grid");


    grid.refresh();
    GRID = grid;
    ON = on;

    grid.on('click', function(event){
      GRID = grid;
      console.log(event);
       grid._processScroll();
       console.log(grid);
    });     


    grid.on('dgrid-error', function(event){
      topic.publish( 'globalAlert', 'Dgrid error: ' + event.error.message, 5000 );
      console.log(event.error);
      var retry = setTimeout( function(){
        console.log("Refrehing...");   
        grid.refresh();
      } , 3000);
    });



      },

      postCreate: function(){
        var that = this;

        
        // SUbmit form
        this.form.onSubmit = ds.defaultSubmit(this.form, this.button, function(){

          var users = stores('users', { workspaceIdCall: vars['hotDojoAppContainer']['workspaceId'] } );
          users.query({} ).then(
            ds.UIMsg('ok', that.form, that.button, that.alertBar ),
            ds.UIMsg('error', that.form, that.button, that.alertBar )
          ).then(
            function(res){
              console.log("Returned: ");
              console.log(res);
            },
            function(err){
              console.log("Error:");
              console.log(err);
            }
          );




          // Store the data 
          data = that.form.getValues();

          // YOU ARE HERE: Strange, once it fails from the server side, validation stops working for scope
          // problems

          /*

          // Try saving it...
          stores('workspacesUser').put(data).then(
            ds.UIMsg('ok', that.form, that.button, that.alertBar ),
            ds.UIMsg('error', that.form, that.button, that.alertBar )
          ).then(
            // This is the only spot where things _actually_ went OK... So the callback will get called
            function(res){
              Logger("Jsonrest put(data) returned OK: " + json.toJson(res) );
              that.button.cancel();
            }
          ); // stores('workspacesAnon').put(data).then
          
          */

        }); // this.form.onSubmit


      }, // postCreate


   });

});


