define([
  "dojo/_base/declare",
  "dojo/_base/json",
  "dojo/store/Observable",
  "dojo/topic",
  "dojo/on",

  "dijit/_WidgetBase",
  "dijit/_Widget",
  "dijit/_TemplatedMixin",
  "dijit/_WidgetsInTemplateMixin",
  "dijit/form/Form",
  "dijit/layout/ContentPane",

  'dgrid/OnDemandGrid',
  'dgrid/OnDemandList',
  'dgrid/Keyboard',
  'dgrid/Selection',
  'dgrid/_StoreMixin',

  "hotplate/hotDojoSubmit/defaultSubmit",
  "hotplate/hotDojoLogger/logger",
  "hotplate/hotDojoStores/stores",

  "hotplate/hotDojoWidgets/AlertBar",
  "hotplate/hotDojoWidgets/BusyButton",
  "hotplate/hotDojoWidgets/_OverlayMixin",
  "hotplate/hotDojoAuth/ValidationWorkspace",
  "hotplate/hotDojoAuth/ValidationUsername",

   ], function(
     declare
     , json
     , Observable
     , topic
     , on

     , _WidgetBase
     , _Widget
     , _TemplatedMixin
     , _WidgetsInTemplateMixin
     , Form
     , ContentPane

     , OnDemandGrid
     , OnDemandList
     , Keyboard
     , Selection
     , _StoreMixin

     , ds
     , Logger
     , stores

     , AlertBar
     , BusyButton
     , _OverlayMixin
     , ValidationWorkspace
     , ValidationUsername
 ){



    // Create the "login" pane, based on a normal ContentPane
    return declare('hotplate.bd.Logs', [ContentPane, _TemplatedMixin, _WidgetsInTemplateMixin ], {


      widgetsInTemplate: true,

      templateString: '' +
        '<div>' +
        '  <div data-dojo-type="hotplate.hotDojoWidgets.AlertBar" data-dojo-attach-point="alertBar"></div>' +
        '  <div id="grid"></div>' + 
        '</div>',


      onShow: function(){
        this.inherited(arguments);
        console.log("Shown!");

      },

      startup: function(){

        this.inherited(arguments);

        var customGrid = declare( [OnDemandGrid, Keyboard, Selection, _OverlayMixin ]);    

        var grid = new customGrid({
          columns: {
            loggedOn: "Logged On",
            data: "Data",
            errorName: 'Error name',
            logLevel: "Log level",
            message: "Message",
            _id: "ID",
          },
          // selectionMode: "extended",
          cellNavigation: true,
          store: stores('logs:data', { workspaceIdCall: vars['hotDojoAppContainer']['workspaceId'] } ) ,
          query: {} , //  data: 'pp' },
          // query: {errorName: 'Refe', logLevel: 0 },
          sort: [
            { attribute: 'logLevel', descending: true },
            { attribute: 'data', descending: true },
          ],

        }, "grid");

        grid.refresh();

        grid.on('dgrid-error', function(event){
          topic.publish( 'globalAlert', 'Dgrid error: ' + event.error.message, 5000 );
          grid.set('overlayed', true);
          grid.set('overlayClickable', true);
          console.log("HERE TRYING TO MAKE AN OVERLAY");

        });

        grid.onOverlayClick = function(event){
          grid.refresh();
          grid.set('overlayed', false );
        };

      },

      postCreate: function(){

        this.inherited(arguments);

        var that = this;
        
      }, // postCreate


   });

});


