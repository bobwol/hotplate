
define([
  "dojo/_base/declare",
  "dojo/_base/json",
  "dojo/store/Observable",
  "dojo/topic",
  "dojo/on",
  "dojo/dom",
  "dojo/dom-class",
  "dojo/when",

  "dijit/_WidgetBase",
  "dijit/_TemplatedMixin",
  "dijit/_WidgetsInTemplateMixin",
  "dijit/form/Form",
  'dijit/layout/TabContainer',
  'dijit/layout/ContentPane',
  "dijit/Destroyable",

  'dgrid/OnDemandGrid',
  'dgrid/OnDemandList',
  'dgrid/Keyboard',
  'dgrid/Selection',
  'dgrid/_StoreMixin',

  "hotplate/hotDojoSubmit/defaultSubmit",
  "hotplate/hotDojoLogger/logger",
  "hotplate/hotDojoStores/stores",

  "hotplate/hotDojoWidgets/AlertBar",
  "hotplate/hotDojoWidgets/_OverlayMixin",
  "hotplate/hotDojoWidgets/BusyButton",

   ], function(
     declare
     , json
     , Observable
     , topic
     , on
     , dom
     , domClass
     , when

     , _WidgetBase
     , _TemplatedMixin
     , _WidgetsInTemplateMixin
     , Form
     , TabContainer
     , ContentPane
     , Destroyable

     , OnDemandGrid
     , OnDemandList
     , Keyboard
     , Selection
     , _StoreMixin

     , ds
     , Logger
     , stores

     , AlertBar
     , _OverlayMixin
     , BusyButton
 ){


  var UserConfig = declare('hotplate/bd/UserConfig', [ ContentPane, _TemplatedMixin, _WidgetsInTemplateMixin, _OverlayMixin ], {

    widgetsInTemplate: true,

    templateString: '' +
      '<div>' +
      '  <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST"> ' +
      '    <div data-dojo-type="hotplate.hotDojoWidgets.AlertBar" data-dojo-attach-point="alertBarWidget"></div>' +

      '    <input type="hidden" data-dojo-type="dijit/form/TextBox" name="_id" />' +
      '    <input type="hidden" data-dojo-type="dijit/form/TextBox" name="__v" />' +

      '    <div class="box"><p class="boxTitle">User information</p>' +

      '      <div class="inputField" style="display:inline-block; margin-right:30px">' +
      '        <label for="${id}_Name">Your name</label>' +
      '        <input id="${id}_Name" data-dojo-type="dijit/form/ValidationTextBox" style="width:10em;" maxlength="40" name="name" data-dojo-props="" />' + 
      '      </div>' +
      '      <div class="inputField" style="display:inline-block;">' +
      '        <label for="${id}_LastName">Last Name</label>' +
      '        <input id="${id}_LastName" data-dojo-type="dijit/form/ValidationTextBox" style="width:40em" maxlength="40" name="lastName" data-dojo-props="" />' +
      '      </div>' +

    '        <div class="inputField">' +
    '          <label for="${id}_Email">Email</label>' +
    '          <input id="${id}_Email" data-dojo-type="dijit/form/ValidationTextBox" style="width:30em" maxlength="80" name="email" data-dojo-props="validatorr:sharedFunctions.hotCommonValidators.email, required:true, invalidMessage:sharedFunctions.hotCommonValidators.email(false)"/>' +
    '        </div>' +

      '    </div>' +

      '    <input class="formSubmit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Update" />' +
      '  </form>' +
      '</div>',


    // The store for records
    recordStore: null,

    // Just changed
    justChanged: false,


    postCreate: function(){
      this.inherited(arguments);

      var that = this;

      // Sets the record store for the widget
      this.recordStore = stores('userConfig', { workspaceIdCall: vars['hotDojoAppContainer']['workspaceId'] } );

      // When the form's overlay is clicked, try and show the form again
      on(this, 'overlayClick', function(e){
        this.onShow();
      });

      topic.subscribe('configChange/user', function(u, message){
        if( message && message.remote ){
          that.set( 'overlayed', true );
          that.set( 'overlayClickable', true );
        }
      });


      // this.recordStore.memCache.put({ _id: userId, name: "PPP" }); 
 
      // Submit form, trying to save values
      this.formWidget.onSubmit = ds.defaultSubmit(this.formWidget, this.buttonWidget, function(){

        // Set the values about to be saved
        var formValues = that.formWidget.get('value');

        // Try to save the values
        when( that.recordStore.put( formValues )) .then(
          ds.UIMsg( that.buttonWidget, that.alertBarWidget, "Saved!" ),
          ds.UIErrorMsg( that.formWidget, that.buttonWidget, that.alertBarWidget )
        ).then( function( res ) {
           // ...
        });

      }); // this.formWidget.onSubmit
    }, // postCreate()


    onShow: function(){

      var that = this;

      // By default, this widget is overlayed
      this.set( 'overlayed', true );
      this.set( 'overlayClickable', false );


      when( this.recordStore.get( userId )).then(
        ds.UIMsg(),
        ds.UIErrorMsg()
      ).then(
        function(res){

          // OK things worked out: the overlay can go, values are assigned to form
          that.set( 'overlayed', false );
          that.formWidget.set( 'value', res ); // Thanks Karl Tiedt :D

        },
        function(err){
          that.set('overlayClickable', true );
        }
      );

    },



  }); // declare('hotplate/bd/UserConfig'


 return UserConfig;
});


