
define([
  "dojo/_base/declare",
  "dojo/_base/json",
  "dojo/store/Observable",
  "dojo/topic",
  "dojo/on",
  "dojo/dom",
  "dojo/dom-class",
  "dojo/when",

  "dijit/_WidgetBase",
  "dijit/_TemplatedMixin",
  "dijit/_WidgetsInTemplateMixin",
  "dijit/form/Form",
  'dijit/layout/TabContainer',
  'dijit/layout/ContentPane',
  "dijit/Destroyable",

  'dgrid/OnDemandGrid',
  'dgrid/OnDemandList',
  'dgrid/Keyboard',
  'dgrid/Selection',
  'dgrid/_StoreMixin',

  "hotplate/hotDojoSubmit/defaultSubmit",
  "hotplate/hotDojoLogger/logger",
  "hotplate/hotDojoStores/stores",

  "hotplate/hotDojoWidgets/AlertBar",
  "hotplate/hotDojoWidgets/_OverlayMixin",
  "hotplate/hotDojoWidgets/BusyButton",
  "hotplate/hotDojoAuth/ValidationWorkspace",
  "hotplate/hotDojoAuth/ValidationUsername",

   ], function(
     declare
     , json
     , Observable
     , topic
     , on
     , dom
     , domClass
     , when

     , _WidgetBase
     , _TemplatedMixin
     , _WidgetsInTemplateMixin
     , Form
     , TabContainer
     , ContentPane
     , Destroyable

     , OnDemandGrid
     , OnDemandList
     , Keyboard
     , Selection
     , _StoreMixin

     , ds
     , Logger
     , stores

     , AlertBar
     , _OverlayMixin
     , BusyButton
     , ValidationWorkspace
     , ValidationUsername
 ){


  var SettingsTabContainer = declare('hotplate/bd/Settings', [ ContentPane, _TemplatedMixin, _WidgetsInTemplateMixin ], {

    widgetsInTemplate: true,

    templateString: '' +
      '<div class="settingsSection" >' +
      '  <div data-dojo-attach-point="widget" data-dojo-type="dijit/layout/ContentPane">' +
      '    <div data-dojo-type="dijit/layout/TabContainer" data-dojo-props="tabPosition: \'top\'" data-dojo-attach-point="settingsTab">' +
      '      <div data-dojo-type="hotplate/bd/SettingsGeneral" data-dojo-props="title:\'General\'"></div>' + 
      '      <div data-dojo-type="dijit/layout/ContentPane" data-dojo-props="title:\'Notifications\'"></div>' + 
      '    </div>' +
      '  </div>' +
      '</div>',
  });


  var SettingsGeneral = declare('hotplate/bd/SettingsGeneral', [ ContentPane, _TemplatedMixin, _WidgetsInTemplateMixin, _OverlayMixin ], {

   templateString: '' +
     '<div>' +
     '  <form data-dojo-type="dijit/form/Form" data-dojo-attach-point="formWidget" method="POST"> ' +
     '    <div data-dojo-type="hotplate.hotDojoWidgets.AlertBar" data-dojo-attach-point="alertBarWidget"></div>' +
     '    <input id="${id}_WorkspaceLongName" data-dojo-type="dijit/form/ValidationTextBox" name="longName" data-dojo-props="" />' +
     '    <input id="${id}_WorkspaceTag" data-dojo-type="dijit/form/ValidationTextBox" name="tag" data-dojo-props="" />' +
     '    <input class="formSubmit" type="submit" data-dojo-attach-point="buttonWidget" data-dojo-type="hotplate/hotDojoWidgets/BusyButton" label="Create!" />' +
     '  </form>' +
     '</div>',


    // Current record data (id, version)
    recordId: null,
    recordVersion: null,

    // The store for records
    recordStore: null,

    onShow: function(){

      var that = this;

      // By default, this widget is overlayed
      this.set( 'overlayed', true );
      this.set( 'overlayClickable', false );

      when( this.recordStore.noCache.get('self')).then(
        ds.UIMsg( 'ok' ),
        ds.UIMsg( 'error' )
      ).then(
        function(res){

          // Save the id for later -- needed during saving
          that.recordId = res._id;
          that.recordVersion = res.__v;

          // OK things worked out: the overlay can go, values are assigned to form
          that.set( 'overlayed', false );
          that.formWidget.set( 'value', res.data ); // Thanks Karl Tiedt :D

        },
        function(err){
          that.set('overlayClickable', true );
        }
      );

    },


    postCreate: function(){
      this.inherited(arguments);

      that = this;

      // Sets the record store for the widget
      this.recordStore = stores('workspaceSettings', { workspaceIdCall: vars['hotDojoAppContainer']['workspaceId'] } );

      // When the form's overlay is clicked, try and show the form again
      on(this, 'overlayClick', function(e){
        this.onShow();
      });

 
      // Submit form, trying to save values
      this.formWidget.onSubmit = ds.defaultSubmit(this.formWidget, this.buttonWidget, function(){

         // Set the values about to be saved
         var formValues = that.formWidget.get('value');
         formValues._id = that.recordId;
         formValues.__v = that.recordVersion;

         // Try to save the values
         when( that.recordStore.put( formValues )) .then(
           ds.UIMsg('ok', that.formWidget, that.buttonWidget, that.alertBarWidget ),
           ds.UIMsg('error', that.formWidget, that.buttonWidget, that.alertBarWidget )
         ).then( function( res ) {
           console.log("All good!");
           that.buttonWidget.cancel();
         });

      }); // this.formWidget.onSubmit
    } // postCreate()



  });

 return SettingsTabContainer;

});




//
          // Use this code in case the form becomes more complex and
          // it's not a matter of key/value anymore
          // that.form._descendants.forEach(function( widget ) {
          //  if( typeof( res.data[ widget.name ] ) !== 'undefined'){
          //    widget.set('value', res.data[ widget.name] );
          //  } 
          // });

//    onOverlayClick: function(){
//    },
