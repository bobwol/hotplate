
define([
  "dojo/_base/declare",
  "dojo/_base/json",
  "dojo/store/Observable",
  "dojo/topic",
  "dojo/on",
  "dojo/dom",
  "dojo/dom-class",

  "dijit/_WidgetBase",
  "dijit/_TemplatedMixin",
  "dijit/_WidgetsInTemplateMixin",
  "dijit/form/Form",
  'dijit/layout/TabContainer',
  'dijit/layout/ContentPane',

  'dgrid/OnDemandGrid',
  'dgrid/OnDemandList',
  'dgrid/Keyboard',
  'dgrid/Selection',
  'dgrid/_StoreMixin',

  "hotplate/hotDojoSubmit/defaultSubmit",
  "hotplate/hotDojoLogger/logger",
  "hotplate/hotDojoStores/stores",

  "hotplate/hotDojoWidgets/AlertBar",
  "hotplate/hotDojoWidgets/_OverlayMixin",
  "hotplate/hotDojoWidgets/BusyButton",
  "hotplate/hotDojoAuth/ValidationWorkspace",
  "hotplate/hotDojoAuth/ValidationUsername",

   ], function(
     declare
     , json
     , Observable
     , topic
     , on
     , dom
     , domClass

     , _WidgetBase
     , _TemplatedMixin
     , _WidgetsInTemplateMixin
     , Form
     , TabContainer
     , ContentPane

     , OnDemandGrid
     , OnDemandList
     , Keyboard
     , Selection
     , _StoreMixin

     , ds
     , Logger
     , stores

     , AlertBar
     , _OverlayMixin
     , BusyButton
     , ValidationWorkspace
     , ValidationUsername
 ){


  var SettingsTabContainer = declare('hotplate.bd.Settings', [ ContentPane, _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin ], {

    widgetsInTemplate: true,

    templateString: '' +
      '<div class="settingsSection" >' +
      '  <div data-dojo-attach-point="widget" data-dojo-type="dijit.layout.ContentPane">' +
      '    <div data-dojo-type="dijit.layout.TabContainer" data-dojo-props="tabPosition: \'top\'" data-dojo-attach-point="settingsTab">' +
      '      <div data-dojo-type="hotplate.bd.SettingsGeneral" data-dojo-props="title:\'General\'"></div>' + 
      '      <div data-dojo-type="dijit.layout.ContentPane" data-dojo-props="title:\'Notifications\'"></div>' + 
      '    </div>' +
      '  </div>' +
      '</div>',
  });

 

  var SettingsGeneral = declare('hotplate.bd.SettingsGeneral', [ ContentPane, _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, _OverlayMixin ], {

   templateString: '' +
     '<div>' +
     // '  <div data-dojo-attach-point="overlayNode" data-dojo-attach-event="onclick: _init" class="overlay"></div>' +
     '  <form data-dojo-type="dijit.form.Form" data-dojo-attach-point="form" method="POST"> ' +
     '    <input id="${id}_WorkspaceLongName" data-dojo-type="dijit/form/ValidationTextBox" name="longName" data-dojo-props="" />' +
     '    <input id="${id}_WorkspaceTag" data-dojo-type="dijit/form/ValidationTextBox" name="tag" data-dojo-props="" />' +
     '    <input class="formSubmit" type="submit" data-dojo-attach-point="button" data-dojo-type="hotplate.hotDojoWidgets.BusyButton" label="Create!" />' +
     '  </form>' +
     '</div>',


    onOverlayClick: function(){
      this.onShow();
    },

    onShow: function(){
      console.log("Init called!");

      var that = this;

      // By default, this widget is overlayed
      this.set( 'overlayed', true );
      this.set( 'overlayClickable', false );

      var workspaceSettings = stores('workspaceSettings', { workspaceIdCall: vars['hotDojoAppContainer']['workspaceId'] } );

      workspaceSettings.get('').then(
        ds.UIMsg('ok' ),
        ds.UIMsg('error' )
      ).then(
        function(res){

          // OK things worked out: the overlay can go
          that.set( 'overlayed', false );

          // Assign all of the received values to matching fields
          // TODO: Turn this into a function
          that.form._descendants.forEach(function( widget ) {
            console.log(widget);
            if( typeof( res.data[ widget.name ] ) !== 'undefined'){
              widget.set('value', res.data[ widget.name] );
            } 
          });
        },
        function(err){
          that.set('overlayClickable', true );
        }
      );

    },


    postCreate:function(){
      this.inherited(arguments);
 
      // Submit form
      this.form.onSubmit = ds.defaultSubmit(this.form, this.button, function(){
         console.log("PRESSED!");
         that.button.cancel();

        console.log(workspaceSettings);


        /*
        users.query({} ).then(
          ds.UIMsg('ok', that.form, that.button, that.alertBar ),
          ds.UIMsg('error', that.form, that.button, that.alertBar )
        ).then(
          function(res){
            console.log("Returned: ");
            console.log(res);
          },
        );
        */

      });
    }
  });

 return SettingsTabContainer;


  function ensure( widget, callback ){


    var ensure_done = function(res){
      console.log("Ensure_done is: " + res );
      console.log(res);

      if( res instanceof(Error) ){
      
        // var overlay = dom.byId(
      }

    }

    callback( ensure_done );

  }
  

});


