
define([
  "dojo/_base/declare",
  "dojo/_base/json",
  "dojo/store/Observable",
  "dojo/topic",
  "dojo/on",

  "dijit/_WidgetBase",
  "dijit/_TemplatedMixin",
  "dijit/_WidgetsInTemplateMixin",
  "dijit/form/Form",
  'dijit/layout/TabContainer',
  'dijit/layout/ContentPane',

  'dgrid/OnDemandGrid',
  'dgrid/OnDemandList',
  'dgrid/Keyboard',
  'dgrid/Selection',
  'dgrid/_StoreMixin',

  "hotplate/hotDojoSubmit/defaultSubmit",
  "hotplate/hotDojoLogger/logger",
  "hotplate/hotDojoStores/stores",

  "hotplate/hotDojoWidgets/AlertBar",
  "hotplate/hotDojoWidgets/BusyButton",
  "hotplate/hotDojoAuth/ValidationWorkspace",
  "hotplate/hotDojoAuth/ValidationUsername",

   ], function(
     declare
     , json
     , Observable
     , topic
     , on

     , _WidgetBase
     , _TemplatedMixin
     , _WidgetsInTemplateMixin
     , Form
     , TabContainer
     , ContentPane

     , OnDemandGrid
     , OnDemandList
     , Keyboard
     , Selection
     , _StoreMixin

     , ds
     , Logger
     , stores

     , AlertBar
     , BusyButton
     , ValidationWorkspace
     , ValidationUsername
 ){



    // Create the "login" pane, based on a normal ContentPane
    return declare('hotplate.bd.Settings', [_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin ], {


      widgetsInTemplate: true,

      templateString: '' +
        '<div class="settingsSection" >' +
        '  <div data-dojo-attach-point="widget" data-dojo-type="dijit.layout.ContentPane" style="height:100%">' +
        '    <div style="height:100%" data-dojo-type="dijit.layout.TabContainer" data-dojo-props="tabPosition: \'top\'" data-dojo-attach-point="settingsTab">' +
        '      <div data-dojo-type="dijit.layout.ContentPane" data-dojo-props="title:\'One\'"><p>ONE</p></div>' + 
        '      <div data-dojo-type="dijit.layout.ContentPane" data-dojo-props="title:\'Two\'"><p>TWO</p></div>' + 
        '    </div>' +
        '  </div>' +
        '</div>',


       resize: function(){
         T = this;
         this.inherited(arguments);
         console.log("Resize!");
         this.widget.resize();
         // this.settingsTab.resize();
       }

   });

});


