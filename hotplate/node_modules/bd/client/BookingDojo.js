define([
   "dojo/_base/declare",
   "dojo/when",
   "dojo/store/Observable",
   "dojo/topic",
   "dojo/on",

   "dijit/_WidgetBase",
   "dijit/_TemplatedMixin",
   "dijit/_WidgetsInTemplateMixin",
   "dijit/Destroyable",
   "dijit/Dialog",
   "dijit/_OnDijitClickMixin",

   "dijit/layout/BorderContainer",
   "dijit/layout/StackContainer",
   "dijit/layout/TabContainer",
   "dijit/layout/ContentPane",

   "hotplate/hotDojoAuth/LogoutButton",
   "hotplate/hotDojoHooks/_TemplatedHooksMixin",
   "hotplate/hotDojoStores/stores",
   "hotplate/hotDojoWidgets/_OverlayMixin",
   "hotplate/hotMessages/messages",

   "hotplate/bd/AccessConfig",
   "hotplate/bd/AdminConfig",
   "hotplate/bd/UserConfig",

   "hotplate/bd/AppConfigVars",
   "hotplate/bd/AppStoreNotify",

   // "app/widgets/SearchPage",

   ], function(
     declare
     , when
     , Observable
     , topic
     , on

     , _WidgetBase
     , _TemplatedMixin
     , _WidgetsInTemplateMixin
     , Destroyable
     , Dialog
     , _OnDijitClickMixin

     , BorderContainer
     , StackContainer
     , TabContainer
     , ContentPane

     , LogoutButton
     , _TemplatedHooksMixin
     , stores
     , _OverlayMixin
     , messages

     , AccessConfig
     , AdminConfig
     , UserConfig

     , AppConfigVars
     , AppStoreNotify

 ){
    var counter = 0;

    // Create the "login" pane, based on a normal ContentPane
    return declare( [_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, _TemplatedHooksMixin, Destroyable, _OverlayMixin, _OnDijitClickMixin ], {

      workspaceName: vars.hotDojoAppContainer.workspaceName,

      widgetsInTemplate: true,

      templateString: '' +
        '<div>' +
        // '  <div id="TEMPORARY"></div>' +
        '  <div class="bookingDojo" data-dojo-type="dijit/layout/BorderContainer" data-dojo-props="gutters:false, design: \'headline\'">' +
        '    <div class="appHeader" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="gutters:false, region: \'top\'">' +
        '       <span>Booking Dojo</span> <span data-dojo-attach-event="onclick:gooo2">B</span> <span data-dojo-attach-point="userName" style="cursor:pointer" data-dojo-attach-event="ondijitclick:showUserConfig"></span> <div class="logoutButton" data-dojo-type="hotplate/hotDojoAuth/LogoutButton" data-dojo-props="workspaceName: \'${workspaceName}\'"></div>' +
        '    </div>' +

        '    <div data-dojo-attach-point="mainTabContainer" data-dojo-type="dijit/layout/TabContainer" data-dojo-props="region: \'center\', tabPosition: \'left-h\'">' +
        '      <div data-dojo-attach-point="dashboard" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="title:\'Dashboard\'"></div>' +
        '      <div data-dojo-attach-point="inbox" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="title: \'Inbox\'"></div>' +
        '      <div data-dojo-attach-point="search" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="title:\'Search\'"></div>' +
        '      <div data-dojo-attach-point="calendar" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="title:\'Calendar\'"></div>' +
        '      <div data-dojo-attach-point="contacts" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="title:\'Contacts\'"></div>' +
        '      <div data-dojo-attach-point="accessConfig" data-dojo-type="hotplate/bd/AccessConfig" data-dojo-props="title: \'Your Config\'"></div>' +
        '      <div data-dojo-attach-point="adminConfig" data-dojo-type="hotplate/bd/AdminConfig" data-dojo-props="title: \'Admin\'"></div>' +

        '    </div>'+

        '  </div>' +
        '</div>',

        gooo2:function(e){
          messages.sync(); 
          //w.emit('success');
        },

       
        showUserConfig: function(){
          this.userDialog.show();
        },

 
        postCreate:function(){
          var that = this, q;

          this.inherited(arguments);

         
          // GLOBAL VARIABLES ON PURPOSE (CALL IT CONVENIENCE)
          workspaceId = vars['hotDojoAppContainer']['workspaceId'];
          userId = vars['hotDojoAppContainer']['userId'];

          // Make sure registerForMessages() is successful with overlay
          // (User will click on overlay to retry)
          this.set( 'overlayed', true );
          this.set( 'overlayClickable', false );
          registerForMessages();
          //
          this.on( 'overlayClick', function( e ){
            registerForMessages();
          });
          //
          function registerForMessages(){
            messages.register( workspaceId ).then(
              function( res ){
                that.set( 'overlayed', false );
              },
              function( err ){
                that.set( 'overlayClickable', true );
              }
            );
          };
          window.onbeforeunload = function( e ) {
            messages.unregister();
          }


          var escapeHTML = function( str ) {
            var div  = document.createElement( 'div' );
            var text = document.createTextNode( str );
            div.appendChild( text );
            return div.innerHTML;
          };

          // Place the user's name in the username span, and subscribe to
          // possible changes
          that.userName.innerHTML = escapeHTML( AppConfigVars.userConfig.name );
          topic.subscribe( 'configChange/user', function( u ){
            that.userName.innerHTML = escapeHTML( AppConfigVars.userConfig.name );
          });     

          // The user dialog
          this.userDialog = new Dialog( {
            title: "Your account",
          });
          this.userDialog.addChild( new UserConfig );
  




         
        },

        startup: function(){
          this.inherited(arguments);


          /*
          console.log(this);
          console.log(this.parentNode);
          W = declare( [_WidgetBase, _TemplatedMixin], {
            templateString: '<div><p>This really is a simple widget</p></div>',
            postcreate:function(){
              this.inherited(arguments);
            },
            //onsuccess:function(){
            //  console.log('method onsuccess called!');
            //}
            
            
          });
          w = new W({}, 'TEMPORARY' );
          w.on('success', function(){
            console.log("Listener for 'success' called!");
          });
          w.startup();
          */         

        },

   });

});

