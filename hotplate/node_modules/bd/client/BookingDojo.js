define([
   "dojo/_base/declare",
   "dojo/when",
   "dojo/store/Observable",
   "dojo/topic",

   "dijit/_WidgetBase",
   "dijit/_TemplatedMixin",
   "dijit/_WidgetsInTemplateMixin",
   "dijit/Destroyable",

   "dijit/layout/BorderContainer",
   "dijit/layout/StackContainer",
   "dijit/layout/TabContainer",
   "dijit/layout/ContentPane",

   "hotplate/hotDojoAuth/LogoutButton",
   "hotplate/hotDojoHooks/_TemplatedHooksMixin",
   "hotplate/hotDojoStores/stores",
   "hotplate/hotDojoWidgets/_OverlayMixin",

   "hotplate/bd/AccessConfig",
   "hotplate/bd/AdminConfig",
   "hotplate/bd/UserConfig",

   "hotplate/bd/AppConfigVars",

   // "app/widgets/SearchPage",

   ], function(
     declare
     , when
     , Observable
     , topic

     , _WidgetBase
     , _TemplatedMixin
     , _WidgetsInTemplateMixin
     , Destroyable

     , BorderContainer
     , StackContainer
     , TabContainer
     , ContentPane

     , LogoutButton
     , _TemplatedHooksMixin
     , stores
     , _OverlayMixin

     , AccessConfig
     , AdminConfig
     , UserConfig

     , AppConfigVars

 ){
    // Create the "login" pane, based on a normal ContentPane
    return declare( [_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, _TemplatedHooksMixin, Destroyable, _OverlayMixin ], {

      workspaceName: vars.hotDojoAppContainer.workspaceName,

      widgetsInTemplate: true,

      templateString: '' +
        '<div>' +
        '  <div class="bookingDojo" data-dojo-type="dijit/layout/BorderContainer" data-dojo-props="gutters:false, design: \'headline\'">' +
        '    <div class="appHeader" stylee="padding:0; margin:0;" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="gutters:false, region: \'top\'">' +
        '       <span>Booking Dojo</span> <span data-dojo-attach-point="userName"></span> <div class="logoutButton" data-dojo-type="hotplate/hotDojoAuth/LogoutButton" data-dojo-props="workspaceName: \'${workspaceName}\'"></div>' +
        '    </div>' +

        '    <div data-dojo-attach-point="mainTabContainer" data-dojo-type="dijit/layout/TabContainer" data-dojo-props="region: \'center\', tabPosition: \'left-h\'">' +
        '      <div data-dojo-attach-point="dashboard" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="title:\'Dashboard\'"></div>' +
        '      <div data-dojo-attach-point="inbox" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="title: \'Inbox\'"></div>' +
        '      <div data-dojo-attach-point="search" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="title:\'Search\'"></div>' +
        '      <div data-dojo-attach-point="calendar" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="title:\'Calendar\'"></div>' +
        '      <div data-dojo-attach-point="contacts" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="title:\'Contacts\'"></div>' +
        '      <div data-dojo-attach-point="accessConfig" data-dojo-type="hotplate/bd/AccessConfig" data-dojo-props="title: \'Your Config\'"></div>' +
        '      <div data-dojo-attach-point="adminConfig" data-dojo-type="hotplate/bd/AdminConfig" data-dojo-props="title: \'Admin\'"></div>' +
        '      <div data-dojo-attach-point="userConfig" data-dojo-type="hotplate/bd/UserConfig" data-dojo-props="title: \'You\'"></div>' +

        '    </div>'+

        '  </div>' +
        '</div>',


        postCreate:function(){
          var that = this, q;

          this.inherited(arguments);

          // Get the user's full name
          var userConfigStore = stores('userConfig', { workspaceIdCall: vars['hotDojoAppContainer']['workspaceId'] } );
          var workspaceConfigStore = stores('workspaceConfig', { workspaceIdCall: vars['hotDojoAppContainer']['workspaceId'] } );
          var accessConfigStore = stores('accessConfig', { workspaceIdCall: vars['hotDojoAppContainer']['workspaceId'] } );


          var userConfig = userConfigStore.get('self');
          that.userName.innerHTML = userConfig.name;
          topic.subscribe('configChange/user', function(u){
            if( u.name !== 'undefined') that.userName.innerHTML = u.name;
          });     

        },

        startup: function(){
          this.inherited(arguments);
          // console.log("HERE");
          // this.set( 'overlayed', true );
          // this.set( 'overlayClickable', false );
        },

   });

});

