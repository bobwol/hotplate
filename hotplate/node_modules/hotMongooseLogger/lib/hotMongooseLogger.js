
var util = require('util')
  , fs = require('fs')
  , hotplate = require('hotplate')
  , mongoose = require('mongoose')
  , app = hotplate.app
;


// Module's variables
var logModel = {};
var schemaObject = {};


exports.hotHooks = hooks = {}

hooks.init = function( done ){

  // Get all logFields from all modules, creating schemaObject
  hotplate.invokeAll('logFields', function(err, results){
    results.forEach(function(entry){
      var result = entry.result;
      for(var k in result){
        schemaObject[k] = result[k];
      }
    })
  });

  // Create logModel based on schemaObject
  logModel = mongoose.model('Log' , new mongoose.Schema( schemaObject ) ); 
  done( null );
}
hooks.init.invokes = [ 'logFields' ];

hooks.run = function( done ){

  // JSON get
  app.get( '/call/:workspaceIdCall/logs', logs );
  app.get(      '/api/1/:tokenCall/logs', logs );

  done( null );

}

hooks.log = function( done, entry){

  // Create the model
  var log = new logModel();

  // Cycle through the data to be logged...
  for(var k in entry){

    // If it's set to be serialised, to so.
    if( schemaObject[k] && schemaObject[k].serialize  ){
      entry[k] = JSON.stringify(entry[k]);
    }

    // Assign it.
    log[k] = entry[k];
  }

  // Save the record.
  log.save();

  done( null );

}


hooks.stores = function( done ){
  done( null, {
    logs: { target: '/call/:workspaceIdCall/logs', idProperty: '_id', sortParam: 'sortBy', },
  } );

}


function logs( req, res, next ){
  
  var sendResponse = hotplate.getModule('hotProtocol').sendResponse;
  var e = hotplate.getModule('hotError').errors;


  console.log(req.headers['range'] );
  var tokens;
  
  if( tokens = req.headers['range'].match(/items=([0-9]+)\-([0-9]+)$/) ){
    var rangeFrom = tokens[1];
    var rangeTo = tokens[2];
    console.log(rangeFrom);
    console.log(rangeTo);
  }


  // TODO: Add filtering and ordering, make functions about them (good luck with that), enjoy



  // Looks for a workspace. If it's there, answers without errors. If not,
  // answers with a very short error
  Workspace = mongoose.model('Log');
  Workspace.find({}).skip(rangeFrom).limit(rangeTo - rangeFrom ).exec(function(err, doc){
    if(err ){
      next(new e.RuntimeError( err ) );
    } else {
      Workspace.count({}, function(err, total){
        res.setHeader('Content-Range', 'items ' + rangeFrom + '-' + rangeTo + '/' + total );
        sendResponse( res, { data: doc  } );
      });
    }
  });
}
