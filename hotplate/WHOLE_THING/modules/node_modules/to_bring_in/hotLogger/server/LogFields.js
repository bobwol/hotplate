
/*!
 * Module dependencies.
 */

var util = require('util')
  , path = require('path')
;

/**
 * Csses constructor.
 *
 * An object to which you can add 
 *
 * @api public
 */

function LogFields( ){
  this.logFields = {};

  // this.LogFields = LogFields;

  // Set the default log fields, which will be available no matter what
  this.add('logLevel',  { type: Number } );
  this.add('errorName', { type: String, index: true } );
  this.add('message',   { type: String, index: true } );
  this.add('reqInfo',   { type: String, index: true } );
  this.add('data',      { type: String } );
  this.add('loggedOn',  { type: Date, index: true } );


}


/**
 * The exports object is the object's constructor
 *
 * @api public
 */

module.exports = exports = LogFields;


/**
 * Add a log field
 *
 * @param {String} The store's location, e.g. `/app/users`
 * @param {Object} An object of options that will apply to that field. Meaningful
 * ones are isIndex, type
 * @api public
 */

LogFields.prototype.add = function(field, parameters ){
  parameters = parameters || {};

  var assignedParams = {};

  // IsIndex should be true or false
  assignedParams.isIndex = parameters.isIndex ? true : false;

  // The type should be a function (assumed to be an object)
  assignedParams.type = typeof( parameters.type ) == 'function' ? parameters.type : String;

  this.logFields[field] = assignedParams;
  return this;
}

LogFields.prototype.getLogFields = function(){
  return logFields;
}
