
/* TODO:
*/

/*!
 * Module dependencies.
 */

var util = require('util')
, fs = require('fs')
, path = require('path')
, Vars = require('./Vars.js')
, Csses = require('./Csses.js')
, Jses = require('./Jses.js')
, hotplate = require('hotplate')
;

/**
 * HotPage constructor.
 *
 * The exports object of the `HotPage` module is an instance of this class.
 * Most apps will only use this one instance.
 *
 * @api public
 */

function HotPage() {

  // Default options
  this.options = {};

  this.vars = new Vars(); // A set of "variables" set by clients
  this.csses = new Csses(); // A list of CSS files added by the modules
  this.jses = new Jses() ; // A list of JS files added by the modules

  this.Vars = Vars;
  this.Csses = Csses;
  this.Jses = Jses;

  // The page template
  this.pageTemplate = "<!DOCTYPE HTML>\n<html>\n<head>\/<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\/<title>[[TITLE]]</title>\n[[HEAD]]\n</head>\n<body>\n[[BODY]]\n</body>\n";
};


/**
 * Sets hotpage options
 *
 * ####Example:
 *
 *     hotpage.set('test', value) // sets the 'test' option to `value`
 *
 * @param {String} key
 * @param {String} value
 * @api public
 */
HotPage.prototype.set = function (key, value) {
  if (arguments.length == 1)
    return this.options [ key];
  this.options [ key] = value;
  return this;
};


/**
 * Gets hotpage options
 *
 * ####Example:
 *
 *     hotpage.get('test') // returns the 'test' value
 *
 * @param {String} key
 * @method get
 * @api public
 */
HotPage.prototype.get = HotPage.prototype.set;


/**
 * The exports object is an instance of HotPage.
 *
 * @api public
 */

module.exports = exports = new HotPage;
var hotPage = module.exports;


/**
 * The HotPage constructor
 *
 * The exports of the mongoose module is an instance of this class.
 *
 * ####Example:
 *
 *     var hotPage= require('hotplate');
 *     var hotPage2 = new hotpage.HotPage();
 *
 * @api public
 */

hotpage.HotPage = HotPage;


HotPage.prototype.processPageTemplate = function( elements, leavePlaceholders ) {

  elements = elements || {};

  var r = this.pageTemplate;

  // Replace the elements: csses, jses and vars will go where [[HEAD]] is,
  // the title will go wheer [[TITLE]] is, the body where [[BODY]] is
  if ( elements.csses ) r = r.replace(/(\[\[HEAD\]\])/,  elements.csses.render() + '$1' );
  if ( elements.jses )  r = r.replace(/(\[\[HEAD\]\])/,  elements.jses.render() + '$1' );
  if ( elements.vars)   r = r.replace(/(\[\[HEAD\]\])/,  elements.vars.render() + '$1' );
  if ( elements.stores) r = r.replace(/(\[\[HEAD\]\])/,  elements.stores.render() + '$1' );
  if ( elements.title ) r = r.replace(/(\[\[TITLE\]\])/, elements.title + '$1' ); 
  if ( elements.body )  r = r.replace(/(\[\[BODY\]\])/,  elements.body + '$1' ); 
  
  // Take placeholders away. The template is probably being processed by a page,
  // which most likely added its own title, csses, js, etc.
  if( ! leavePlaceholders){
      r = r.replace(/\[\[(HEAD|TITLE|BODY)\]\]/g, '');
  }

  return r;
}


Hotpage.prototype.hotplateInit(){



}
