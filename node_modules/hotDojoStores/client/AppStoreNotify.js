
define( [

  "dojo/_base/declare"
, "dojo/topic"
, "dojo/_base/lang"
, "dojo/aspect"
, "dojo/when"

, "hotplate/hotDojoStores/stores"

], function(

  declare
, topic
, lang
, aspect
, when

, stores

){

  // When a 'resetStores' topic is published, all store's cache is deleted (as it's
  // most likely to be outdated)
  topic.subscribe( 'resetStores', function(){

    // Sets 'configStores' as the hash containing the config stores (they will NOT
    // get zapped)
    var configStores = {};
    if( typeof( vars['hotCoreStoreConfig'] ) === 'object' && typeof( vars['hotCoreStoreConfig'] ) !== null ){
      if( typeof( vars['hotCoreStoreConfig']['configStores'] ) === 'object' && typeof( vars['hotCoreStoreConfig']['configStores'] ) !== null ){
        configStores = vars['hotCoreStoreConfig']['configStores'];
      }
    }
 
    var allDefinedStores = stores();
    for( var storeName in allDefinedStores ){
      var definedStores = allDefinedStores[ storeName ];

      // Zap all stores, except the config ones
      for( var target in definedStores ){
        var store = definedStores[ target ];
        if( ! configStores[ store.storeName ] ){
          store.memCache.setData( [] );
        }
      } 
     
    };
  });

  topic.subscribe( 'hotplate/hotDojoStores/newStore', function( storeName, store ){

    var inMethod;

    aspect.around( store, 'put', function( put ){

      return function( object, options ){

        if( inMethod ){
          return put.call( store, object, options );
        } else {

          inMethod = true;

          try {
            var results = put.call( store, object, options );
            when( results ).then( function( r ){
              var eventName;
              var identity = store.idProperty;
              eventName = object[ identity ] ? 'storeRecordUpdate' : 'storeRecordCreate';

              // Make up the parameters
              var message = { type: eventName, storeName: storeName, objectId: r[ identity ], object: object };

              // Add 'before' and 'relocation' options to the broadcast
              if( typeof( options ) === 'object' && options !== null ){
                if( typeof( options.before ) !== 'undefined' ) message.before = options.before;
                if( options.relocation ) message.relocation = true;
              }

              topic.publish( eventName, null, message, false );
            });
            return results;
          } finally {
            inMethod = false;
          }

        }

      }
    });

    aspect.around( store, 'add', function( add ){
      return function( object, options ){

        if( inMethod ){
          return add.call( store, object, options );
        } else {

          inMethod = true;

          try {
            var results = add.call( store, object, options );
            when( results ).then(  function( r ){
              var identity = store.idProperty;

              var message = { type: 'storeRecordCreate', storeName: storeName, objectId: r[identity], object: object };

              // Add 'before' and 'relocation' options to the broadcast
              if( typeof( options ) === 'object' && options !== null ){
                if( typeof( options.before ) !== 'undefined' ) message.before = options.before;
                if( options.relocation ) message.relocation = true;
              }

              topic.publish('storeRecordCreate', null, message, false );
            });
            return results;
          } finally {
            inMethod = false;
          }
        }
      }

    });

    aspect.around( store, 'remove', function( remove ){
      return function( objectId, options ){

        if( inMethod ){
          return remove.call( store, objectId, options );
        } else {

          inMethod = true;

          try {
            var results = remove.call( store, objectId, options );
            when( results ).then( function( r ) {
              topic.publish('storeRecordRemove', null, { type: 'storeRecordRemove', storeName: storeName, objectId: objectId }, false );
            });
            return results;
          } finally {
            inMethod = false 
          }

        };
      };
    });

  });


  // CHANGES FROM THE OUTSIDE
  //
  // Update local stores according to Comet messages
  
  topic.subscribe('storeRecordUpdate', function( from, message, remote ){

    // A Comet changed a remote store. Refresh the Something came from a Comet. 
    if( remote ){

      var definedStores = stores( message.storeName );
      for( var k in definedStores ){
        var store = definedStores[ k ];

        var params = {}
        if( message.before ) params.before = message.before;
        if( message.relocation) params.relocation = true;

        store.memCache.put( message.object, params );
        store.notify( message.object, message.object[ store.idProperty ], params );
      }

    }
  });

  topic.subscribe('storeRecordCreate', function( from, message, remote ){
    // A Comet changed a remote store. Refresh the Something came from a Comet. 
    if( remote ){

     var definedStores = stores( message.storeName );
      for( var k in definedStores ){
        var store = definedStores[ k ];

        var params = {}
        if( message.before ) params.before = message.before;

        store.memCache.put( message.object, params );
        store.notify( message.object, params );
      }
    }
  });

  topic.subscribe('storeRecordRemove', function( from, message, remote ){
    // A Comet changed a remote store. Refresh the Something came from a Comet. 
    if( remote ){

     var definedStores = stores( message.storeName );
      for( var k in definedStores ){
        var store = definedStores[ k ];
        store.memCache.remove( message.objectId );
        store.notify( undefined, message.objectId );
      }
    }
  });

  return {};

});


