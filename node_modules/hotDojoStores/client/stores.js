define([
  'hotplate/hotDojoStores/JsonRest',
  'hotplate/hotDojoStores/JsonObservable',
  'hotplate/hotDojoStores/Cache',
  'dojo/topic',
  'dojo/_base/Deferred',
  'dojo/store/Memory',
  'hotplate/hotDojoWidgetHooks/SyncTopic',
  'dojo/domReady!',
  ],function(
    JsonRest
  , JsonObservable
  , Cache
  , topic
  , Deferred
  , Memory
  , Sync
  ){

  var cache = {};

  var stores = function( storeName, hash ){

    var definedStores, definedStore, target, resolvedTarget;
    var target;
    // console.log("Asked for: " + storeName);

    // Gets definedStores from the global registry (in the hotplate global variable)
    if(
      typeof( vars ) == 'object' &&
      typeof( vars.hotCoreStoresVars ) == 'object' &&
      typeof( vars.hotCoreStoresVars.stores ) == 'object'
    ){
      definedStores = vars.hotCoreStoresVars.stores;
    }

    // Gets the store from the global registry (in the hotplate global variable)
    if( typeof( definedStores) !== 'undefined' && typeof( definedStores[ storeName ] !== 'undefined' ) ){
      var definedStore = definedStores[ storeName ];

      if( typeof( hash ) === 'object' ){
        target = definedStore.target;
        for(var k in hash) resolvedTarget = target.replace( ':' + k, hash[ k ]);
      }
      if( typeof( hash ) === 'string' ){
        resolvedTarget = hash;
      }
      if( typeof( hash ) === 'undefined' ){
        target = definedStore.target;
        resolvedTarget = definedStore.target;
        
      }
    }


    if( typeof( definedStore ) !== 'undefined' ){

      // ***************************
      // CASE #1: It's in the cache
      // ***************************
   
      if( typeof( cache[ storeName ] ) !== 'undefined' &&
          typeof( cache[ storeName ][ resolvedTarget ] ) !== 'undefined'
      ){

        // console.log("Returned as cached!");
        // console.log(storeName);
        // console.log(resolvedTarget);
        return cache[ storeName ][ resolvedTarget ];

    
      // ********************************
      // CASE #1: It's NOT cached (yet?)
      // ********************************
      } else {

        // Create the store
        var store = new JsonRest({
          target: resolvedTarget,
          idProperty: definedStore.idProperty,
          sortParam: definedStore.sortParam,
        });

        var memCache =  new Memory({
           idProperty: definedStore.idProperty
        });

        // Make up the "finalStore" (which includes refences to the JsonRest
        // one and the memCache one)
        var finalStore = new JsonObservable( Cache( store, memCache ) );
        finalStore['noCache'] = store;
        finalStore['memCache'] =  memCache;

        // Add this result to the cache (including the resolvedTarget)
        if( typeof( cache[ storeName ] ) === 'undefined' ) cache[ storeName ] = {};
        cache[ storeName ][ resolvedTarget ] = finalStore;

        // Publish teh fact that a new store was added
        Sync.publishWhenReady( 'hotplate/hotDojoStores/newStore', storeName, finalStore );

        // console.log("Final store: (name and object)");
        // console.log( storeName);
        // console.log(finalStore);
        return finalStore;
      }
    } else {
      throw( new Error( "Asked for a non existing store: " + storeName ) );
    }

  }
  

  return stores;

});

