
var util = require('util')

  , hotplate = require('hotplate')
  , ObjectId = require('mongowrapper').ObjectId
  , declare = require('simpledeclare')
  , Store = require('jsonreststores')
  , MongoDriverMixin = require('jsonreststores/MongoDriverMixin.js')
  , app = hotplate.app
  , db = hotplate.get('db')

  , Schema = require('simpleschema')
  , MongoSchemaMixin = require('simpleschema/MongoSchemaMixin.js')
;


// Sets the right mixins for Store and Schema
Schema = declare( [ Schema, MongoSchemaMixin ] );
Store = declare( [ Store, MongoDriverMixin ] );

var hooks = exports.hotHooks = {}

hooks.initLoggers = function( logFields, done ){

  var s = new Schema( logFields );

  // MAYBE: Manipulate schema here if needed: add things so that they are marked as sortable etc.

  done( null ); 
}

function getLogStore( done ){

  // TODO:
  // Get JsonRestStore's store constructor,
  // create a DB class using it, return the store

  /* 
  LogStore = declare( Store,  {
    storeName: 'logs',
    db: db,
    schema: s,
    paramIds: [ 'logId' ],
  });


  hooks.logFields = function( done ){
  done( null, {
    logLevel:      { type: 'number', default: 3 },
    errorName:     { type: 'string', default: '' },
    message:       { type: 'string', default: '' },
    errors:        { type: 'string', serialize: true, default: '' },
    system:        { type: 'number', default: 0 },
    data:          { type: 'string', serialize: true, default: '' },
    loggedOn:      { type: 'date',   default: new Date() },
  } );
}

  */
  // Temporary dummy store
  LogStore = function() {};
  LogStore.Post = function() {};

  done( null, LogStore );
}

hotplate.hotEvents.on( 'log', 'hotCoreStoreLogger', function( entry, done ){

  console.log("***************************** hotStoreLogger is logging:");
  console.log( entry );

  getLogStore( function( err, LogStore ) {
    LogStore.Post( entry );
    done( null );
  });

});



// FIXME: Make it return the actual store
hooks.stores = function( done ){

  getLogStore( function( err, LogStore ) {

    return done( null, { moduleName: 'hotCoreStoreLogger', result: [ ] } );

    done( null,  {
      moduleName: 'hotCoreStoreLogger', result: [ LogStore ]
    });
  });

}

