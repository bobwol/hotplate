/*
QUICK MANUAL:

CALLER:
------

require([
  'hotplate/hotDojoWidgetHooks/SyncTopic',
  ],function(
  , SyncTopic
  ){

  SyncTopic.publishWhenReady( 'hotplate/hotDojoStores/newStore', storeName, finalStore );
});



CALLEE:
------

require([
'hotplate/hotDojoWidgetHooks/SyncTopic',
"hotplate/hotDojoWidgetHooks/SyncSubscriber!hotplate/hotDojoStores/newStore|someUniqueLabel",
], function( syncTopic ){

//...


  topic.subscribe( 'hotplate/hotDojoStores/newStore', function( storeName, store ){
    // ...
  });


  SyncTopic.ready('hotplate/hotDojoStores/newStore');

  }
}
*/


define(['dojo/Deferred', 'dojo/ready', 'dojo/topic' ], function (Deferred , ready, topic ) {
 
  return {
    deferredMap: {},
    subscribersCount: {},

    _getDeferredForTopic: function (topicString) {
      if (!this.deferredMap[topicString]) {
        this.deferredMap[topicString] = new Deferred();
      }
      return this.deferredMap[topicString];
    },

    incSubscriber: function (topicString) {
      if( typeof( this.subscribersCount[topicString] ) === 'undefined' ) this.subscribersCount[topicString] = 0;
      this.subscribersCount[topicString] ++;
    },

    publishWhenReady: function(topicString) {
      var args = arguments;
      self = this;

      // This will guarantee that every single plugin has been called
      //ready( function() {

        //console.log("Called publishWhenReady: " + topicString );
        if( typeof( self.subscribersCount[topicString]) === 'undefined' || self.subscribersCount[topicString] == 0 ){
          //console.log("No listeners!" );
          topic.publish.apply(self, args);
        } else {
          //console.log("Listeners: deferring..." );
          self._getDeferredForTopic(topicString).then(function () {
            //console.log("OK, topic actually published: " + topicString );
            topic.publish.apply(self, args);
          });
        }
      //})
    },

    ready: function (topicString) {
      self = this; 
      ready( function() { 
        self.subscribersCount[topicString] --;

        if( self.subscribersCount[topicString] < 0 ){
          throw( new Error("Subscriber count < 0" ) );
        }

        if( ! self.subscribersCount[topicString]){ 
          self._getDeferredForTopic(topicString).resolve();
        }
      });
    }
  };
}); 
