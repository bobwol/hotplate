define([
  "dojo/_base/declare",
  "dojo/_base/json",
  "dojo/store/Observable",
  "dojo/topic",
  "dojo/on",
  "dojo/dom",
  "dojo/dom-class",
  "dojo/dom-construct",
  "dojo/when",
  "dojo/store/Memory",

  "dijit/_WidgetBase",
  "dijit/_TemplatedMixin",
  "dijit/_WidgetsInTemplateMixin",
  "dijit/form/Form",
  "dijit/form/TextBox",
  'dijit/layout/TabContainer',
  'dijit/layout/ContentPane',
  "dijit/Destroyable",

  'dgrid/OnDemandGrid',
  'dgrid/OnDemandList',
  'dgrid/Keyboard',
  'dgrid/Selection',
  'dgrid/_StoreMixin',

  "hotplate/hotDojoSubmit/defaultSubmit",
  "hotplate/hotDojoLogger/logger",

  "hotplate/hotDojoWidgets/AlertBar",
  "hotplate/hotDojoWidgets/_OverlayMixin",
  "hotplate/hotDojoWidgets/BusyButton",
  "hotplate/hotDojoGlobals/globals",

   ], function(
     declare
     , json
     , Observable
     , topic
     , on
     , dom
     , domClass
     , domConstruct
     , when
     , Memory

     , _WidgetBase
     , _TemplatedMixin
     , _WidgetsInTemplateMixin
     , Form
     , TextBox
     , TabContainer
     , ContentPane
     , Destroyable

     , OnDemandGrid
     , OnDemandList
     , Keyboard
     , Selection
     , _StoreMixin

     , ds
     , Logger

     , AlertBar
     , _OverlayMixin
     , BusyButton

     , globals

 ){


  return declare( [ _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, _OverlayMixin ] , {

    templateString: '<div><p>You need to set a template for this widget!</p></div>',

    // These will be defined by the templateString
    formWidget: null,
    alertBarWidget: null,
    buttonWidget: null,

    alertBarDomPlacement: 'first',

    storeName: '',
    store: null,

    //storeFields: {},
    recordId: null,

    // Default values for editing form
    defaultValues: {},

    resetOnSuccess: false,

    baseClass: 'editing-widget',

     // The store for records
    store: null,

    postCreate: function(){
      this.inherited(arguments);

      var self = this;

      // If there is no alertBarWidget defined, then make one up and
      // place it at the top of the form
      if( ! this.alertBarWidget ){
        this.alertBarWidget = new AlertBar();
        this.alertBarWidget.placeAt( this.formWidget.containerNode, this.alertBarDomPlacement );
      }
     
      // Artificially add a hidden id field to the form. This way, once the form has loaded,
      // the id will be stored and it will then be re-submitted 
      if( self.recordId ) {
        var idTextBox = new TextBox( { type:"hidden", name: self.store.idProperty } );
        I = idTextBox;
        idTextBox.placeAt( this.formWidget.containerNode, 'first' );
      }

      // When the form's overlay is clicked, try and show the form again
      on(this, 'overlayClick', function(e){
        this._onShow();
      });

      // Check self the record doesn't get updated by remote
      topic.subscribe('storeRecordUpdate', function( from, message, remote ){

        if( remote ){
          if( message.storeName === self.storeName && message.objectId == self.recordId ){
            self.set( 'overlayed', true );
            self.set( 'overlayClickable', true );
          }
        }
      });

      // Submit form, trying to save values
      this.formWidget.onSubmit = ds.defaultSubmit(this.formWidget, this.buttonWidget, function(){

        // Set the values about to be saved
        var formValues = self.formWidget.get('value');

        // Try to save the values
        when( self.store.put( formValues )) .then(
          ds.UIMsg( self.buttonWidget, self.alertBarWidget, 'Saved!' ),
          ds.UIErrorMsg( self.formWidget, self.buttonWidget, self.alertBarWidget )
        ).then(
          function( res ){
            self.emit( 'successfulsubmit', { bubbles: false }  );
            if( self.resetOnSuccess ){
              self.formWidget.reset();
            }
            return res;
          },
          function( err ){
            self.emit( 'unsuccessfulsubmit', { bubbles: false }  );
            throw( err );
          }
        );

      }); // this.formWidget.onSubmit
    }, // postCreate()

    resize: function(){
      this.inherited(arguments);
      this._onShow();
    },

    _onShow: function(){

      this.inherited(arguments);

      var self = this;

      // ****************************************************************
      // There is a recordId set: it's the update of an existing value
      // ****************************************************************
      if( self.recordId ){

        // By default, this widget is overlayed
        this.set( 'overlayed', true );
        this.set( 'overlayClickable', false );

        when( this.store.get( this.recordId )).then(
          ds.UIMsg(),
          ds.UIErrorMsg(null, null, this.alertBarWidget )
        ).then(
          function(res){

            // OK things worked out: the overlay can go, values are assigned to form
            self.set( 'overlayed', false );
            self.formWidget.set( 'value', res ); // Thanks Karl Tiedt :D

            // Return for chaining...
            return res;

          },
          function(err){
            self.set('overlayClickable', true );

            // Error handlers need to rethrow...
            throw( err );
          }
        );

      // ****************************************************************
      // There is no recordId set: simply show defaults
      // ****************************************************************
      } else {
        
        this.set( 'overlayed', false );
        this.set( 'overlayClickable', false );
        self.formWidget.set( 'value', self.defaultValues ); // Thanks Karl Tiedt :D

      }
    },

    destroy: function(){
      this.inherited(arguments);
      // console.log("EDITING WIDGET DESTROYED!");
    },

  }); // declare

});



