
/* TODO:
*/

/*!
 * Module dependencies.
 */

var util = require('util')
, fs = require('fs')
, path = require('path')
, send = require('send')
, hotplate = require('hotplate')
;



/**
  Module to handle the delivery of files made available by modules

  @module hotCoreClientFiles
  @main hotCoreClientFiles
  @class hotCoreClientFiles
*/

/**
  The list of local paths that will be handles by the module

  @attribute localLocations
*/

exports.hotHooks = {};


/**
  Call the hook `clientPaths`, and store the results
  in `localLocations`

  @event init
*/
exports.getLocalLocations = getLocalLocations = hotplate.cachable( function( done ){

  var moduleName;
  var localLocations = {};

  hotplate.invokeAll('clientPaths', function(err, results){
    results.forEach( function(element) {
      moduleName = element.moduleName;

      element.result.forEach( function( clientPath ){
        localLocations[ moduleName ] = clientPath;
      });
    });

    done( null, localLocations );
  });

});


/**
  Returns a function that will serve files that are set as
  public by other modules by implementing the `clientPaths` hook

  @method serve
  @param options 
*/
exports.serve = function( options ){

  options = options || {};

  // Make up the regular expression to check if the URL requested in
  // one of the URLs monitored by the module
  var staticUrlPathRegExp = new RegExp('^' + hotplate.get('staticUrlPath') + '/(.*?)/(.*)');

  // Return the actual route
  return function static(req, res, next) {

    // If there is a match between the request and the
    // expected sub-url...
    var  match = req.path.match( staticUrlPathRegExp );

    getLocalLocations( function( err, localLocations ){
      if( err ){
        next( err );
      } else {

        if( match && localLocations[ match[1] ] ){
    
          // Create the variable names
          var moduleName = match[1];
          var fileLocation = match[2];
    
          // Get the "local" variable for that module
          var localDir = localLocations[ moduleName ];
    
          // At this point, if:
          //  - req.path      is /hotPlateDir/testingModule/css/one.css
          //  - staticUrlPath is /hotPlateDir 
          //  
          // Then:
          //  - localDir     would be  /home/www/program/node_modules/testingModule/public_files/
          //  - fileLocation would be  css/one.css 
    
          // Send it!
          function error(err) {
            if( 404 == err.status) return next();
            next(err);
          }
          send(req, fileLocation )
           .maxage(options.maxAge || 0)
           .root(localDir)
           .hidden(options.hidden)
           .on('error', error )
           .pipe(res);
        } else {
          next();
        }
        
      }
    })

  }

};

