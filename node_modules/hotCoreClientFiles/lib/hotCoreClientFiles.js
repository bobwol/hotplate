
/* TODO:
*/

/*!
 * Module dependencies.
 */

var util = require('util')
, fs = require('fs')
, path = require('path')
, send = require('send')
, hotplate = require('hotplate')
;


exports.localLocations = {};


exports.hotHooks = {};

exports.hotHooks.init = function( done ){

  var moduleName;

  hotplate.invokeAll('clientPaths', function(err, results){
    results.forEach( function(element) {
      moduleName = element.moduleName;

      element.result.forEach( function( clientPath ){
        exports.localLocations[ moduleName ] = clientPath;
      });
    });

    done( null );
  });

}
exports.hotHooks.init.invokes = [ 'clientPaths' ];


exports.serve = function( options ){

  options = options || {};

  // Make up the regular expression to check if the URL requested in
  // one of the URLs monitored by the module
  var staticUrlPathRegExp = new RegExp('^' + hotplate.get('staticUrlPath') + '/(.*?)/(.*)');

  // Return the actual route
  return function static(req, res, next) {

    // If there is a match between the request and the
    // expected sub-url...
    var  match = req.path.match( staticUrlPathRegExp );

    if( match && exports.localLocations[ match[1] ] ){

      // Create the variable names
      var moduleName = match[1];
      var fileLocation = match[2];

      // Get the "local" variable for that module
      var localDir = exports.localLocations[ moduleName ];

      // At this point, if:
      //  - req.path      is /hotPlateDir/testingModule/css/one.css
      //  - staticUrlPath is /hotPlateDir 
      //  
      // Then:
      //  - localDir     would be  /home/www/program/node_modules/testingModule/public_files/
      //  - fileLocation would be  css/one.css 

      // Send it!
      function error(err) {
        if( 404 == err.status) return next();
        next(err);
      }
      send(req, fileLocation )
       .maxage(options.maxAge || 0)
       .root(localDir)
       .hidden(options.hidden)
       .on('error', error )
       .pipe(res);
    } else {
      next();
    }
    
  }

};

