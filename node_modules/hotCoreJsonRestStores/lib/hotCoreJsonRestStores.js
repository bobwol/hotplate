var 
  hotplate =  require('hotplate')
, path = require('path')
, async = require('async')
, util = require('util')
, mongoWrapper = require('mongowrapper')
, declare = require( 'simpledeclare' )
, Schema = require( 'jsonreststores-mongo' ).Schema
;



// Simply activate path to client files
hooks.clientPaths = function( done ){
  done( null, { moduleName: 'hotCoreJsonRestStores', result: [ path.join(__dirname, '../client') ] } );
}



app = hotplate.app;


exports.hotHooks = hooks = {}

hooks.init = function( done ){
  done( null );
}

hooks.run = function( done ){

  var messages = hotplate.getModule('hotMongoCometMessages');
  var sharedCode = hotplate.getModule('hotCoreSharedCode');


  exports.SchemaMixin = {

    sharedValidatorTypeParam: function( p ){
      if( typeof( p.parameterValue ) !== 'string' )
        throw( new Error("Validator needs to be a string, found: " + typeof( p.parameterValue ) ) );

      var f = sharedCode.sharedFunctions.hotCoreCommonValidators[ p.parameterValue ];

      if( ! f( p.value ) ){
        var msg = f( false );
        p.errors.push( { field: p.fieldName, message: msg, mustChange: true } );
      }
    }
  };


  exports.StoreMixin = {

    killComet: false,
    chainErrors: 'all',

    echoAfterPutNew: true,
    echoAfterPutExisting: true,
    echoAfterPost: true,
    echoAfterPostAppend: true,


    _getTabId: function( req ){
      var tabId = req.headers['x-hotplate-tabid'];
      if( tabId != '' ){
        tabId = this._castId( tabId );
      } else {
        tabId = null;
      }
      return tabId; 
    },


    _broadcastToGroup: function( req, object, op ){
      // TODO: Implement me      
    }

    _broadcastChange: function( req, storeName, object, op ){

      if( ! this.killComet ){

        var tabId = this._getTabId( req );

        // Broadcast the change
        messages.sendToTabsOfWorkspace(

          // These ones never change
          req.application.workspace._id,
          tabId,
          req.application.user._id,
          op,

          // These ones do change: it's the message to broadcast
          { storeName: storeName,
            objectId: object._id,
            object: object,
            remote: true
          } );
      }

    },

    afterDelete: function( req, doc, fullDoc ){
      this.inherited( arguments );
      this._broadcastChange( req, this.storeName, doc, 'storeDelete' );
    },    

    afterPutExisting: function( req, body, doc, docAfter, fullDoc, fullDocAfter, overwrite ){
      this.inherited( arguments );
      this._broadcastChange( req, this.storeName, docAfter, 'storeUpdate' );
    },    

    afterPutNew: function( req, body, doc, fullDoc, overwrite  ){
      this.inherited( arguments );
      this._broadcastChange( req, this.storeName, doc, 'storeCreate' );
    },    

    afterPost: function( req, body, doc, fullDoc ){
      this.inherited( arguments );
      this._broadcastChange( req, this.storeName, doc, 'storeCreate' );
    },    

  };



  done( null );
}



