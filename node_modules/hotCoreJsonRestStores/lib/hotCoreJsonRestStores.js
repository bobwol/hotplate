var 
  hotplate =  require('hotplate')
, path = require('path')
, async = require('async')
, util = require('util')
, mongoWrapper = require('mongowrapper')
, declare = require( 'simpledeclare' )
;



// Simply activate path to client files
hooks.clientPaths = function( done ){
  done( null, { moduleName: 'hotCoreJsonRestStores', result: [ path.join(__dirname, '../client') ] } );
}



app = hotplate.app;


exports.hotHooks = hooks = {}

/*hooks.init = function( done ){
  done( null );
}*/

hooks.init = function( done ){

  var messages = hotplate.getModule('hotMongoCometMessages');
  var sharedCode = hotplate.getModule('hotCoreSharedCode');

  exports.SchemaMixin = {

    sharedValidatorTypeParam: function( p ){
      if( typeof( p.parameterValue ) !== 'string' )
        throw( new Error("Validator needs to be a string, found: " + typeof( p.parameterValue ) ) );

      var f = sharedCode.sharedFunctions.hotCoreCommonValidators[ p.parameterValue ];

      if( ! f( p.value ) ){
        var msg = f( false );
        p.errors.push( { field: p.fieldName, message: msg, mustChange: true } );
      }
    }
  };


  exports.StoreMixin = {

    killComet: false,
    chainErrors: 'all',

    echoAfterPutNew: true,
    echoAfterPutExisting: true,
    echoAfterPost: true,
    echoAfterPostAppend: true,


    _getTabId: function( req ){
      var tabId = this._req.headers['x-hotplate-tabid'];
      if( tabId == '' ){
        tabId = null;
      }
      return tabId; 
    },


    _broadcastChange: function( storeName, object, op ){

      var self = this;

      if( ! self.killComet && self.remote ){

        // Work out the tab Id
        var tabId = self._getTabId( self._req );

        // This is dreadful. But what am I to do?
        // A store is identified by its name and its target
        // This allows nested stores like 
        // bookingPerformers = store('bookingPerformers', { bookingId: 4343 } )
        // bookingPerformers.query({}) => `GET /Bookings/4343/performers/`
        var storeTarget = self._req.originalUrl.match( /(^.*\/)/,'' )[0];

        // Broadcast the change to its own store
        messages.sendToTabsOfWorkspace(

          // These ones never change
          self._req.application.workspace._id,
          tabId,
          self._req.application.user._id,
          op,

          // These ones do change: it's the message to broadcast
          {
            storeName: storeName,
            storeTarget: storeTarget,
            objectId: object._id,
            object: object,
            remote: true
          }
        );


        if( Array.isArray( this.cometGroup ) ){
          for( var i =0, l=this.cometGroup.length; i < l; i++ ){
            var groupStoreName = this.cometGroup[ i ];
            if( storeName != groupStoreName ){

              // Broadcast the change to other stores in the same group
              messages.sendToTabsOfWorkspace(

                // These ones never change
                self._req.application.workspace._id,
                tabId,
                self._req.application.user._id,
                op,

                // These ones do change: it's the message to broadcast
                { storeName: groupStoreName,
                  objectId: object._id,
                  object: object,
                  remote: true
                }
              );

            }
          }
        }
      }

    },

    afterDelete: function( params, body, options, doc, fullDoc ){
      this.inherited( arguments );
      this._broadcastChange( this.storeName, doc, 'storeRemove' );
    },    

    afterPutExisting: function( params, body, options, body, doc, docAfter, fullDoc, fullDocAfter, overwrite ){
      this.inherited( arguments );
      this._broadcastChange( this.storeName, docAfter, 'storeUpdate' );
    },    

    afterPutNew: function( params, body, options, body, doc, fullDoc, overwrite  ){
      this.inherited( arguments );
      this._broadcastChange( this.storeName, doc, 'storeCreate' );
    },    

    afterPost: function( params, body, options, body, doc, fullDoc ){
      this.inherited( arguments );
      this._broadcastChange( this.storeName, doc, 'storeCreate' );
    },    

  };

  done( null );
}
hooks.init.after = [ 'hotMongoCometMessages', 'hotCoreSharedCode' ];


