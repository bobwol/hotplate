var 
  hotplate =  require('hotplate')
, path = require('path')
, async = require('async')
, util = require('util')
, mongoWrapper = require('mongowrapper')
, declare = require( 'simpledeclare' )
;



app = hotplate.app;

exports.hotHooks = hooks = {}


hooks.init = function( done ){

  // var messages = hotplate.getModule('hotCoreComet');
  var sharedCode = hotplate.getModule('hotCoreSharedCode');

  exports.SchemaMixin = declare( null, {

    sharedValidatorTypeParam: function( p ){
      if( typeof( p.parameterValue ) !== 'string' )
        throw( new Error("Validator needs to be a string, found: " + typeof( p.parameterValue ) ) );

      var f = sharedCode.sharedFunctions.hotCoreCommonValidators[ p.parameterValue ];

      if( f && ! f( p.value ) ){
        var msg = f( false );
        p.errors.push( { field: p.fieldName, message: msg, mustChange: true } );
      }
    }
  });


  exports.StoreMixin = declare(null, {

    killComet: false,
    chainErrors: 'all',

    echoAfterPutNew: true,
    echoAfterPutExisting: true,
    echoAfterPost: true,
    echoAfterPostAppend: true,

    db: hotplate.get('db'),

    _getTabId: function( req ){
      var tabId = this._req.headers['x-hotplate-tabid'];
      if( tabId == '' ){
        tabId = null;
      }
      return tabId; 
    },


    afterDelete: function( params, body, options, doc, fullDoc ){
      this.inherited( arguments );
      
      hotplate.invokeAll('storeRecordRemove', this.storeName, doc ); 
    },    

    afterPutExisting: function( params, body, options, body, doc, docAfter, fullDoc, fullDocAfter, overwrite ){
      this.inherited( arguments );

      hotplate.invokeAll('storeRecordUpdate', this.storeName, docAfter ); 
    },    

    afterPutNew: function( params, body, options, body, doc, fullDoc, overwrite  ){
      this.inherited( arguments );

      hotplate.invokeAll('storeRecordCreate', this.storeName, doc ); 
    },    

    afterPost: function( params, body, options, body, doc, fullDoc ){
      this.inherited( arguments );

      hotplate.invokeAll('storeRecordCreate', this.storeName, doc ); 
    },    

  });


  done( null );
}
hooks.init.after = [ 'hotCoreSharedCode' ];


