
define([
  "dojo/_base/declare",
  "dojo/topic",
  "dojo/when",
  "dojo/aspect",
  "hotplate/hotDojoStores/stores",
  "hotplate/hotDojoStores/AppStoreNotify",
  "hotplate/hotDojoComet/messages",
  "hotplate/hotDojoGlobals/globals",

  "dojo/domReady!",
   ], function(
   declare
 , topic
 , when
 , aspect
 , stores
 , dummy
 , messages
 , globals
 ){


  var r = {};
  Object.keys( vars.hotCoreStoreConfig.configStores ).forEach( function( storeName ){

    // Get the store's object
    var store = stores( storeName, { workspaceId: globals.workspaceId, userId: globals.userId } );

    // Put the in-page record in the store's cache
    store.memCache.put( vars.hotCoreStoreConfig.configStoreRecords[ storeName ] );

    // Put the in-page record in 'r', which will be returned to the caller
    r[ storeName ] = vars.hotCoreStoreConfig.configStoreRecords[ storeName ];

    // Subscribe to changes to those records, so that the 'r' variable (representing the current
    // configuration) always stays current
    topic.subscribe('storeRecordUpdate', function( from, message){

      // Figure out the idProperty from the `stores` variable
      var idProperty = vars.hotCoreStoreVars.stores[ message.storeName ].idProperty;

      // If the store name is one of the config vars', then publish a `configChange/storeName` topic so
      // that the application can show changed records if necessary
      if( message.storeName == storeName && message.objectId == r[ message.storeName ][store.idProperty] ){
        r[ storeName ] = message.object;
        topic.publish('configChange/' + storeName, r[ storeName ], message );
      }
    });



  });

  return r;

});


