

define([

   "dojo/_base/declare",
   "dojo/dom-class",
   "dojo/Deferred",

   "hotplate/hotDojoWidgets/ConfirmDialog",
   'hotplate/hotDojoStores/stores',
   'hotplate/hotDojoGlobals/globals',


   "./_SignInRecoverRegisterButton",

   ], function(

     declare
     , domClass
     , Deferred

     , ConfirmDialog
     , stores
     , globals

     , _SignInRecoverRegisterButton

 ){

  return declare( [ _SignInRecoverRegisterButton ], {

    templateString: '<div><div class="auth-button" data-dojo-type="dijit/form/Button" data-dojo-attach-point="button" data-dojo-props="iconClass: \'auth-button-icon-all auth-button-icon-${strategyId}\'"></div><div class="unticked" data-dojo-attach-point="accessIcon"></div></div>',

    userStrategyData: null,
    resultSet: [],

    constructor: function( params ){
      var self = this;

      //  Create attributes that are local to the object
      self.userStrategyData = params.userStrategyData;
      self.resultSet = params.resultSet;

      // Observe the result set. If things change, the object
      // will update its internal values (`active` and `userStrategyData`) accordingly
      self.resultSet.observe( function( object, removeFrom, insertedInto ) {

        if( object.strategyId === self.strategyId ){

          // It's a deletion
          if( removeFrom != -1 && insertedInto == -1 ){
            self.set( 'active', false );
            self.set( 'userStrategyData', null );
          }

          // It's a addition
          if( removeFrom == -1 && insertedInto != -1 ){
            self.set( 'active', true );
            self.set( 'userStrategyData', object );
          }

          // It's an edit
          if( removeFrom == -1 && insertedInto == -1 ){
            self.set( 'userStrategyData', object );
          }
        }

      }, true );
    },


    postCreate: function(){
      var self = this;

      this.inherited(arguments); 
      if( self.userStrategyData ) self.set( 'active', true );
    },

    // When set as "active", it will give visual feedback 
    _setActiveAttr: function( value ){
      this._set( 'active', value );
      
      if( value ){
        domClass.add( this.accessIcon, 'ticked' );
        domClass.remove( this.accessIcon, 'unticked' );
      } else {
        domClass.add( this.accessIcon, 'unticked' );
        domClass.remove( this.accessIcon, 'ticked' );
      }
    }, 


    _deleteStrategyData: function( title, content ){

      var self = this;
      deferred = new Deferred();

      var myDialog = new ConfirmDialog({
        title: title,
        content: content,
      });
      myDialog.startup();
      myDialog.on( 'dialogconfirmed', function( e ){

         var store = stores( 'userStrategies', { userId: globals.userId } );       
         store.remove( self.userStrategyData._id ).then(

          function( r ){
            self.userStrategyData = null;
            deferred.resolve( true );
          },
          function( err ){
            (new ConfirmDialog( { cancelButton: false, title: "Failed", content: "Operation failed" })).startup();
            deferred.reject( err );
          }
        );
      });

      return deferred.promise
    },

  });

});





