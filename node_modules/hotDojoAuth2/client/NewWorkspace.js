define([
  "dojo/_base/declare",
  "dojo/on",
  "dojo/when",
  "dojo/_base/lang",
  "dojo/_base/json",
  "dojo/aspect",
  "dojo/query",

  "dijit/layout/StackContainer",
  "dijit/layout/ContentPane",
  "dijit/form/Form",
  "dijit/_WidgetBase",
  "dijit/_TemplatedMixin",
  "dijit/_WidgetsInTemplateMixin",
  "dijit/form/Button",
  "dijit/form/ValidationTextBox",
  "dijit/registry",
  "dijit/Tooltip",
  "dijit/Dialog",

  "hotplate/hotDojoSubmit/defaultSubmit",
  "hotplate/hotDojoStores/stores",
  "hotplate/hotDojoLogger/logger",
  "dojo/text!hotplate/hotDojoAuth2/templates/NewWorkspace.html",

  "hotplate/hotDojoAuth2/ValidationWorkspace",

  "hotplate/hotDojoWidgets/AlertBar",
  "hotplate/hotDojoWidgets/StackFading",
  "hotplate/hotDojoWidgets/TabFading",
  "hotplate/hotDojoWidgets/BusyButton",

  "hotplate/hotDojoWidgetHooks/_TemplatedHooksMixin",

   ], function(
     declare
     , on
     , when
     , lang
     , json
     , aspect
     , query

     , StackContainer
     , ContentPane
     , Form
     , _WidgetBase
     , _TemplatedMixin
     , _WidgetsInTemplateMixin
     , Button
     , ValidationTextBox
     , registry
     , Tooltip
     , Dialog

     , ds
     , stores
     , Logger
     , templateString

     , ValidationWorkspace

     , AlertBar
     , StackFading
     , TabFading
     , BusyButton
     , _TemplatedHooksMixin

 ){
    // Create the "login" pane, based on a normal ContentPane
    return declare('hotplate/hotDojoAuth2/NewWorkspace', [_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, _TemplatedHooksMixin ], {


      widgetsInTemplate: true,

      templateString: templateString,
      
      postCreate: function(){
        var self = this;

        this.inherited( arguments );

        this.formWidget.onSubmit = ds.defaultSubmit(this.formWidget, this.buttonWidget, function(){
          var data = self.formWidget.getValues();

          stores('workspaces').noCache.put(data).then(
            ds.UIMsg( self.buttonWidget, self.alertBarWidget , "Workspace created!"),
            ds.UIErrorMsg( self.formWidget, self.buttonWidget, self.alertBarWidget, true )
          ).then(
            function(res){

              // Log the event, go to the workspace straight away!
              Logger("Jsonrest put(data) returned OK: " + json.toJson(res) );
              // window.location = vars.hotplate.afterLoginPage + res.workspaceId;

            },
             function(err){
               // if( err.status == 401 ){
                 // Logger("User is no longer logged in, redirecting to normal register form");
                 // self.container.selectChild( self.registerAsAnon );
               //}
             }
          );

 
        });


      }, // postCreate


   });

});

