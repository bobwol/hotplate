define([
   "dojo/_base/declare",
   "dojo/when",
   "dojo/store/Observable",
   "dojo/topic",
   "dojo/on",
   "dojo/_base/lang",
   "dojo/dom-construct",
   "dojo/dom-style",
   "dojo/dom-class",
   "dojo/dom-attr",
   "dojo/aspect",
   "dojo/request",

   "dijit/_WidgetBase",
   "dijit/_TemplatedMixin",
   "dijit/_WidgetsInTemplateMixin",
   "dijit/Destroyable",
   "dijit/Dialog",
   "dijit/_OnDijitClickMixin",
   "dijit/focus",
   "dijit/form/Button",
   "dijit/form/ValidationTextBox",

   "dijit/layout/BorderContainer",
   "dijit/layout/StackContainer",
   "dijit/layout/TabContainer",
   "dijit/layout/ContentPane",
   'dijit/_Container',
   'dijit/layout/_ContentPaneResizeMixin',

   'dgrid/List',
   'dgrid/OnDemandList',
   "dgrid/Selection",
   "dgrid/Keyboard",
   "dgrid/util/mouse",
   "dgrid/extensions/DijitRegistry",
   'put-selector/put',

   "hotplate/hotDojoAuth/LogoutButton",
   "hotplate/hotDojoAuth2/NewWorkspace",
   "hotplate/hotDojoAuth2/Manager",
   "hotplate/hotDojoAuth2/SignInRecoverRegister",

   "hotplate/hotDojoWidgets/TempDialog",
   "hotplate/hotDojoWidgetHooks/_TemplatedHooksMixin",
   "hotplate/hotDojoStores/AppStoreNotify",
   "hotplate/hotDojoWidgets/_OverlayMixin",
   "hotplate/hotDojoWidgets/EditingWidget",
   "hotplate/hotDojoDgridWidgets/EditableList",
   "hotplate/hotDojoDgridWidgets/StoreSelect",
   "hotplate/hotDojoCometMessages/messages",
   "hotplate/hotDojoSubmit/defaultSubmit",
   "hotplate/hotDojoWidgets/BusyButton",
   "hotplate/hotDojoStores/stores",


   ], function(
     declare
     , when
     , Observable
     , topic
     , on
     , lang
     , domConstruct
     , domStyle
     , domClass
     , domAttr
     , aspect
     , request

     , _WidgetBase
     , _TemplatedMixin
     , _WidgetsInTemplateMixin
     , Destroyable
     , Dialog
     , _OnDijitClickMixin
     , focusUtil
     , Button
     , ValidationTextBox

     , BorderContainer
     , StackContainer
     , TabContainer
     , ContentPane
     , _Container
     , _ContentPaneResizeMixin

     , List
     , OnDemandList
     , Selection
     , Keyboard
     , mouse
     , DijitRegistry
     , put

     , LogoutButton
     , NewWorkspace
     , Manager
     , SignInRecoverRegister


     , TempDialog
     , _TemplatedHooksMixin
     , dummy
     , _OverlayMixin
     , EditingWidget
     , EditableList
     , StoreSelect
     , messages
     , ds
     , BusyButton
     , stores

 ){

    // Create the "login" pane, based on a normal ContentPane
    return declare('hotplate/hotDojoAuth2/Pick',  [_WidgetBase, _Container, _ContentPaneResizeMixin, Destroyable, _OverlayMixin, _TemplatedMixin, _WidgetsInTemplateMixin ], {
    // return declare('hotplate/hotDojoAuth2/Pick',  [ ContentPane, Destroyable, _OverlayMixin, _TemplatedMixin, _WidgetsInTemplateMixin ], {

      widgetsInTemplate: true,

      templateString: '' +
        '<div>\n' +
        '  <div data-dojo-type="dijit/form/Button" data-dojo-attach-point="newWorkspaceButton">Create new workspace</div>\n'+
        '  <div data-dojo-attach-point="listWidgetNode"></div>\n'+
        
/*
        '  <div data-dojo-type="dijit/layout/TabContainer">\n'+
        '    \n'+
        '    <div data-dojo-type="dijit/layout/ContentPane" title="Sign in">\n'+
        '      <p>Acca ta loggin</p>\n'+
        '      <div data-dojo-type="hotplate/hotDojoAuth2/SignInRecoverRegister" data-dojo-props="action:\'signin\'"></div>\n'+
        '    </div>\n'+
        '    \n'+
        '    <div data-dojo-type="dijit/layout/ContentPane" title="Recover">\n'+
        '      <p>Acca tarcurd </p>\n'+
        '      <div data-dojo-type="hotplate/hotDojoAuth2/SignInRecoverRegister" data-dojo-props="action:\'recover\'"></div>\n'+
        '    </div>\n'+
        '    \n'+
        '    <div data-dojo-type="dijit/layout/ContentPane" title="Register">\n'+
        '      <p>Acca ti sign</p>\n'+
        '      <div data-dojo-type="hotplate/hotDojoAuth2/SignInRecoverRegister" data-dojo-props="action:\'register\'"></div>\n'+
        '    </div>\n'+
        '    \n'+
        '    \n'+
        '    \n'+
        '  </div>\n'+
*/
        '  <p>MEEEEEEEEEEEEEEEEEEE</p>\n'+
        '</div>\n'+

        '',

        startup:function(){
          self.listWidget.startup();
          
        },

        postCreate:function(){
          this.inherited(arguments);
          var self = this;

         
          // List of workspaces
          var ListConstructor = declare( [ OnDemandList, Selection, Keyboard, DijitRegistry ], {
            // renderRow: self.renderRow,
            selectionMode: 'single',
            store: stores('userWorkspaces', { userId: vars['hotDojoAuth2']['userId']}),
          } );

          self.listWidget = new ListConstructor({}, self.listWidgetNode );

          // New workspace button
          this.newWorkspaceButton.on('click', function(e) {
            var tempDialog = new TempDialog();
            var f = new NewWorkspace();           
            tempDialog.addChild( f );
            tempDialog.startup();
          });

        },

        startup: function(){
          this.inherited(arguments);
          var self = this;
        },

   });

});



