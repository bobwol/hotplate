
/* TODO:

  REGISTRATION:
  * Put the alert message function in its own function
  * Implement delete button for locals
  * Check that local actually works setting new things
  * Activate localstorage's form's pre-submit checks, making sure user doesn't exist (BUT accept existing user)
  * Make a little writeup to what happens in facebook and localstorage
  * Make sure error messages etc. are 100% OK
  * Use sessions to set the type of response to get from authentication, json/redirect/close

  AUTHENTICATION:
  * Make a new widget to allow authentication rather than registration

  RECOVERY
  * Make a new widget to allow recovery from ANY type



*/
define([
   "dojo/_base/declare",
   "dojo/when",
   "dojo/store/Observable",
   "dojo/topic",
   "dojo/on",
   "dojo/_base/lang",
   "dojo/dom-construct",
   "dojo/dom-style",
   "dojo/dom-class",
   "dojo/dom-attr",
   "dojo/aspect",
   "dojo/request",

   "dijit/_WidgetBase",
   "dijit/_TemplatedMixin",
   "dijit/_WidgetsInTemplateMixin",
   "dijit/Destroyable",
   "dijit/Dialog",
   "dijit/_OnDijitClickMixin",
   "dijit/focus",
   "dijit/form/Button",
   "dijit/form/ValidationTextBox",

   "dijit/layout/BorderContainer",
   "dijit/layout/StackContainer",
   "dijit/layout/TabContainer",
   "dijit/layout/ContentPane",
   'dijit/_Container',
   'dijit/layout/_ContentPaneResizeMixin',

   'dgrid/List',
   'dgrid/OnDemandList',
   "dgrid/Selection",
   "dgrid/Keyboard",
   "dgrid/util/mouse",
   "dgrid/extensions/DijitRegistry",
   'put-selector/put',

   "hotplate/hotDojoAuth/LogoutButton",
   "hotplate/hotDojoWidgetHooks/_TemplatedHooksMixin",
   "hotplate/hotDojoStores/AppStoreNotify",
   "hotplate/hotDojoWidgets/_OverlayMixin",
   "hotplate/hotDojoWidgets/EditingWidget",
   "hotplate/hotDojoDgridWidgets/EditableList",
   "hotplate/hotDojoDgridWidgets/StoreSelect",
   "hotplate/hotDojoCometMessages/messages",
   "hotplate/hotDojoSubmit/defaultSubmit",
   "hotplate/hotDojoWidgets/BusyButton",
   "hotplate/hotDojoWidgets/ConfirmDialog",
   "hotplate/hotDojoWidgets/TempDialog",
   "hotplate/hotDojoStores/stores",

   // "app/widgets/SearchPage",

   ], function(
     declare
     , when
     , Observable
     , topic
     , on
     , lang
     , domConstruct
     , domStyle
     , domClass
     , domAttr
     , aspect
     , request

     , _WidgetBase
     , _TemplatedMixin
     , _WidgetsInTemplateMixin
     , Destroyable
     , Dialog
     , _OnDijitClickMixin
     , focusUtil
     , Button
     , ValidationTextBox

     , BorderContainer
     , StackContainer
     , TabContainer
     , ContentPane
     , _Container
     , _ContentPaneResizeMixin

     , List
     , OnDemandList
     , Selection
     , Keyboard
     , mouse
     , DijitRegistry
     , put

     , LogoutButton
     , _TemplatedHooksMixin
     , dummy
     , _OverlayMixin
     , EditingWidget
     , EditableList
     , StoreSelect
     , messages
     , ds
     , BusyButton
     , ConfirmDialog
     , TempDialog
     , stores

 ){

  var StrategyManagers = {};
    
  var LoginManager = declare([ _WidgetBase, _Container, _ContentPaneResizeMixin ], {

    strategyManagerWidgets: {}, 
    strategyIds: [], 

    store: null,

    constructor: function( params ){

      var self = this;

      self.strategyManagerWidgets = {};
    },

    postCreate: function(){
      var self = this;

      var resultSet;


      // TODO: If things go wrong, use overlay to cover things up.
      // Use overlay mixin to do this


      // Gets all of the user's strategies, in order to render
      // the Strategy managers property
      resultSet = self.store.query( {} );
      resultSet.then( function( strategyDataList ){
        
        // Add a strategy manager for each managed strategy
        self.strategyIds.forEach( function( strategyId ){
          var StrategyManager = StrategyManagers[ strategyId ];
          var strategyData = strategyDataList.filter( function( o ) { return o.strategyId == strategyId } )[0];
          var strategyManagerWidget;

          self.strategyManagerWidgets[ strategyId ] = strategyManagerWidget = new StrategyManager( { store: self.store, strategyData: strategyData, resultSet: resultSet });
          strategyManagerWidget.startup();
          self.addChild( strategyManagerWidget );
        });

        console.log( self.strategyStatuses );
        
        });

    }

  });

  var _HotLoginButtonMixin = declare( null, {

    strategyData: {},
    resultSet: [],

    constructor: function( params ){
      var self = this;

      //  Create attributes that are local to the object
      self.strategyData = params.strategyData;
      self.resultSet = params.resultSet;

      // Observe the result set. If things change, the object
      // will update its internal values (`active` and `strategyData`) accordingly
      self.resultSet.observe( function( object, removeFrom, insertedInto ) {

        if( object.strategyId === self.strategyId ){

          // It's a deletion
          if( removeFrom != -1 && insertedInto == -1 ){
            self.set( 'active', false );
            self.set( 'strategyData', null );
          }

          // It's a addition
          if( removeFrom == -1 && insertedInto != -1 ){
            self.set( 'active', true );
            self.set( 'strategyData', object );
          }

          // It's an edit
          if( removeFrom == -1 && insertedInto == -1 ){
            self.set( 'strategyData', object );
          }
        }

      }, true );
    },


    postCreate: function(){
      var self = this;
      
      if( self.strategyData ) self.set( 'active', true );
    },

    baseClass: 'login-button-div',

    // When set as "active", it will give visual feedback 
    _setActiveAttr: function( value ){
      console.log("ACTIVE SET FOR LOCAL: " + value );
      this._set( 'active', value );
      
      if( value ){
        domClass.add( this.accessIcon, 'status-on' );
        domClass.remove( this.accessIcon, 'status-off' );
      } else {
        domClass.add( this.accessIcon, 'status-off' );
        domClass.remove( this.accessIcon, 'status-on' );
      }
    }, 

  });

  StrategyManagers.local = declare( [ _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, _HotLoginButtonMixin ], {
    templateString: '<div><div class="login-button" data-dojo-type="dijit/form/Button" data-dojo-attach-point="button" data-dojo-props="iconClass: \'login-button-local\'"></div><div class="status-off" data-dojo-attach-point="accessIcon"></div></div>',

    strategyId: 'local',

    credentials: {},

    /*
    _setCredentials: function( credentials ){

      // Sets credentials.login and credentials.password
      self.credentials = { login: '', password: '' };
      if( credentials ) {
        self.credentials.login = credentials.field1;
        self.credentials.password = credentials.field2;
      } 

    },
    */

    constructor: function( params ){
      var self = this;

      // Sets self.credentials based on the passed StrategyData
      // self._setCredentials( params.strategyData );
       
    },

    postCreate: function(){
      this.inherited( arguments );

      var self = this;

      var F = declare( [ _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin ] , { 
          
        templateString: jade.compile( '' +
                    'div\n' +
                    '  div\n' +
                    '    form( data-dojo-type="dijit/form/Form", data-dojo-attach-point="formWidget")\n' +
                    '      label( for="${id}_login") Login\n' +
                    '      input( name="username", id="${id}_login", value="${login}", data-dojo-type="dijit/form/ValidationTextBox", data-dojo-props="required:true, validator:sharedFunctions.hotCoreCommonValidators.login, invalidMessage:sharedFunctions.hotCoreCommonValidators.login(false)")\n' +
                    '      label( for="${id}_password") Password\n' +
                    '      input( type="password", name="password", id="${id}_password", value="${password}", data-dojo-attach-point="password", data-dojo-type="hotplate/hotDojoAuth/ValidationPassword" )\n' +
                    '      input.form-submit(type="submit",data-dojo-attach-point="buttonWidget", data-dojo-type="hotplate/hotDojoWidgets/BusyButton", label="Go")\n' +
                    '' )(),
      });



      self.button.on('click', function( e ){

        // Make up the constructor parameters for the form
        var cp = { login: '', password: '' };
        if( self.strategyData ) cp = { login: self.strategyData.field1, password: self.strategyData.field2 };

        var f = new F( cp ) ;
        var d = new TempDialog();
        d.addChild( f );
        d.startup();
        //f.formWidget.on( 'submit', ds.defaultSubmit( f.formWidget, f.buttonWidget, function(){
        f.formWidget.on( 'submit', function( e ){
          
          f.buttonWidget.cancel();
          console.log( f.formWidget.get('value') );
          request.post('/auth/add/local', { data: f.formWidget.get('value') } ).then(
            function( res ){
              // Pre-emptive changes to self.strategydata
              console.log(  f.formWidget.get('value') );
              self.strategyData.field1 = f.formWidget.get('value').username;
              self.strategyData.field2 = f.formWidget.get('value').password;

              d.hide();
            },
            function( err ){
                
              var message;

              // Try to get a nice message from err.response.data,
              // if not revert to err.message   
              if( typeof( err.response.data ) === 'string' ){
                try {
                  err.response.data = JSON.parse( err.response.data );
                } catch( e ) {};

                if( typeof( err.response.data ) === 'object' ){
                  message = err.response.data.message;
                } else {
                  message = err.message;
                }                
              } else {
                message = err.message;
              }

              // Give out the alert
              alert( message );

            }
          );

          return false;
        //})); 
        }); 

 
 
        /*
        if( ! self.strategyData ){

          window.open('/auth/add/local', '', 'width=800, height=600');

        } else {


          var myDialog = new ConfirmDialog({
            title: "Unlink your Facebook accont?",
            content: "Are you sure you want to unlink your Facebook account?",
          });
          myDialog.startup();
          myDialog.on( 'dialogconfirmed', function( e ){
            self.store.remove( self.strategyData._id ).then(
              function( r ){
                self.strategyData = null;
              },
              function( err ){
                (new ConfirmDialog( { cancelButton: false, title: "Failed", content: "Operation failed" })).startup();
              }
            );
          });


        }
        */


      });
    },

  });

  StrategyManagers.facebook = declare( [ _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin, _HotLoginButtonMixin ], {
    templateString: '<div><div class="login-button" data-dojo-type="dijit/form/Button" data-dojo-attach-point="button" data-dojo-props="iconClass: \'login-button-facebook\'"></div><div class="status-off" data-dojo-attach-point="accessIcon"></div></div>',

    strategyId: 'facebook',

    postCreate: function(){
      this.inherited( arguments );

      var self = this;

      self.button.on('click', function( e ){

        if( ! self.strategyData ){

          window.open('/auth/add/facebook', '', 'width=800, height=600');

        } else {


          var myDialog = new ConfirmDialog({
            title: "Unlink your Facebook accont?",
            content: "Are you sure you want to unlink your Facebook account?",
          });
          myDialog.startup();
          myDialog.on( 'dialogconfirmed', function( e ){
            self.store.remove( self.strategyData._id ).then(
              function( r ){
                self.strategyData = null;
              },
              function( err ){
                (new ConfirmDialog( { cancelButton: false, title: "Failed", content: "Operation failed" })).startup();
              }
            );
          });


        }
      });




    },

  });




  return LoginManager;
});





/*





          this.userStrategiesList = new EditableList({ 

            refreshOnSubmit: false,

            className: 'category-list',

            ListConstructor: declare( [ OnDemandList, Selection, Keyboard, DijitRegistry ], {

              renderRow: function(object, options){
                var row = put('div.row', object.strategyId );
                return row;
              },

              postCreate: function(){
                var self = this;
                this.inherited(arguments);
                this.set( 'queryOptions', { placeNew: 'last' } );

              }

            }),

            storeName: 'userStrategies',
            store: stores( 'userStrategies', { userId: globals.userId } ),
            addingWidgetRegion: 'top',
            gutters: false,

            buttonsPosition: 'after', // or "top" or "bottom"

            ButtonsConstructor: declare( [ ButtonsConstructor ], {
              templateString: ''+
                              '<div>\n'+
                              
                              '  <div data-dojo-type="dijit/form/Button" data-dojo-attach-point="deleteButtonWidget" data-dojo-props="label:\'Del\'"></div>\n'+
                              '</div>\n'+
                              '',

              postCreate: function(){
                var self = this;

                this.inherited(arguments);

                self.deleteButtonWidget.on('click', function(e){
                  var row = self.listWidget.row( self.listWidget._buttonsRowId );
                  self.listWidget._deleteRow( row );
                });

              },            
 
            }),

          }, this.listNode2 );

          this.userStrategiesList.startup();


       
          this.strategiesList = new EditableList({ 

            refreshOnSubmit: false,

            className: 'category-list',

            ListConstructor: declare( [ OnDemandList, Selection, Keyboard, DijitRegistry ], {

              renderRow: function(object, options){
                var row = put('div.row', object.strategyId );
                return row;
              },

              postCreate: function(){
                var self = this;
                this.inherited(arguments);
                this.set( 'queryOptions', { placeNew: 'last' } );

              }

            }),

            storeName: 'authStrategies',
            store: stores( 'authStrategies' ),
            addingWidgetRegion: 'top',
            gutters: false,

            buttonsPosition: 'after', // or "top" or "bottom"

            ButtonsConstructor: declare( [ ButtonsConstructor ], {
              templateString: ''+
                              '<div>\n'+
                              
                              '  <div data-dojo-type="dijit/form/Button" data-dojo-attach-point="loginButtonWidget, focusNode" data-dojo-props="label:\'Add\'"> </div>\n'+
                              '</div>\n'+
                              '',

              postCreate: function(){
                var self = this;

                this.inherited(arguments);


                self.localFormNew = declare( [_WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin ], {
                  templateString: jade.compile( '' +
                    'div\n' +
                    '  div\n' +
                    '    form( data-dojo-type="dijit/form/Form", data-dojo-attach-point="formWidget")\n' +
                    '      label( for="${id}_login") Login\n' +
                    '      input( name="username", id="${id}_login", value="${field1}", data-dojo-type="dijit/form/ValidationTextBox", data-dojo-props="required:true, validator:sharedFunctions.hotCoreCommonValidators.login, invalidMessage:sharedFunctions.hotCoreCommonValidators.login(false)")\n' +
                    '      label( for="${id}_password") Password\n' +
                    '      input( type="password", name="password", id="${id}_password", value="${field2}", data-dojo-attach-point="password", data-dojo-type="hotplate/hotDojoAuth/ValidationPassword" )\n' +
                    '      input.form-submit(type="submit",data-dojo-attach-point="buttonWidget", data-dojo-type="hotplate/hotDojoWidgets/BusyButton", label="Go")\n' +
                    '' )(),
                  field1: '',
                  field2: '',
                  alertBarDomPlacement: 'last',
                  postCreate: function(){
                    var self = this;
 
                    this.formWidget.on('submit', ds.defaultSubmit( self.formWidget, self.buttonWidget, function(){
                      console.log("SUBMITTED");
                      self.buttonWidget.cancel();
                        console.log( self.formWidget.get('value') );
                        request.post('/auth/add/local', { data: self.formWidget.get('value') } ).then(
                          function( res ){
                            console.log( res );
                          },
                          function( err ){
                            console.log( err );
                          }
                        );

                    } ));

                    

                  }
                });

                self.loginButtonWidget.on('click', function(e){
                  var row = self.listWidget.row( self.listWidget._buttonsRowId );
                  console.log("FETCHED ROW IS:");
                  console.log( row );
                  switch( row.data.strategyId){
                    case 'facebook':
                      window.open('/auth/add/facebook', '', 'width=800, height=600');
                    break;

                    case 'local':

                      

                      var localForm = new self.localFormNew( { field1: '', field2: '' } );
                      localForm.startup();

                      var MyDialog = declare( [ Dialog ], {
                        hide: function(){
                          var self = this;
                          self.inherited( arguments ).then( function(){
                             self.destroyRecursive();
                          } );
                        },
                      });
                      self.inputDialog = new MyDialog();
                      self.inputDialog.startup();


                      self.inputDialog.addChild( localForm );
                      self.inputDialog.show();
                    break;

                  }
                });


              },            
 
            }),

          }, this.listNode3 );

          this.strategiesList.startup();
       





          this.editableList = new EditableList({ 

            refreshOnSubmit: false,

            className: 'category-list',

            ListConstructor: declare( [ OnDemandList, Selection, Keyboard, DijitRegistry ], {

              renderRow: function(object, options){
                var row = put('div.row', object.name + ' ' + object._id + ' ' + counter++ );
                return row;
              },

              postCreate: function(){
                var self = this;
                this.inherited(arguments);
                this.set( 'queryOptions', { placeNew: 'last' } );
                // this.set( 'queryOptions',{ before: { _id: '514aba99849418630e0001b8' }  } );
                // this.set( 'queryOptions', { placeNew: 'none', sort: [ { attribute:'name' } ]  } );
                // this.set( 'queryOptions',{ placeNew: 'last' } );
                // this.set( 'queryOptions',{ before: null  } );
              }

            }),

            EditingConstructor: declare([ EditingWidget ], {
              templateString: jade.compile( '' +
                'div\n' +
                '  div.inline-form\n' +
                '    form( data-dojo-type="dijit/form/Form", data-dojo-attach-point="formWidget", method="POST" )\n' +
                '      .inputfield\n' +
                '        input( id="${id}_Name", name="name", data-dojo-type="dijit/form/ValidationTextBox", style="width:100%;", maxlength="50", data-dojo-props="required:true", data-dojo-attach-point="nameWidget" )\n' +
                '        input.form-submit(type="submit",data-dojo-attach-point="buttonWidget", data-dojo-type="hotplate/hotDojoWidgets/BusyButton", label="Update")' +
                '' )(),
                alertBarDomPlacement: 'last',
                startup: function(){
                  this.inherited(arguments);
                  this.nameWidget.focus();
                },

            }),

            AddingConstructor: declare([ EditingWidget ], {
              templateString: jade.compile( '' +
                'div\n' +
                '  div.inline-form\n' +
                '    form( data-dojo-type="dijit/form/Form", data-dojo-attach-point="formWidget", method="POST" )\n' +
                '      .inputField\n' +
                '        input(  id="${id}_Name", name="name", data-dojo-type="dijit/form/ValidationTextBox", style="width:100%", maxlength="50", data-dojo-props="required:true", data-dojo-attach-point="nameWidget" )\n' +
                '        input.form-submit(type="submit", style="width:5%;padding-left: 10px;",data-dojo-attach-point="buttonWidget", data-dojo-type="hotplate/hotDojoWidgets/BusyButton", label="Add")' +
                '' )(),
                resetOnSuccess: true,
                alertBarDomPlacement: 'last',
            }),

            storeName: 'categories',
            store: stores( 'categories', { workspaceId: globals.workspaceId } ),
            editingWidgetPlacement: 'inline',
            multipleEditingAllowed: true,
            addingWidgetRegion: 'top',
            gutters: false,

            buttonsPosition: 'after', // or "top" or "bottom"

            ButtonsConstructor: declare( [ ButtonsConstructor ], {
              templateString: ''+
                              '<div>\n'+
                              
                              '  <div data-dojo-type="dijit/form/Button" data-dojo-attach-point="editButtonWidget, focusNode" data-dojo-props="label:\'Edit\'"> </div>\n'+
                              '  <div data-dojo-type="dijit/form/Button" data-dojo-attach-point="deleteButtonWidget" data-dojo-props="label:\'Del\'"></div>\n'+
                              '  <button data-dojo-type="dijit/form/DropDownButton" data-dojo-props="iconClass:\'dijitEditorIcon dijitEditorIconCut\',labelll:\'AND\'">\n'+
                              '     <span>Edit<b>!</b></span>\n'+
                              '       <span id="editMenu" data-dojo-type="dijit/Menu" >\n'+
                              '         <span id="cut" data-dojo-type="dijit/MenuItem" data-dojo-props="iconClass:\'dijitEditorIcon dijitEditorIconCut\'">Cut</span>\n'+
                              '         <span id="paste" data-dojo-type="dijit/MenuItem" data-dojo-attach-point="otherButton" data-dojo-props="iconClass:\'dijitEditorIcon dijitEditorIconPaste\'">Paste</span>\n'+
                              '       </span>\n'+
                              '     </span>\n'+
                              '  </button>\n'+
                              '</div>\n'+
                              '',

              postCreate: function(){
                var self = this;

                this.inherited(arguments);

                self.editButtonWidget.on('click', function(e){
                  var row = self.listWidget.row( self.listWidget._buttonsRowId );
                  self.listWidget._editRow( row );
                });

                self.deleteButtonWidget.on('click', function(e){
                  var row = self.listWidget.row( self.listWidget._buttonsRowId );
                  self.listWidget._deleteRow( row );
                });

                self.otherButton.on('click', function(e){
                  var row = self.listWidget.row( self.listWidget._buttonsRowId );
                  alert("AH! " + row.id );
                });
              },            
 
            }),

          //}, this.listNode );
          } );

          this.editableList.startup();
       

          this.storeSelect =  new StoreSelect( {
            storeName: 'categories',
            store: stores( 'categories', { workspaceId: globals.workspaceId } ),
            baseClass: 'category-picker',
            query: { name: "O" },
            queryOptions: { placeNew: 'last' },
            renderRow: function( object ){
              var row = put('div.row', object.name );
              return row;
            },
            value: '514c6edcbbd8ca9f680000b2',
          }, this.selectNode);



          this.storeSelect.startup();
        },

   });

  return Dashboard;

});

 */
