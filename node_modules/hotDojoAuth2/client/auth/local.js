/*

  TODO:
  * Check that login box greys out when updated
*/

define([
   "dojo/_base/declare",
   "dojo/dom-style",
   "dojo/request",

   "dijit/_WidgetBase",
   "dijit/_TemplatedMixin",
   "dijit/_WidgetsInTemplateMixin",
   "dijit/_OnDijitClickMixin",

   "hotplate/hotDojoWidgets/_OverlayMixin",
   "hotplate/hotDojoSubmit/defaultSubmit",
   "hotplate/hotDojoWidgets/BusyButton",
   "hotplate/hotDojoWidgets/TempDialog",
   "hotplate/hotDojoAuth/ValidationUsername",

   "../buttons/_Button",
   "../buttons/_ManagerButton",

   ], function(
     declare
     , domStyle
     , request

     , _WidgetBase
     , _TemplatedMixin
     , _WidgetsInTemplateMixin
     , _OnDijitClickMixin

     , _OverlayMixin
     , ds
     , BusyButton
     , TempDialog
     , ValidationUsername

     , _Button
     , _ManagerButton

 ){

  var ret = {};

  ret.SignIn = declare( [ _Button ], {
    strategyId: 'local',
    
  });


  ret.Recover = declare( [ _Button ], {
    strategyId: 'local',
    

  });

  ret.Register = declare( [ _Button ], {
    strategyId: 'local',

  });


  ret.Manager = declare( [ _ManagerButton ], {

    strategyId: 'local',

    postCreate: function(){
      this.inherited( arguments );

      var self = this;

      var F = declare( [ _WidgetBase, _TemplatedMixin, _WidgetsInTemplateMixin ] , { 
          
        templateString: jade.compile( '' +
          'div\n' +
          '  div\n' +
          '    form( data-dojo-type="dijit/form/Form", data-dojo-attach-point="formWidget")\n' +
          '      label( for="${id}_login") Login\n' +
          '      input( name="login", id="${id}_login", value="${login}", data-dojo-type="hotplate/hotDojoAuth/ValidationUsername", data-dojo-attach-point="login", data-dojo-props="alwaysOk: \'${login}\', required: true, ajaxOkWhen:\'absent\', ajaxInvalidMessage:\'Login name taken!\'")\n' +
          '      label( for="${id}_password") Password\n' +
          '      input( type="password", name="password", id="${id}_password", value="${password}", data-dojo-attach-point="password", data-dojo-type="hotplate/hotDojoAuth/ValidationPassword" )\n' +
          '      input.form-submit(type="submit",data-dojo-attach-point="buttonWidget", data-dojo-type="hotplate/hotDojoWidgets/BusyButton", label="Go")\n' +
          '  button(data-dojo-attach-point="deleteButtonWidget", data-dojo-type="hotplate/hotDojoWidgets/BusyButton", label="Delete" )\n' +
          '' )(),
      });


      self.button.on('click', function( e ){

        // Make up the constructor parameters for the form
        var cp = { login: '', password: '' };
        if( self.strategyData ) cp = { login: self.strategyData.field1.toLowerCase(), password: self.strategyData.field2 };

        var f = new F( cp ) ;
        if( ! self.strategyData ){
          domStyle.set( f.deleteButtonWidget.domNode, 'display', 'none' );
        }
        var formDialog = new TempDialog();
        formDialog.addChild( f );
        formDialog.startup();

        f.formWidget.on( 'submit', ds.defaultSubmit( f.formWidget, f.buttonWidget, function(){
        //f.formWidget.on( 'submit', function( e ){
          
          f.buttonWidget.cancel();
          var data = f.formWidget.get('value');
          data.responseType = 'ajax';
          request.post('/auth/add/local', { data: data } ).then(
            function( res ){
              try {
                res = JSON.parse( res );
              } catch( e ) {};

              // Pre-emptive changes to self.strategydata, so that the data is editable
              // straight away
              self.strategyData = {};
              self.strategyData.field1 = f.formWidget.get('value').login.toLowerCase();
              self.strategyData.field2 = f.formWidget.get('value').password;
              self.strategyData[ self.store.idProperty ] = res.user[ 'userStrategiesId' ];

              // Update what's "always OK" for the validator call. Not strictly
              // necessary as the form will close.
              f.login.alwaysOk = f.formWidget.get('value').username;

              // That's all

              formDialog.hide();
            },
            function( err ){
              self._displayError( err );
            }
          );

          return false;
        })); 
        //}); 


        f.deleteButtonWidget.on( 'click', function( e ){
          self._deleteStrategyData( "Delete credentials?", "Are you sure you want to invalidate your login/password credentials?" ).then(
            function( res ){
              formDialog.hide();
            }
          );
        });


      });
    },

  });

  return ret;
});





