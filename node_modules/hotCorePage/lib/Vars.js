"use strict";
/*!
 * Module dependencies.
 */

var dummy
  , hotplate = require('hotplate')
;

/**
 * Csses constructor.
 *
 * An object to which you can add variables to, and render them
 *
 * @api public
 */

function Vars( ){
  this.vars = {};
  this.Vars = Vars;
}

/**
 * The exports object is the object's constructor
 *
 * @api public
 */

module.exports = exports = Vars;


/**
 * Variable rendering function.
 *
 * This will return a string which can be dropped into the HEAD of an HTML page.
 * The returned string is javascript code which will create a global variable "vars"
 * with all the values assigned to it.
 *
 * @api public
 */

Vars.prototype.render = function(){

  // FIXME: Check that this is enough to avoid _all_ possible problems
  function makeSaneUNUSED(k, s){
    // return s;
    if (typeof(s) === "string") {
    var p = String(s)
    //.replace(/&(?!\w+;)/g, '&amp;')
    //.replace(/</g, '&lt;')
    //.replace(/>/g, '&gt;')
    //.replace(/"/g, '&quot;');
    // .replace(/\//g, "\\");
    .replace(/\//g, '\/');
    return p
    } else {
      return s;
    }
  }

  var r = '';


  r += '<script type="text/javascript">vars = typeof(vars) !== \'undefined\' ? vars : {};</script>' + "\n";
  r += '<script type="text/javascript">';
  for(var module in this.vars){
    var vm = 'vars[\'' + module + '\']';
    r += vm + ' = ' + vm + ' || {};';
    this.vars[module].forEach( function(v) {
      var vn = vm + '[\'' + v.name + '\']';
      if( typeof( v.value ) !== 'undefined' )
        r += vn + ' = ' + JSON.stringify(v.value).replace(/\//g,'\\/').replace(/\$/g, '$$$$') + ';'; // TODO: CHECK THAT IT'S GOOD
      else
        console.log("PROBLEM: undefined " + v.name );

    });
  };

  r += '</script>' + "\n";
  return r;
}

/**
 * Add a variable
 *
 * @param {String} The module's name
 * @param {String} A variable's name
 * @param {String} A variable's value
 * @return {Csses} this
 * @api public
 */

Vars.prototype.add = function(module, name, value  ){
  this.vars[module] = this.vars[module] || [];
  this.vars[module].push( { name: name, value: value } );

  return this;
}


