"use strict";

/* TODO:

  * Make body configurable so that things are appended to it within the <body> tag MAYBE turn body into object, deciding style, id, etc.?
  * Turn title into an object as well for consistency
  * Fix problem where if a variable is set as [[CSSES]] the whole thing explodes
*/

/*!
 * Module dependencies.
 */

var dummy
, hotplate = require('hotplate')

, Vars = require('./Vars.js')
, Csses = require('./Csses.js')
, Jses = require('./Jses.js')
, HeadLines = require('./HeadLines.js')
;


// Exports the element constructors as well
exports.Vars = Vars;
exports.Csses = Csses;
exports.Jses = Jses;
exports.HeadLines = HeadLines;

var hotCorePage = exports;

hotplate.config.set('hotCorePage.pageTemplate', "<!DOCTYPE HTML>\n<html>\n<head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>[[TITLE]]</title>\n[[HEADLINES]]\n[[VARS]]\n[[CSSESS]]\n[[JSES]]\n</head>\n[[BODY]]\n</html>\n");

// This function will get the keys `jses`, `csses`, `vars` and `headLines` of
// the object `elements` and will enrich them with what's in `results`

function enrichElementsWithHookResults( elements, results ) {

  // Everything in `elements` needs to be set properly
  elements.jses = elements.jses ? elements.jses : new hotCorePage.Jses;
  elements.csses = elements.csses ? elements.csses : new hotCorePage.Csses;
  elements.vars = elements.vars ? elements.vars : new hotCorePage.Vars;
  elements.headLines = elements.headLines ? elements.headLines : new hotCorePage.HeadLines;

  elements.body = elements.body ? elements.body : '';
  elements.title = elements.title ? elements.title : '';
 
  results.forEach( function(element) {
    var moduleName = element.module;
    var result = element.result;

    for( var type in result){
      switch( type ) {

      case 'headLines':
          result[ type ].forEach( function( element ) {
            elements.headLines.add( moduleName, element );
          });
        break;

        case 'vars':
          result[ type ].forEach( function( element ) {
            elements.vars.add( moduleName, element.name, element.value );
          });
        break;

        case 'jses':
         result[ type ].forEach( function( element ) {
            elements.jses.add( moduleName, element );
          });
        break;

          case 'csses':
          result[ type ].forEach( function( element ) {
            elements.csses.add( moduleName, element );
          });
        break;

        case 'title':
           elements.title += result[ type ];
        break;

        case 'body':
           elements.body += result[ type ];
        break;

      }
    }
  });
}


function replacePageElements(r, elements){

  if( elements.headLines ){
    var headLines = elements.headLines.render().replace(/\$/g, '$$$$');
    r = r.replace('[[HEADLINES]]',  headLines );
  }
  if( elements.vars){
    var vars = elements.vars.render().replace(/\$/g, '$$$$');
    r = r.replace('[[VARS]]',  vars );
  }

  if( elements.csses ){
    var csses = elements.csses.render().replace(/\$/g, '$$$$');
    r = r.replace('[[CSSESS]]',  csses );
  }

  if( elements.jses ){
    var jses = elements.jses.render().replace(/\$/g, '$$$$');
    r = r.replace('[[JSES]]',  jses );
  }

  if( elements.title ){
    var title = elements.title.replace(/\$/g, '$$$$');
    r = r.replace('[[TITLE]]', title );
  }

  if( elements.body ){
    var body = elements.body.replace(/\$/g, '$$$$');
    r = r.replace('[[BODY]]',  body );
  }

  return r;
}


var acquireElements = exports.acquireElements = function( parameterElements, req, pageName, done ){

  var parameterElements = parameterElements || {};
  var r;
  var elements = {};


  // Get the pageElement elements
  hotplate.hotEvents.emit( 'pageElements', function( err, results ){
    if( err ){
      done( err );
    } else {

      enrichElementsWithHookResults( elements, results ); 

      // Get the pageElementsPerPage
      hotplate.hotEvents.emit('pageElementsPerPage', elements, req, pageName, function( err, results ){
        if( err ){
          done( err );
        } else {

          enrichElementsWithHookResults( elements, results );

          // Concatenating whatever was in the command line with the retrieved info
          [ 'vars', 'jses', 'csses', 'headLines' ].forEach( function( type ){
            if( parameterElements[ type ] ) elements[ type ].concat( parameterElements[ type ] );
          });
          parameterElements.body  ? elements.body += parameterElements.body : false;
          parameterElements.title ? elements.title += parameterElements.title : false;

          done( null, elements );
        };
      });
    }
  });
}

var getElementsAsStrings = exports.getElementsAsStrings = function( parameterElements, req, pageName, done ){

  acquireElements( parameterElements, req, pageName, function( err, elements ){
    if( err ){
      done( err );
    } else {
      elements.csses = elements.csses.render();
      elements.jses = elements.jses.render();
      elements.headLines = elements.headLines.render();
      elements.vars = elements.vars.render();

      done( null, elements );
    }
  });

};



// This is the actual API function that is _actually_ exported. It allows developers
// to render a page which will 1) Contain all of the app-wide elements 2) Contain
// any page-wide element possibly injected by other modules 3) Not contain any
// placeholders
exports.processPageTemplate = function( parameterElements, req, pageName, done ) {

  var r;

  //getElementsAsStrings( parameterElements, req, pageName, function( err, elements ){
  //  console.log( '******************************' , elements );
  //});

  acquireElements( parameterElements, req, pageName, function( err, elements ){
    if( err ){
      done( err );
    } else {
      r = replacePageElements( hotplate.config.get( 'hotCorePage.pageTemplate' ), elements );

      done( null, r );
    }
  }); 

}


