"use strict";

/* TODO:
*/

/*!
 * Module dependencies.
 */

var dummy
, hotplate = require('hotplate')

, Vars = require('./Vars.js')
, Csses = require('./Csses.js')
, Jses = require('./Jses.js')
, HeadLines = require('./HeadLines.js')
;


// Exports the element constructors as well
exports.Vars = Vars;
exports.Csses = Csses;
exports.Jses = Jses;
exports.HeadLines = HeadLines;

var hotCorePage = exports;

// page returned by this module
// The basic page template
exports.pageTemplate = "<!DOCTYPE HTML>\n<html>\n<head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /><title>[[TITLE]]</title>\n[[HEAD]]\n</head>\n[[BODY]]\n</html>\n";


var getEnrichedPageTemplate = hotplate.cachable( function( done, enrichedPageTemplate ){

  var moduleName;
  var enrichedPageTemplate;

  // Make up an elements object with the right keys. The objects will
  // later be enriched by `enrichElementsWithHookResults()`
  var elements = {};
  elements.vars = new Vars();
  elements.csses = new Csses();
  elements.jses = new Jses();
  elements.headLines = new HeadLines();

  // Call the hook `pageElements`, which is used for application-wide,
  // always present elements
  hotplate.hotEvents.emit( 'pageElements', function( err, results ){
    if( err ){
      next( err );
    } else {

      // Add files/data to the module's own `jses`, `csses`, `vars` and `headLines` keys
      // in `exports`. 
      enrichElementsWithHookResults( elements, results )
    
      // Change the template so that it renders the newly discovered elements
      // Note that the placeholders are _left_ in the template after replacing so that subsequent
      // calls to `replacePageElements()` will still work.
      enrichedPageTemplate = replacePageElements( exports.pageTemplate, { 
         csses: elements.csses,
         jses: elements.jses,
         vars: elements.vars, 
         headLines: elements.headLines 
      } );
    
      done( null, enrichedPageTemplate );
    }
  });
});



// This function will get the keys `jses`, `csses`, `vars` and `headLines` of
// the object `elements` and will enrich them with what's in `results`

function enrichElementsWithHookResults( elements, results ) {

  // Everything in `elements` needs to be set properly
  elements.jses = elements.jses ? elements.jses : new hotCorePage.Jses;
  elements.csses = elements.csses ? elements.csses : new hotCorePage.Csses;
  elements.vars = elements.vars ? elements.vars : new hotCorePage.Vars;
  elements.headLines = elements.headLines ? elements.headLines : new hotCorePage.HeadLines;
 
  results.forEach( function(element) {
    var moduleName = element.module;
    var result = element.result;

    for( var type in result){
      switch( type ) {

        case 'jses':
         result[ type ].forEach( function( element ) {
            elements.jses.add( moduleName, element );
          });
        break;

        case 'headLines':
          result[ type ].forEach( function( element ) {
            elements.headLines.add( moduleName, element );
          });
        break;

        case 'csses':
          result[ type ].forEach( function( element ) {
            elements.csses.add( moduleName, element );
          });
        break;

        case 'vars':
          result[ type ].forEach( function( element ) {
            elements.vars.add( moduleName, element.name, element.value );
          });
        break;

        case 'body':
           elements.body = result[type];
        break;

      }
    }
  });
}


function replacePageElements(r, elements){

  // Replace the elements: csses, jses and vars will go where [[HEAD]] is,
  // the title will go wheer [[TITLE]] is, the body where [[BODY]] is
  /*if ( elements.headLines ) r = r.replace(/(\[\[HEAD\]\])/,  elements.headLines.render() + '$1' );
  if ( elements.vars)       r = r.replace(/(\[\[HEAD\]\])/,  elements.vars.render() + '$1' );
  if ( elements.csses )     r = r.replace(/(\[\[HEAD\]\])/,  elements.csses.render() + '$1' );
  if ( elements.jses )      r = r.replace(/(\[\[HEAD\]\])/,  elements.jses.render() + '$1' );

  if ( elements.title ) r = r.replace(/(\[\[TITLE\]\])/, elements.title + '$1' );
  if ( elements.body )  r = r.replace(/(\[\[BODY\]\])/,  elements.body + '$1' ); */


  if( elements.headLines ){
    var headLines = elements.headLines.render().replace(/\$/g, '$$$$');
    r = r.replace('[[HEAD]]',  headLines + '[[HEAD]]' );
  }
  if( elements.vars){
    var vars = elements.vars.render().replace(/\$/g, '$$$$');
    r = r.replace('[[HEAD]]',  vars +      '[[HEAD]]' );
  }

  if( elements.csses ){
    var csses = elements.csses.render().replace(/\$/g, '$$$$');
    r = r.replace('[[HEAD]]',  csses +     '[[HEAD]]' );
  }

  if( elements.jses ){
    var jses = elements.jses.render().replace(/\$/g, '$$$$');
    r = r.replace('[[HEAD]]',  jses +      '[[HEAD]]' );
  }

  if( elements.title ){
    var title = elements.title.replace(/\$/g, '$$$$');
    r = r.replace('[[TITLE]]', title + '[[TITLE]]' );
  }

  if( elements.body ){
    var body = elements.body.replace(/\$/g, '$$$$');
    r = r.replace('[[BODY]]',  body +  '[[BODY]]' );
  }

  return r;
}


// This is the actual API function that is _actually_ exported. It allows developers
// to render a page which will 1) Contain all of the app-wide elements 2) Contain
// any page-wide element possibly injected by other modules 3) Not contain any
// placeholders
exports.processPageTemplate = function( elements, req, pageName, done ) {

  elements = elements || {};
  var r;

  getEnrichedPageTemplate( function( err, enrichedPageTemplate ){
    if( err ){
      done( err );
    } else {

      // There is a callback: check for last minute additions to the page, and then call the callback
      // with "r" being the enhanced page

      hotplate.hotEvents.emit('pageElementsPerPage', elements, req, pageName, function( err, results ){
        if( err ){
          done( err );
        } else {
          enrichElementsWithHookResults( elements, results )
          r = replacePageElements( enrichedPageTemplate, elements );
          r = cleanupPageElements( r );
          done( null, r );
        }
      });
    }
  });


}

// Clean up placeholders
function cleanupPageElements( r ){
  return r.replace(/\[\[(HEAD|TITLE|BODY)\]\]/g, '');
}



