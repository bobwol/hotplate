var dummy
  , hotplate = require('hotplate')

  , e = require('allhttperrors')

  , Schema = require('simpleschema')
  , MongoSchemaMixin = require('simpleschema/MongoSchemaMixin.js')

  , Store = require('jsonreststores')
  , MongoDriverMixin = require('jsonreststores/MongoDriverMixin.js')

  , declare = require('simpledeclare')
;



// Define store and mongo drivers.

var app = hotplate.app;

var hooks = exports.hotHooks = {}

hooks.init = function( done ){
  done( null );
}

hooks.run = function( done ){

  var hotCoreJsonRestStores = hotplate.getModule( 'hotCoreJsonRestStores' );

  Store = declare.mixin( Store, [ MongoDriverMixin, hotCoreJsonRestStores.StoreMixin ] );
  Schema = declare.mixin( Schema, [ MongoSchemaMixin, hotCoreJsonRestStores.SchemaMixin ] );

  // ***********************************
  // *** WORKSPACES ********************
  // ***********************************


  var Workspaces = declare( Store, {

    // COMMON
    schema: new Schema({
      _id: { type: 'id' },
      workspaceName: { type: 'string', searchable: true, searchPartial: false,
                       sortable: false, notEmpty: true, sharedValidator: 'workspace', trim: 20 },
    }),

    handlePut: true,
    handlePost: true,
    handleGet: true,
    handleGetQuery: true,
    handleDelete: true,

    storeName:  'Workspaces',
    paramIds: [ '_id' ],
  });

  Users.onlineAll( app, '/workspaces/', ':_id' );


  // The basic schema for the WorkspaceUsers table
  var WorkspacesUsersBase = declare( Store, {

    schema: new Schema({
      userId:      { type: 'id' },
      workspaceId: { type: 'id' },
      _id:         { type: 'id' },
    }),

    collectionName: 'WorkspacesUsers',
    paramIds: [ '_id' ],
  });


  var WorkspaceUsers = declare( WorkspacesUsersBase, {
    handlePut: false,
    handlePost: true,
    handleGet: false,
    handleGetQuery: true,
    handleDelete: true,

    searchSchema: new Schema({
      workspaceId: { type: 'id' },
      userId:      { type: 'id' },
      _id:         { type: 'id' },
    }),

    storeName:  'WorkspaceUsers',
    paramIds: [ 'workspaceId', '_id' ],
  });
  WorkspaceUsers.onlineAll( app, '/workspaceUsers/:workspaceId/', ':_id' );

  var UserWorkspaces = declare( WorkspacesUsersBase, {

    handlePut: false,
    handlePost: true,
    handleGet: true,
    handleGetQuery: true,
    handleDelete: true,

    searchSchema: new Schema({
      userId:      { type: 'id' },
      workspaceId: { type: 'id' },
      _id:         { type: 'id' },
    }),

    storeName:  'UserWorkspaces',
    paramIds: [ 'userId', '_id' ],
  });

  UserWorkspaces.onlineAll( app, '/userWorkspaces/:userId/', '_id' );

  done( null );
}

hooks.stores = function( done ){
  done( null, {

    /*
    userStrategies     : { target: '/userStrategies/:userId/',         idProperty: '_id', sortParam: 'sortBy', },
    authStrategies     : { target: '/authStrategies/',                 idProperty: 'strategyId', sortParam: 'sortBy', },
    userLogins         : { target: '/userLogins/',                     idProperty: '_id', sortParam: 'sortBy', },
    */

  });
}







/*
hooks.init = function( done ){

  // Middleware parameters that set req.application
  app.param( 'workspaceIdPages', paramWorkspaceIdPages);     // Used by /ws/WORKSPACEID
  app.param( 'tokenCall',        paramTokenCall);            // Used by API calls
  app.param( 'workspaceId',      paramWorkspaceIdCall);      // Used by API calls

  done( null );
}



hooks.run = function( done ){


  // Calls to check if users and workspaces are taken
  app.get(  '/call/usersAnon',      getUsersAnon );
  app.get(  '/call/workspacesAnon', getWorkspacesAnon );

  // Calls to actually create workspaces
  app.post( '/call/workspacesAnon', postWorkspacesAnon );
  app.post( '/call/workspacesUser', postWorkspacesUser );

  // Login, logout, recover calls
  app.post( '/call/recoverAnon',    postRecoverAnon );
  app.post( '/call/loginAnon',      postLoginAnon );
  app.get(  '/call/logoutUser',     getLogoutUser );

  done( null );

}

hooks.clientPaths = function( done ){
  done( null, { moduleName: 'hotCoreAuth', result: [ path.join(__dirname, '../client') ] } );
}


hooks.stores = function( done ){
  done( null, {
    usersAnon     : { target: '/call/usersAnon',      idProperty: '_id', sortParam: 'sortBy', },
    workspacesAnon: { target: '/call/workspacesAnon', idProperty: '_id', sortParam: 'sortBy', },

    workspacesUser: { target: '/call/workspacesUser', idProperty: '_id', sortParam: 'sortBy', },

    loginAnon     : { target: '/call/loginAnon',      idProperty: '_id', sortParam: 'sortBy', },
    recoverAnon   : { target: '/call/recoverAnon',    idProperty: '_id', sortParam: 'sortBy', },
    logoutUser    : { target: '/call/logoutUser',     idProperty: '_id', sortParam: 'sortBy', },
  });
}
*/

/*
    driverAllDbFetch: function( params, body, options, cb ){
      var strategies = hotplate.get('hotCoreAuth/strategies');
      var doc;

      // No strategies defined in Hotplate, end of story
      if( typeof( strategies ) === 'undefined' ){
        return cb( null, null );     
      }
 
      // Check if the strategy is one of the ones defined in Hotplate
      if( typeof( strategies[ params[ 'strategyId' ] ] ) !== 'undefined' ){

        // Make up the record
        doc = {}
        doc.strategyId = params[ 'strategyId' ];

        // Check that the strategy is indeed active 
        // for that user, and  if it is, set the "active" flag

        UserStrategies.GetQuery( { filters: { userId: params.userId, strategyId: params.strategyId } }, function( err, res ){
          if( err ){
            cb( err, null );
          } else {
            doc.active = 0;
            doc.field1 = '';
            doc.field2 = '';
            doc.field3 = '';
            doc.field4 = '';
            if( res.length ){
              doc.active = 1;
              doc.field1 = res[0].field1;
              doc.field2 = res[0].field2;
              doc.field3 = res[0].field3;
              doc.field4 = res[0].field4;
            }
            cb( null, doc) ;
          }
          
        });

      } else {
        cb( null, null );
      }

    },
*/


