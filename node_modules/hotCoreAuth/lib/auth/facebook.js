var dummy
  , path = require('path')
  , hotplate = require('hotplate')

  , ObjectId = require('mongowrapper').ObjectId
  , checkObjectId = require('mongowrapper').checkObjectId

  , hat = require('hat')

  , declare = require('simpledeclare')
  , passport = require('passport')
  , FacebookStrategy = require('passport-facebook').Strategy
;



// Define store and mongo drivers.

var app = hotplate.app;

exports = module.exports = function( strategyData,  makeResponder, AuthStrategies, Users, UserStrategies, UserLogins ) {

  // Work out callbackURLBase which needs to be honoured

  var callbackURLBase = '';
  if( typeof( hotplate.get('hotCoreAuth')) === 'object' ){
    callbackURLBase = hotplate.get('hotCoreAuth').callbackURLBase;
  }

  // ***********************
  // *** MANAGER         ***
  // ***********************

  passport.use('facebook-manager', new FacebookStrategy({
    clientID: strategyData.clientID,
    clientSecret: strategyData.clientSecret,
    callbackURL: callbackURLBase + "/auth/manager/facebook/callback",
    passReqToCallback: true,
  },

  function(req, accessToken, refreshToken, profile, done) {


    if( ! req.session.loggedIn ){
      done( null, false );
    } else {

      // The profile MUST contain an ID
      if( typeof( profile ) === 'undefined' || ! profile.id ){ 
         return done( null, false, { message: "Facebook didn't return a profile ID, procedure aborted" } );
      }

      // Check that "facebook" isn't already there
      UserStrategies.GetQuery( { filters: { userId: req.session.userId, strategyId: 'facebook' } }, function( err, res ){
        if( err ) {
          done( err, null );
        } else {
          if( res.length ){
            done( null, false, { message: "User already has a Facebook login setup" } );
          } else {
            
            // Check that "facebook" isn't already there
            UserStrategies.GetQuery( { filters: { field1: profile.id } }, function( err, res ){
              if( err ) {
                done( err, null );
              } else {
                if( res.length ){
                  done( null, false, { message: "Facebook profile already linked to another account" } );
                } else {

                  UserStrategies.Post( { userId: req.session.userId, strategyId: 'facebook', field1: profile.id }, function( err, res, idProperty ){
                    if( err ) {
                      done( err, null );
                    } else {
                      Users.Get( req.session.userId, function( err, user ){
                        if( err ){
                          done( err, null );
                        } else {
                          done( null, user, profile  );
                        }
                      });
                    }
                  });

                }
              }
           });
            
          } 
        }
      });
    }
  }
  ));

  app.get('/auth/manager/facebook', passport.authenticate('facebook-manager'));
  app.get('/auth/manager/facebook/callback', function( req, res, next) {
    passport.authenticate('facebook-manager',  makeResponder( req, res, next, 'facebook', 'manager')  )(req, res, next);
  });


  // ***********************
  // *** SIGN IN         ***
  // ***********************

  passport.use('facebook-signin', new FacebookStrategy({
    clientID: strategyData.clientID,
    clientSecret: strategyData.clientSecret,
    callbackURL: callbackURLBase + "/auth/signin/facebook/callback",
    passReqToCallback: true,
  },

  function(req, accessToken, refreshToken, profile, done) {

    if( req.session.loggedIn ){
      done( null, false );
    } else {

      // The profile MUST contain an ID
      if( typeof( profile ) === 'undefined' || ! profile.id ){ 
         return done( null, false, { message: "Facebook didn't return a profile ID, procedure aborted" } );
      }

      UserStrategies.GetQuery( { filters: { strategyId: 'facebook', field1: profile.id } }, function( err, res, idProperty ){
        if( err ) {
          done( err, null );
        } else {

          if( res.length ){
            Users.Get( res[0].userId, function( err, user, idProperty ){
              if( err ){
                done( err, null );
              } else {
                req.session.loggedIn = true;
                req.session.userId = user[ idProperty ];
                done( null, user, profile  );
              }
            });

          } else {
            done( null, false, { message: "Your Facebook user is not registered" } );

          }
        }
      });


    }

    // done( null, false );
  }
  ));

  app.get('/auth/signin/facebook', passport.authenticate('facebook-signin'));
  app.get('/auth/signin/facebook/callback', function( req, res, next) {
    passport.authenticate('facebook-signin',  makeResponder( req, res, next, 'facebook', 'signin')  )(req, res, next);
  });

  // ***********************
  // *** RECOVER         ***
  // ***********************

  passport.use('facebook-recover', new FacebookStrategy({
    clientID: strategyData.clientID,
    clientSecret: strategyData.clientSecret,
    callbackURL: callbackURLBase + "/auth/recover/facebook/callback",
    passReqToCallback: true,
  },

  function(req, accessToken, refreshToken, profile, done) {

    if( req.session.loggedIn ){
      done( null, false );
    } else {

      // The profile MUST contain an ID
      if( typeof( profile ) === 'undefined' || ! profile.id ){ 
         return done( null, false, { message: "Facebook didn't return a profile ID, procedure aborted" } );
      }

      UserStrategies.GetQuery( { filters: { strategyId: 'facebook', field1: profile.id } }, function( err, res, idProperty ){
        if( err ) {
          done( err, null );
        } else {

          if( res.length ){
            Users.Get( res[0].userId, function( err, user, idProperty ){
              if( err ){
                done( err, null );
              } else {
                // RECOVER PROCEDURE
                done( null, false, { message: "Recovery procedure initiated" }  );
              }
            });
          } else {
            done( null, false, { message: "Your Facebook user is not registered" } );
          }
        }
      });


    }

  }
  ));

  app.get('/auth/recover/facebook', passport.authenticate('facebook-recover'));
  app.get('/auth/recover/facebook/callback', function( req, res, next) {
    passport.authenticate('facebook-recover',  makeResponder( req, res, next, 'facebook', 'recover')  )(req, res, next);
  });


  // ***********************
  // *** REGISTER        ***
  // ***********************

  passport.use('facebook-register', new FacebookStrategy({
    clientID: strategyData.clientID,
    clientSecret: strategyData.clientSecret,
    callbackURL: callbackURLBase + "/auth/register/facebook/callback",
    passReqToCallback: true,
  },

  function(req, accessToken, refreshToken, profile, done) {

    if( req.session.loggedIn ){
      done( null, false );
    } else {

      // The profile MUST contain an ID
      if( typeof( profile ) === 'undefined' || ! profile.id ){ 
         return done( null, false, { message: "Facebook didn't return a profile ID, procedure aborted" } );
      }

      // Check that "facebook" isn't already there
      UserStrategies.GetQuery( { filters: { strategyId: 'facebook', field1: profile.id } }, function( err, res, idProperty ){
        if( err ) {
          done( err, null );
        } else {
          if( res.length ){
            done( null, false, { message: "Facebook profile already registered" } );
          } else {
            console.log("MEEEEEEEEEEEEEEEE");
            (new Users()).makeId( {}, function( err, userId ){
              if( err ){
                done( err, null );
              } else {
                // TODO: ADD NAME
                Users.Post( { }, function( err, user, idProperty ){

                  if( err ){
                    done( err, null );
                  } else {

                    UserStrategies.Post( { userId: user[ idProperty ], strategyId: 'facebook', field1: profile.id }, function( err, res, idProperty ){
                      if( err ) {
                        done( err, null );
                      } else {
                        done( null, user, profile );
                      }

                    });
                  }

                });


              }
            });
          } 
        }
      });
    }

  }
  ));

  app.get('/auth/register/facebook', passport.authenticate('facebook-register'));
  app.get('/auth/register/facebook/callback', function( req, res, next) {
    passport.authenticate('facebook-register',  makeResponder( req, res, next, 'facebook', 'register')  )(req, res, next);
  });



         
} 
