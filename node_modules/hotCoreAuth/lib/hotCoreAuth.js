var dummy
  , path = require('path')
  , hotplate = require('hotplate')
  , declare = require('simpledeclare')

  , e = require('allhttperrors')

  // Stores
  , Schema = require('simpleschema')
  , MongoSchemaMixin = require('simpleschema/MongoSchemaMixin.js')

  , Store = require('jsonreststores')
  , MongoDriverMixin = require('jsonreststores/MongoDriverMixin.js')

  // Passport stuff
  , passport = require('passport')
  , FacebookStrategy = require('passport-facebook').Strategy
  , LocalStrategy = require('passport-local').Strategy
;



// Define store and mongo drivers.

var app = hotplate.app;

var hooks = exports.hotHooks = {}


hooks.run = function( done ){

  var hotCoreJsonRestStores = hotplate.getModule( 'hotCoreJsonRestStores' );

  Store = declare.mixin( Store, [ MongoDriverMixin, hotCoreJsonRestStores.StoreMixin ] );
  Schema = declare.mixin( Schema, [ MongoSchemaMixin, hotCoreJsonRestStores.SchemaMixin ] );

  BasicStore = require('jsonreststores');

  // ***********************************
  // *** USERS *************************
  // ***********************************

  var Users = declare( Store, {

    // COMMON
    schema: new Schema({
      _id: { type: 'id' },

      name: { type: 'string', searchable: true, searchPartial: false, sortable: false, notEmpty: true, sharedValidator: 'user', trim: 15 },
    }),

    handlePut: true,
    handlePost: true,
    handleGet: true,
    handleGetQuery: true,
    handleDelete: true,

    storeName:  'Users',
    paramIds: [ '_id' ],
  });

  Users.onlineAll( app, '/users/', ':_id' );

  var UserStrategies = declare( Store, {

    schema: new Schema({
      _id       :  { type: 'id' },
      strategyId:  { type: 'string', required: true, trim: 30 }  ,
      userId:      { type: 'id', required: true },

      field1:      { type: 'string', required: false, trim: 255 } ,
      field2:      { type: 'string', required: false, trim: 255 } ,
      field3:      { type: 'string', required: false, trim: 255 } ,
      field4:      { type: 'string', required: false, trim: 255 } ,
    }),

    searchSchema: new Schema({
      _id       :  { type: 'id' },
      strategyId:  { type: 'string', trim: 30 }  ,
      userId:      { type: 'id' },

      field1:      { type: 'string', trim: 255 } ,
      field2:      { type: 'string', trim: 255 } ,
      field3:      { type: 'string', trim: 255 } ,
      field4:      { type: 'string', trim: 255 } ,

    }),

		storeName:  'UserStrategies',

    handlePut: true,
    handlePost: false,
    handleGet: true,
    handleGetQuery: true,
    handleDelete: true,

    paramIds: [ 'userId', '_id' ],
  });

  UserStrategies.onlineAll( app, '/userStrategies/:userId/', ':_id' );


  var AuthStrategies = declare( BasicStore, {

    // COMMON
    schema: new Schema({
      strategyId:        { type: 'string', isRequired: true, trim: 30 }  ,
    }),

    handlePut: false,
    handlePost: false,
    handleGet: true,
    handleGetQuery: true,
    handleDelete: false,

    storeName:  'AuthStrategies',
    paramIds: [ 'strategyId' ],

    driverAllDbFetch: function( params, body, options, cb ){
      var strategies = hotplate.get('hotCoreAuth/strategies');
      var doc;

      // No strategies defined in Hotplate, end of story
      if( typeof( strategies ) === 'undefined' ){
        return cb( null, null );     
      }
 
      // Check if the strategy is one of the ones defined in Hotplate
      if( typeof( strategies[ params[ 'strategyId' ] ] ) !== 'undefined' ){
        doc = {}
        doc.strategyId = params[ 'strategyId' ];
      } else {
        doc = null;
      }

      // Return whatever was found
      cb( null, doc );
    },

    driverGetDbQuery: function( params, body, options, cb ){
      var strategies = hotplate.get('hotCoreAuth/strategies');
      var doc;
      var docs = [];
      
      for( var strategyId in strategies ){
        docs.push( { strategyId: strategyId } );
      }      
      cb( null, docs );
    },

  });

  AuthStrategies.onlineAll( app, '/authStrategies/', ':strategyId' );


  var UserLogins = declare( BasicStore, {

    schema: new Schema({
      login     :  { type: 'string', required: true, lowercase: true, trim: 30 },

    }),

		storeName:  'login',

    handlePut: false,
    handlePost: false,
    handleGet: false,
    handleGetQuery: true,
    handleDelete: false,

    paramIds: [ 'login' ],

    driverGetDbQuery: function( params, body, options, cb ){
      
      var self = this;

      UserStrategies.GetQuery( { filters: { strategyId: 'local', field1: options.filters.login } }, function( err, res ){
        if( err ){
          cb( err, null );
        } else {
          if( res.length ){
            self.makeId( res, function( err, id ){
              cb( null, [ { login: options.filters.login, _id: id } ] );
            });
          } else {
            cb( null, [ ] );
          }
        }
      });      

    },   

  });

  UserLogins.onlineAll( app, '/userLogins/', ':_id' );


  function makeResponder( req, res, next, strategyId, action ) {

    return function(err, user, profile ) {

      var responseType, strategies;
        
      // If it was passed by a body parameter, then listen to it
      //if( typeof( req.body.responseType ) !== 'undefined' ){
      if( false ){
        responseType = req.body.responseType;


        console.log("GOT responseType FROM FORM!");

/*
      // Otherwise, try to get it from the config options
      } else {

        
        // Set the responseType, defaulting to "redirect"
        strategies =  hotplate.get('hotCoreAuth/strategies');
        if( strategies && strategies[ strategyId ] && strategies[ strategyId ].responseType ){
          responseType = strategies[ strategyId ].responseType;
        }
      }
*/

      // Otherwise, try to get it from a cookie
      } else {
        var k = req.cookies[ strategyId + '-' + action ];
        if( typeof( k ) !== 'undefined' ){
          responseType = k;
        }

      }


      // Fallback option
      if( ! responseType ) responseType = 'redirect';

      // Defaults to an empty profile object
      if( typeof( profile ) === 'undefined' ){
        profile = {};
      }

      /*
      console.log("AUTHENTICATING IN MADE RESPONDER (strategyId): ");

      console.log("user: ");
      console.log( user );
            
      console.log("profile: ");
      console.log( profile );

      console.log("responseType: ");
      console.log( responseType );
      */

      // Error: just return that
      if( err ) { return next( err ); }

      console.log( user );
      console.log("PROFILE");
      console.log( profile );

      switch( responseType ){

        case 'close':
          console.log("METHOD: CLOSE");
          if( ! user && typeof( profile.message) !== 'undefined'  ){
            req.session.messages = req.session.messages || []; 
            req.session.messages.push( { type: 'error', message: profile.message } );
          }
          res.send('<script>window.close();</script></html>');      
        break;

        case 'ajax':
          console.log("METHOD: AJAX");
          if( user ){
            res.json( 200, { user: user, profile: profile } );
          } else {
            var error = 'Authentication error';
            if( typeof( profile.message) !== 'undefined' ) error =  profile.message;
            res.json( 403, { message: error } );
          }

        break;

        case 'redirect':
        default:
          console.log("METHOD: REDIRECT");
          if( user ){

            var redirectURLs = hotplate.get('hotCoreAuth/redirectURLs/success') || {};
            res.redirect( redirectURLs[ action ] || '/' );
          } else {


            // Add the error to the session messages
            if( typeof( profile.message) !== 'undefined'  ){
              req.session.messages = req.session.messages || []; 
              req.session.messages.push( { type: 'error', message: profile.message } );
            }

            var redirectURLs = hotplate.get('hotCoreAuth/redirectURLs/fail');
            res.redirect( redirectURLs[ action ] || '/' );
          }
        break;

      }

    }
  }


  if( typeof( hotplate.get('hotCoreAuth/strategies' )) === 'object' ){
    Object.keys( hotplate.get('hotCoreAuth/strategies' )).forEach( function( strategyName ) {
    
      // Get the strategy's data
      var strategyData = hotplate.get('hotCoreAuth/strategies' )[strategyName];

      // Gets the right strategy maker and runs it
      strategyMaker = require( './auth/' + strategyName );
      strategyMaker( strategyData, makeResponder, AuthStrategies, Users, UserStrategies, UserLogins );
    });

  }

  done( null );
}

hooks.stores = function( done ){
  done( null, {

    userStrategies     : { target: '/userStrategies/:userId/',         idProperty: '_id', sortParam: 'sortBy', },
    authStrategies     : { target: '/authStrategies/',                 idProperty: 'strategyId', sortParam: 'sortBy', },
    userLogins         : { target: '/userLogins/',                     idProperty: '_id', sortParam: 'sortBy', },
  });
}

hooks.pageElements = function( done ){
  var strategyIds = Object.keys( hotplate.get('hotCoreAuth/strategies') ) || [];
  
  done( null, { moduleName: 'hotCoreAuth', result: {
    vars:  [ { name: 'strategyIds', value: strategyIds } ],
  } } );
}


