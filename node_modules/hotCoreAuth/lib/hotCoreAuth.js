var dummy
  , path = require('path')
  , hotplate = require('hotplate')

  , ObjectId = require('mongowrapper').ObjectId
  , checkObjectId = require('mongowrapper').checkObjectId

  , hat = require('hat')

  , bcrypt = require('bcrypt')
  , SALT_WORK_FACTOR = 15
  , db = hotplate.get('db')
  , e = require('allhttperrors')

  , Schema = require('simpleschema')
  , MongoSchemaMixin = require('simpleschema/MongoSchemaMixin.js')

  , Store = require('jsonreststores')
  , MongoDriverMixin = require('jsonreststores/MongoDriverMixin.js')

  , declare = require('simpledeclare')
  , passport = require('passport')
  , FacebookStrategy = require('passport-facebook').Strategy


;



// Define store and mongo drivers.

var app = hotplate.app;

var hooks = exports.hotHooks = {}


hooks.init = function( done ){
 
 
  

  done( null );
}


hooks.run = function( done ){

  var hotCoreJsonRestStores = hotplate.getModule( 'hotCoreJsonRestStores' );

  Store = declare.mixin( Store, [ MongoDriverMixin, hotCoreJsonRestStores.StoreMixin ] );
  Schema = declare.mixin( Schema, [ MongoSchemaMixin, hotCoreJsonRestStores.SchemaMixin ] );

  var Users = declare( Store, {

    // COMMON
    schema: new Schema({
      userName: { type: 'string', searchable: true, searchPartial: false, sortable: false, notEmpty: true, sharedValidator: 'user', trim: 15 },
    }),

    handlePut: true,
    handlePost: true,
    handleGet: true,
    handleGetQuery: true,
    handleDelete: true,

    storeName:  'Users',
    paramIds: [ '_id' ],
  });

  Users.onlineAll( app, '/users/', ':_id' );


  var Workspaces = declare( Store, {

    // COMMON
    schema: new Schema({
      workspaceName: { type: 'string', searchable: true, searchPartial: false,
                       sortable: false, notEmpty: true, sharedValidator: 'workspace', trim: 20 },
    }),

    handlePut: true,
    handlePost: true,
    handleGet: true,
    handleGetQuery: true,
    handleDelete: true,

    storeName:  'Workspaces',
    paramIds: [ '_id' ],
  });

  Users.onlineAll( app, '/workspaces/', ':_id' );


  var WorkspaceUsers = declare( Store, {

    // COMMON
    schema: new Schema({
      userId:      { type: 'id', isRequired: true, searchable: true  },
    }),

    handlePut: false,
    handlePost: true,
    handleGet: true,
    handleGetQuery: true,
    handleDelete: true,

    storeName:  'WorkspaceUsers',
    paramIds: [ 'worspaceId' ],
  });

  WorkspaceUsers.onlineAll( app, '/workspaces/', ':workspaceId' );


  var UserWorkspaces = declare( Store, {

    // COMMON
    schema: new Schema({
      workspaceId:      { type: 'id', isRequired: true, searchable: true  },
    }),

    handlePut: false,
    handlePost: true,
    handleGet: true,
    handleGetQuery: true,
    handleDelete: true,

    storeName:  'UserWorkspaces',
    collectionName: 'WorkspaceUsers',
    paramIds: [ 'userId' ],
  });

  UserWorkspaces.onlineAll( app, '/workspaces/', ':userId' );


  var UserAuth = declare( Store, {

    // COMMON
    schema: new Schema({
      type:        { type: 'string', isRequired: true, searchable: true, trim: 30 }  ,

      field1:      { type: 'string', isRequired: true, searchable: true, trim: 255 } ,
      field2:      { type: 'string', isRequired: true, searchable: true, trim: 255 } ,
      field3:      { type: 'string', isRequired: true, searchable: true, trim: 255 } ,
      field4:      { type: 'string', isRequired: true, searchable: true, trim: 255 } ,
    }),

    handlePut: true,
    handlePost: true,
    handleGet: true,
    handleGetQuery: true,
    handleDelete: true,

    storeName:  'userAuth',
    paramIds: [ 'userId', '_id' ],
  });

  UserAuth.onlineAll( app, '/userAuth/:userId/', ':_id' );


  if( typeof( hotplate.get('hotCoreAuth')) === 'object' ){
    var callbackURLBase = hotplate.get('hotCoreAuth').callbackURLBase;
  }
  
  if( typeof( hotplate.get('hotCoreAuth/strategies' )) === 'object' ){
    for( var k in hotplate.get('hotCoreAuth/strategies' ) ){
    
      var strategy = hotplate.get('hotCoreAuth/strategies' )[k];
 
      switch( k ){

        case 'facebook':

          // Facebook auth
          passport.use(new FacebookStrategy({
            clientID: strategy.clientID,
            clientSecret: strategy.clientSecret,
            callbackURL: callbackURLBase + "/auth/add/facebook/callback",
            passReqToCallback: true,
          },

					function(req, accessToken, refreshToken, profile, done) {

						// **************************************************
						// ** NOT LOGGED IN:    attempts to create an account
						// **************************************************
						if( ! req.session.loggedIn ){

              

							return done( null, false, null );


						// **************************************************
						// ** USER LOGGED IN: will add it to the list of
						//    "allowed" identities
						// **************************************************

						} else {

							// Check that "facebook" isn't already there
							UserAuth.GetQuery( { }, { userId: req.session.userId }, { type: 'facebook' }, function( err, res ){
								if( err ) {
									done( err, null );
								} else {
									if( res.length !== 0 ){
										// TODO: Not quite an error, TELL THE WORKSPACE OR FLASH IT
										done( null, false, { error: "User already has a Facebook login setup" } );
									} else {
										UserAuth.Post( { type: 'facebook', field1: accessToken }, { userId: req.session.userId }, function( err, res, idProperty ){
											if( err ) {
												done( err, null );
											} else {
												done( null, res[ idProperty ], profile  );
											}
										});
									} 
								}
							});
						}
					}
					));

					app.get('/auth/add/facebook', passport.authenticate('facebook'));
					app.get('/auth/add/facebook/callback', function( req, res, next) {

						passport.authenticate('facebook', function(err, userId, profile, errorMessage ) {

							// Set the responseType, defaulting to "redirect"
							var strategies =  hotplate.get('hotCoreAuth/strategies');
							if( strategies && strategies['facebook'] && strategies['facebook'].responseType ){
								var responseType = strategies['facebook'].responseType;
							}
							if( ! responseType ) responseType = 'redirect';


							console.log("AUTHENTICATING: ");

							console.log("userId: ");
							console.log( userId );
						
							console.log("profile: ");
							console.log( profile );

							console.log("responseType: ");
							console.log( responseType );


							// Error: just return that
							if( err ) { return next( err ); }

							switch( responseType ){

								case 'close':
									res.send('<script>window.close();</script></html>');      
									console.log("CLOSE");
								break;

								case 'ajax':
									console.log("AJAX");
									if( userId ){
										res.json( { userId: userId, profile: profile } );
									} else {
										res.json( {} );
									}

								break;

								case 'redirect':
								default:
									console.log("REDIRECT/DEFAULT");
									if( userId ){
										res.redirect( hotplate.get('hotCoreAuth/redirectToSuccess') || '/' );
									} else {
										res.redirect( hotplate.get('hotCoreAuth/redirectToFailure') || '/login' );
									}
								break;

							 }

						})(req, res, next);
					});
          
        break;

      }
 
    }

  }



  done( null );
}

hooks.stores = function( done ){
  done( null, {

    userAuth   : { target: '/userAuth/:userId/',     idProperty: '_id', sortParam: 'sortBy', },


  });
}







/*
hooks.init = function( done ){

  // Middleware parameters that set req.application
  app.param( 'workspaceIdPages', paramWorkspaceIdPages);     // Used by /ws/WORKSPACEID
  app.param( 'tokenCall',        paramTokenCall);            // Used by API calls
  app.param( 'workspaceId',      paramWorkspaceIdCall);      // Used by API calls

  done( null );
}



hooks.run = function( done ){


  // Calls to check if users and workspaces are taken
  app.get(  '/call/usersAnon',      getUsersAnon );
  app.get(  '/call/workspacesAnon', getWorkspacesAnon );

  // Calls to actually create workspaces
  app.post( '/call/workspacesAnon', postWorkspacesAnon );
  app.post( '/call/workspacesUser', postWorkspacesUser );

  // Login, logout, recover calls
  app.post( '/call/recoverAnon',    postRecoverAnon );
  app.post( '/call/loginAnon',      postLoginAnon );
  app.get(  '/call/logoutUser',     getLogoutUser );

  done( null );

}

hooks.clientPaths = function( done ){
  done( null, { moduleName: 'hotCoreAuth', result: [ path.join(__dirname, '../client') ] } );
}


hooks.stores = function( done ){
  done( null, {
    usersAnon     : { target: '/call/usersAnon',      idProperty: '_id', sortParam: 'sortBy', },
    workspacesAnon: { target: '/call/workspacesAnon', idProperty: '_id', sortParam: 'sortBy', },

    workspacesUser: { target: '/call/workspacesUser', idProperty: '_id', sortParam: 'sortBy', },

    loginAnon     : { target: '/call/loginAnon',      idProperty: '_id', sortParam: 'sortBy', },
    recoverAnon   : { target: '/call/recoverAnon',    idProperty: '_id', sortParam: 'sortBy', },
    logoutUser    : { target: '/call/logoutUser',     idProperty: '_id', sortParam: 'sortBy', },
  });
}
*/


