var dummy
  , hotplate = require('hotplate')

  , e = require('allhttperrors')

  , Schema = require('simpleschema')
  , MongoSchemaMixin = require('simpleschema/MongoSchemaMixin.js')

  , Store = require('jsonreststores')
  , MongoDriverMixin = require('jsonreststores/MongoDriverMixin.js')

  , declare = require('simpledeclare')
;



// Define store and mongo drivers.

var app = hotplate.app;

var hooks = exports.hotHooks = {}

hooks.init = function( done ){
  done( null );
}

hooks.run = function( done ){

  var hotCoreJsonRestStores = hotplate.getModule( 'hotCoreJsonRestStores' );

  Store = declare.mixin( Store, [ MongoDriverMixin, hotCoreJsonRestStores.StoreMixin ] );
  Schema = declare.mixin( Schema, [ MongoSchemaMixin, hotCoreJsonRestStores.SchemaMixin ] );

  // ***********************************
  // *** WORKSPACES ********************
  // ***********************************


  var Workspaces = declare( Store, {

    // COMMON
    schema: new Schema({
      _id: { type: 'id' },
      workspaceName: { type: 'string', searchable: true, searchPartial: false,
                       sortable: false, notEmpty: true, sharedValidator: 'workspace', trim: 20 },
    }),

    handlePut: true,
    handlePost: true,
    handleGet: true,
    handleGetQuery: true,
    handleDelete: true,

    storeName:  'Workspaces',
    paramIds: [ '_id' ],
  });

  Workspaces.onlineAll( app, '/workspaces/', ':_id' );

  // The basic schema for the WorkspaceUsers table
  var WorkspaceInvites = declare( Store, {

    schema: new Schema({
      workspaceId: { type: 'id' },
      inviteCode:  { type: 'string' },
      email     :  { type: 'string' },
      name      :  { type: 'string' },
      _id:         { type: 'id' },
    }),

    paramIds: [ '_id' ],

    handlePut: false,
    handlePost: true,
    handleGet: true,
    handleGetQuery: true,
    handleDelete: true,

    searchSchema: new Schema({
      workspaceId: { type: 'id' },
      userId:      { type: 'id' },
      _id:         { type: 'id' },
    }),

    storeName:  'WorkspaceInvites',
    paramIds: [ 'workspaceId', '_id' ],
  });


  // The basic schema for the WorkspaceUsers table
  var WorkspacesUsersBase = declare( Store, {

    schema: new Schema({
      userId:      { type: 'id' },
      workspaceId: { type: 'id' },
      _id:         { type: 'id' },
    }),

    collectionName: 'WorkspacesUsers',
    paramIds: [ '_id' ],
  });


  var WorkspaceUsers = declare( WorkspacesUsersBase, {
    handlePut: false,
    handlePost: true,
    handleGet: false,
    handleGetQuery: true,
    handleDelete: true,

    searchSchema: new Schema({
      workspaceId: { type: 'id' },
      userId:      { type: 'id' },
      _id:         { type: 'id' },
    }),

    storeName:  'WorkspaceUsers',
    paramIds: [ 'workspaceId', '_id' ],
  });
  WorkspaceUsers.onlineAll( app, '/workspaceUsers/:workspaceId/', ':_id' );

  var UserWorkspaces = declare( WorkspacesUsersBase, {

    handlePut: false,
    handlePost: true,
    handleGet: true,
    handleGetQuery: true,
    handleDelete: true,

    searchSchema: new Schema({
      userId:      { type: 'id' },
      workspaceId: { type: 'id' },
      _id:         { type: 'id' },
    }),

    storeName:  'UserWorkspaces',
    paramIds: [ 'userId', '_id' ],
  });

  UserWorkspaces.onlineAll( app, '/userWorkspaces/:userId/', '_id' );

  done( null );
}

hooks.stores = function( done ){
  done( null, {

    workspaces         : { target: '/workspaces/',                     idProperty: '_id', sortParam: 'sortBy', },
    workspaceUsers     : { target: '/workspaceUsers/:workspaceId/',    idProperty: '_id', sortParam: 'sortBy', },
    userWorkspaces    : { target: '/userWorkspaces/:userId/',         idProperty: '_id', sortParam: 'sortBy', },

  });
}


