
var dummy
  , path = require( 'path' )
  , hotplate = require( 'hotplate' )
;

var hooks = exports.hotHooks = {} ;


hooks.init = function( done ){

  done( null );
}


// Add routes for the multiHomeURL and for appURL depending on
// hotplate's hotCoreAuth configuration

hooks.run = function( done ){
  var multiHomeURL = hotplate.get('hotCoreAuth').multiHomeURL;
  var appURL = hotplate.get('hotCoreAuth').appURL

  if( multiHomeURL ){
    hotplate.app.get( multiHomeURL, mainApp);
  }

  if( appURL ){
    hotplate.app.get( appURL, mainApp);
  }

  done( null );
} 

// Send the app page
// Note that workspaceId is not guaranteed to be there -- it's only there
// for multihome environments

function mainApp( req, res ){

  var hotCorePage = hotplate.getModule('hotCorePage');
  var logger = hotplate.getModule('hotCoreServerLogger');

  // Not logged in: the user must not get this page, redirect to
  // the initial login page instead
  if( ! req.session.loggedIn ){
    res.redirect( hotplate.get('hotCoreAuth/redirectURLs/fail').signin );
  }

  var extraJses = (new hotCorePage.Jses).add( 'hotDojoAppContainer', 'mainContainer.js' );
  var extraCsses = (new hotCorePage.Csses).add( 'hotDojoAppContainer', 'mainContainer.css' );
  var extraVars = new hotCorePage.Vars;
  // extraVars.add( 'hotDojoAppContainer', 'userId', req.session.userId );


  // WorkspaceId is not guaranteed to be there -- it's only there for multihome setups
  if( req.params.workspaceId ){
    extraVars.add( 'hotDojoAppContainer', 'workspaceId', req.params.workspaceId );
  }
  
  hotCorePage.processPageTemplate(
    {
      jses: extraJses,
      vars: extraVars,
      csses:extraCsses,
      body: '<body class="claro"><div id="appContainer"></div></body>',
    },
    req, 
    'hotDojoAppContainer/container',
    function( err, result ){ 
      if( err ){
        hotplate.get('errorPage')(req, res);
        // TODO: FIX THIS, if there was an error, log it
        logger.log( { message: "ERROR while App container page served" } );
        console.log( err );
      } else {
        res.send( result );
        logger.log( { message: "App container page served" } );
      }
    }
  );
  return;
}

hooks.clientPaths = function( done ){
  done( null, { moduleName: 'hotDojoAppContainer', result:[ path.join( __dirname, '../client' ) ] } );
}


