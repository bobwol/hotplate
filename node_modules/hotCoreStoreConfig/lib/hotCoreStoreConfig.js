/*!
 * Module dependencies.
 */

var
  hotplate = require('hotplate')
, path = require('path')
, async = require('async')
;

var configStores = {};
var configStoreRecords = {};

var hooks = exports.hotHooks = {};

hooks.pageElements = function( done ){
  done( null, { moduleName: 'hotCoreStoreConfig', result: {
    vars:  [ { name: 'configStores', value: configStores } ],
  } } );
}

hooks.pageElementsPerPage = function( elements, req, pageName, done ){

  var registry = hotplate.getModule('hotCoreStoreRegistry');

  // Only acts on pages that end with "container"
  function endsWith(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
  }
  if( ! endsWith( pageName, 'container' ) ){
    return done( null, { moduleName: 'hotCoreStoreConfig', result: { } } );
  }

  var functionList = [];
  Object.keys( registry.storeRegistry ).forEach( function( storeName ){
    var storeEntry = registry.storeRegistry[ storeName ];

    var Store = storeEntry.Store;
    var storeObject = storeEntry.storeObject;

    // The store is a config store: magic happens
    if( storeObject.configStore ){

      console.log("Pushing checked function for " + storeObject.storeName );

      // Pre-load the values for that store -- those values will then be shown
      // as objects in the page, so that the application won't have to make a Json REST call to fetch them.
      functionList.push( loadConfigStoreFunction( Store, storeObject ) );
      function loadConfigStoreFunction( Store, storeObject ){

        return function( next ){
          console.log("PRE-LOADING RECORD FOR " + storeObject.storeName ); 

          var filter = {};

          if( storeObject.configStore.workspaceId ){
            filter.workspaceId = req.params.workspaceId;
          }
          if( storeObject.configStore.userId ){
            filter.userId = req.session.userId;
          }
          Store.GetQuery( { filters: filter }, function( err, docs ){
            if( err ) {
               next( err );
            } else {
              if( docs.length !== 0 ){
                console.log("Record existed, all good for " + storeObject.storeName ); 
                configStoreRecords[ storeObject.storeName ] = docs[ 0 ];
                next( null );
              } else {
                console.log("Record didn't exist! Creating one for " + storeObject.storeName ); 
                Store.Post( filter, { killComet: true }, function( err, doc ){
                  if( err ){
                    console.log("Error in the post!");
                    next( err );
                  } else {
                    console.log("All good, POST worked -- " + storeObject.storeName);
                    configStoreRecords[ storeObject.storeName ] = doc;
                    next( null );
                  } 
                })
              }
            }
          });

        }
      }
  
    }
  });


  // Load the lot, run done() at the end
  async.series( functionList, function( err ){

    console.log("OK, ALL FUNCTIONS WERE CALLED!");
    if( err ){
      done( err );
    } else {

      done( null, { moduleName: 'hotCoreStoreConfig', result: {
        vars:  [ { name: 'configStoreRecords', value: configStoreRecords } ],
      } } );
    }

  });


}


hooks.init = function( done ){

  var registry = hotplate.getModule('hotCoreStoreRegistry');

  var functionList = [];
  Object.keys( registry.storeRegistry ).forEach( function( storeName ){
    var storeEntry = registry.storeRegistry[ storeName ];

    var Store = storeEntry.Store;
    var storeObject = storeEntry.storeObject;

    // The store is a config store: magic happens
    if( storeObject.configStore ){
      // Add store to the list of configStores in the page variables
      configStores[ storeObject.storeName ] = { workspaceId: !!storeObject.configStore.workspaceId, userId: !!storeObject.configStore.userId };
    }
  });

  // Load the lot, run done() at the end
  done( null );
}

hooks.init.after = [ 'hotCoreStoreRegistry' ];


