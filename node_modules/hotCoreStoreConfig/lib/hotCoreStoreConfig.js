"use strict";
/*!
 * Module dependencies.
 */

var
  hotplate = require('hotplate')
, path = require('path')
, async = require('async')
, hotCoreStoreRegistry = require('hotCoreStoreRegistry')
;


var getConfigRecords = exports.getConfigRecords = function( workspaceId, userId, cb ){

  // Sanity check: drop the workspaceId parameter if multiHome is not defined or false
  if( ! hotplate.config.get('hotCoreMultiHome.enabled') ){ 
    workspaceId = null;
  }

  var functionList = {};
  
  getConfigStores( function( err, configStores ){

    Object.keys( configStores.stores ).forEach( function( storeName ){

        function loadConfigStoreFunction( Store, storeObject ){

          return function( next ){
            //console.log("PRE-LOADING RECORD FOR " + storeObject.storeName ); 

            var filter = {};

            if( storeObject.configStore.workspaceId ){
              filter.workspaceId = workspaceId;
            }
            if( storeObject.configStore.userId ){
              filter.userId = userId;
            }

            // It's a one-field set, it will only return ONE value
            if( storeObject.idProperty == 'workspaceId' || storeObject.idProperty == 'userId' ){

              //console.log("ONE-RECORD config store -- getting it (or creating it if missing");
              Store.GetQuery( { filters: filter }, function( err, docs ){
                if( err ) {
                   next( err );
                } else {
                  if( docs.length !== 0 ){
                    //console.log("Record existed, all good for " + storeObject.storeName ); 
                    next( null, docs[ 0 ] );
                  } else {
                    //console.log("Record didn't exist! Creating one for " + storeObject.storeName ); 
                    Store.Post( filter, { killComet: true }, function( err, doc ){
                      next( err, doc );
                    })
                  }
                }
              });

            } else {
              console.log("COLLECTION config store -- getting it");
              Store.GetQuery( { filters: filter }, function( err, docs ){
                next( err, docs );
              });
            }

          }
        }



      var storeEntry = configStores.stores[ storeName ];

      var Store = storeEntry.Store;
      var storeObject = storeEntry.storeObject;

      // The store is a config store: magic happens
      if( storeObject.configStore ){

        var pushFunction = true;
        if( storeObject.configStore.workspaceId && ! workspaceId ) pushFunction = false;
        if( storeObject.configStore.userId && ! userId ) pushFunction = false;

        // Pre-load the values for that store -- those values will then be shown
        // as objects in the page, so that the application won't have to make a Json REST call to fetch them.
        if( pushFunction ){
          functionList[ storeName ] = loadConfigStoreFunction( Store, storeObject );
        }



  
      }
    });
  });

  async.series( functionList, function( err, docs ){
    cb( err, docs );
  });

}


hotplate.hotEvents.on( 'pageElements', 'hotCoreStoreConfig', hotplate.cachable( function( done ){

  var results = {};
  exports.getConfigStores( function( err, configStores ){
    if( err ){
      done( err );
    } else {

      Object.keys( configStores.stores ).forEach( function( storeName ){
        var storeEntry = configStores.stores[ storeName ];

        var Store = storeEntry.Store;
        var storeObject = storeEntry.storeObject;

        if( storeObject.publicURL ){
         results[ storeObject.storeName ] = { workspaceId: !!storeObject.configStore.workspaceId, userId: !!storeObject.configStore.userId };
        }
      });

      done( null, {
        vars:  [ { name: 'configStores', value: results } ],
      });

    }

  });
}));


hotplate.hotEvents.on( 'pageElementsPerPage', 'hotCoreStoreConfig', function( elements, req, pageName, done ){

  getConfigRecords( req.params.workspaceId, req.session.userId, function( err, configRecords ){
    if( err ){
      done( err );
    } else {
      done( null, {
        vars:  [ { name: 'storeRecords', value: configRecords } ],
      } );
    }
  });

});

var getConfigStores = exports.getConfigStores = function( done ){

   var ret = {
    stores: {},
    collections: {},
  };

  hotCoreStoreRegistry.getAllStores( function( err, allStores ){
    if( err ){
      done( err );
    } else {
      Object.keys( allStores.stores ).forEach( function( storeName ){
        var storeEntry = allStores.stores[ storeName ];

        var Store = storeEntry.Store;
        var storeObject = storeEntry.storeObject;

        // The store is a config store: add it to the list to be returned
        if( storeObject.configStore ){
          ret.stores[ storeName ] = allStores.stores[ storeName ];

          ret.collections[ storeObject.collectionName ] = ret.collections[ storeObject.collectionName ] || [];
          ret.collections[ storeObject.collectionName ].push( { Store: Store, storeObject: storeObject }  );
        }
      });
    }
  });

  // Load the lot, run done() at the end
  done( null, ret );
}


