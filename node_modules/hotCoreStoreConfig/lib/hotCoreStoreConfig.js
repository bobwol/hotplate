"use strict";
/*!
 * Module dependencies.
 */

var dummy
  , hotplate = require('hotplate')
  , path = require('path')
  , async = require('async')
  , hotCoreStoreRegistry = require('hotCoreStoreRegistry')
;


var getConfigRecords = exports.getConfigRecords = function( workspaceId, userId, cb ){

  // Sanity check: drop the workspaceId parameter if multiHome is not defined or false
  if( ! hotplate.config.get('hotCoreMultiHome.enabled') ){ 
    workspaceId = null;
  }

  var functionList = {};
  
  getConfigStores( function( err, configStores ){

    Object.keys( configStores ).forEach( function( storeName ){

      function loadConfigStoreFunction( store ) {

        return function( next ){
          hotplate.log("PRE-LOADING RECORD FOR " + store.storeName ); 

          var filter = {};

          if( store.configStore.workspaceId ){
            filter.workspaceId = workspaceId;
          }
          if( store.configStore.userId ){
            filter.userId = userId;
          }

          // It's a one-field set, it will only return ONE value
          if( store.idProperty == 'workspaceId' || store.idProperty == 'userId' ){

            hotplate.log("ONE-RECORD config store -- getting it (or creating it if missing)");
            store.apiGetQuery( { filters: filter }, function( err, docs ){
              if( err ) {
                 next( err );
              } else {
                if( docs.length !== 0 ){
                  hotplate.log("Record existed, all good for " + store.storeName ); 
                  next( null, docs[ 0 ] );
                } else {
                  hotplate.log("Record didn't exist! Creating one for " + store.storeName ); 
                  hotplate.log(filter ); 

                  // Adding defaults taken from the schema
                  for( var k in store.schema.structure ){
                    var v = store.schema.structure[ k ];
                    if( v.default ) filter[ k ] = v.default;
                  }

                  // Actually do the put
                  store.apiPut( null, filter, { killComet: true }, function( err, doc ){
                    next( err, doc );
                  })
                }
              }
            });

          } else {
            hotplate.log("COLLECTION config store -- getting it");
            store.apiGetQuery( { filters: filter }, function( err, docs ){
              next( err, docs );
            });
          }

        }
      }

      var store = configStores[ storeName ];

      // The store is a config store: magic happens
      if( store.configStore ){

        var pushFunction = true;
        if( store.configStore.workspaceId || store.configStore.userId ){
          if( store.configStore.workspaceId && ! workspaceId ) pushFunction = false;
          if( store.configStore.userId && ! userId ) pushFunction = false;
        }

        // Pre-load the values for that store -- those values will then be shown
        // as objects in the page, so that the application won't have to make a Json REST call to fetch them.
        if( pushFunction ){
          functionList[ storeName ] = loadConfigStoreFunction( store );
        }
  
      }
    });
  });

  async.series( functionList, function( err, docs ){
    cb( err, docs );
  });

}


hotplate.hotEvents.on( 'pageElements', 'hotCoreStoreConfig', hotplate.cachable( function( done ){

  var results = {};
  exports.getConfigStores( function( err, configStores ){
    if( err ){
      done( err );
    } else {

      Object.keys( configStores ).forEach( function( storeName ){
        var store = configStores[ storeName ];

        if( store.publicURL && store.hotExpose ){
         results[ store.storeName ] = { workspaceId: !!store.configStore.workspaceId, userId: !!store.configStore.userId };
        }
      });

      done( null, {
        vars:  [ { name: 'configStores', value: results } ],
      });

    }

  });
}));


hotplate.hotEvents.on( 'pageElementsPerPage', 'hotCoreStoreConfig', function( req, pageName, done ){

  getConfigRecords( req.params.workspaceId, req.session.userId, function( err, configRecords ){
    if( err ){
      done( err );
    } else {
      done( null, {
        vars:  [ { name: 'storeRecords', value: configRecords } ],
      } );
    }
  });

});

var getConfigStores = exports.getConfigStores = function( done ){

   var ret = {};

  hotCoreStoreRegistry.getAllStores( function( err, allStores ){
    if( err ){
      done( err );
    } else {
      Object.keys( allStores ).forEach( function( storeName ){

        var store = allStores[ storeName ];

        // The store is a config store: add it to the list to be returned
        if( store.configStore ) ret[ storeName ] = store; 
      });
    }
  });

  // Load the lot, run done() at the end
  done( null, ret );
}


