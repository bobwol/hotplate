var dummy
  , hotplate = require('hotplate')

  , e = require('allhttperrors')

  , Schema = require('simpleschema')
  , MongoSchemaMixin = require('simpleschema/MongoSchemaMixin.js')

  , Store = require('jsonreststores')
  , MongoDriverMixin = require('jsonreststores/MongoDriverMixin.js')

  , declare = require('simpledeclare')
;


// Define store and mongo drivers.

var app = hotplate.app;

var hooks = exports.hotHooks = {}

hooks.init = function( done ){

  var hotCoreJsonRestStores = hotplate.getModule( 'hotCoreJsonRestStores' );

  var PermStore = declare( [ Store, MongoDriverMixin ],   { db: hotplate.get('db') } );
  var PermSchema = declare( [ Schema, MongoSchemaMixin ], { db: hotplate.get('db') } );

  // ***********************************
  // *** OPEN TABS   *******************
  // ***********************************

  var Tabs = exports.Tabs = declare( PermStore, {

    // COMMON
    schema: new PermSchema({
      tabId:         { type: 'id' },
      userId:        { type: 'id' },
      lastSync:      { type: 'date', required: false, default: new Date },
    }),

    handlePost: true,
    handleDelete: true,

    storeName:  'tabs',
    paramIds: [ 'tabId' ],

    publicURL: '/openTabs/manager/',

    // TODO: Maybe I need an extra hook, this is not quite about permissions...
    checkPermissionsPost: function( params, body, options, cb ){
      var self = this;

      body.lastSync = new Date();

      // It's a local request: always work, set null to userId
      if( ! self.remote) {
        body.userId = null;
        cb( null, true );

      // It's a remote request: fail if not logged in
      } else {
        if( ! self._req.session.userId ){
          cb( null, false );
        } else {
          body.userId = self._req.session.userId;
          cb( null, true );
        }
      }
    },
   
    // TODO: Delete ALL entries in TabMessages (need MassDelete in API for this)
    afterDelete: function( params, body, options, doc, fullDoc, cb ){
      cb( null );
    },

  });

  var TabMessages = exports.TabMessages = declare( PermStore, {

    // COMMON
    schema: new PermSchema({
      messageId:     { type: 'id' },
      tabId:         { type: 'id' },
      fromUserId:    { type: 'id' },
      message:       { type: 'serialize' },
    }),

    storeName:  'tabMessages',
    paramIds: [ 'tabId', 'messageId' ],
  });

  
  // PSEUDO-STORE, sends an object out with all of the messages
  // It will return an array of unserialised messages in TabMessages for
  // a specific tabId, and then it will DELETE those messages
  var TabMessageDispatcher = exports.TabMessageDispatcher = declare( Store, {

    // COMMON
    schema: new PermSchema({
      tabId:         { type: 'string' },
      message:       { type: 'serialize' },
    }),

    handleGet: true,

    handlePut: false,
    handlePost: false,
    handleGetQuery: false,
    handleDelete: false,
 
    storeName:  'tabMessageDispatcher',

    paramIds: [ 'tabId' ],

    publicURL: '/openTabs/dispatcher/',

    driverAllDbFetch: function( params, body, options, cb ){

      // Query Tabs checking that Tabs.userId === session.userId
      // Query tabMessages based on params.tabId, return each message as an array
      // Do retrieve/delete, IF there is an error return whatever was fetched/deleted
      // and that's it
      cb( null, { messages: [] } );

    },

  });

  done( null );
}

hooks.init.after = [ 'hotCoreJsonRestStores' ];

hooks.stores = function( done ){

  done( null,  {
    moduleName: 'hotCoreComet', result: [ exports.Tabs, exports.TabMessages, exports.TabMessageDispatcher ]
  });
}



hooks.storeRecordRemove = function( storeName, doc, done ){
  console.log("storeRecordRemove!!!");
  done( null );
}

hooks.storeRecordUpdate = function( storeName, doc, done ){
  console.log("storeRecordUpdate!!!");
  done( null );
}

hooks.storeRecordCreate = function( storeName, doc, done ){
  console.log("storeRecordCreate!!!");
  done( null );
}


