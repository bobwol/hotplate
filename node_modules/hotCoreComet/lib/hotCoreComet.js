var dummy
  , hotplate = require('hotplate')

  , e = require('allhttperrors')

  , Schema = require('simpleschema')
  , MongoSchemaMixin = require('simpleschema/MongoSchemaMixin.js')

  , Store = require('jsonreststores')
  , MongoDriverMixin = require('jsonreststores/MongoDriverMixin.js')

  , declare = require('simpledeclare')
;


// Define store and mongo drivers.

var app = hotplate.app;

var hooks = exports.hotHooks = {}

hooks.init = function( done ){

  var hotCoreJsonRestStores = hotplate.getModule( 'hotCoreJsonRestStores' );

  var PermStore = declare( [ Store, MongoDriverMixin ],   { db: hotplate.get('db') } );
  var PermSchema = declare( [ Schema, MongoSchemaMixin ], { db: hotplate.get('db') } );

  // ***********************************
  // *** OPEN TABS   *******************
  // ***********************************

  var Tabs = exports.Tabs = declare( PermStore, {

    // COMMON
    schema: new PermSchema({
      tabId:         { type: 'id' },
      userId:        { type: 'id' },
      lastSync:      { type: 'date', required: false, default: new Date },
    }),

    handlePost: true,
    handleDelete: true,

    storeName:  'tabs',
    paramIds: [ 'tabId' ],

    publicURL: '/tabs/',

    // TODO: Maybe I need an extra hook, this is not quite about permissions...
    checkPermissionsPost: function( params, body, options, cb ){
      var self = this;

      body.lastSync = new Date();

      // It's a local request: always work, set null to userId
      if( ! self.remote) {
        body.userId = null;
        cb( null, true );

      // It's a remote request: fail if not logged in
      } else {
        if( ! self._req.session.userId ){
          cb( null, false );
        } else {
          body.userId = self._req.session.userId;
          cb( null, true );
        }
      }
    },
   
    // TODO: Delete ALL entries in TabMessages (need MassDelete in API for this)
    afterDelete: function( params, body, options, doc, fullDoc, cb ){
      cb( null );
    },

  });

  var TabMessages = exports.TabMessages = declare( PermStore, {

    // COMMON
    schema: new PermSchema({
      messageId:     { type: 'id' },
      tabId:         { type: 'id' },
      fromUserId:    { type: 'id' },
      message:       { type: 'serialize' },
    }),

    storeName:  'tabMessages',
    paramIds: [ 'tabId', 'messageId' ],
    killComet: true,
  });

  
  // PSEUDO-STORE, sends an object out with all of the messages
  // It will return an array of unserialised messages in TabMessages for
  // a specific tabId, and then it will DELETE those messages
  var TabMessageDispatcher = exports.TabMessageDispatcher = declare( Store, {

    // COMMON
    schema: new PermSchema({
      tabId:         { type: 'string' },
      messages:      { type: 'none' },
    }),

    handleGet: true,

    handlePut: false,
    handlePost: false,
    handleGetQuery: false,
    handleDelete: false,
 
    storeName:  'tabMessageDispatcher',

    paramIds: [ 'tabId' ],

    publicURL: '/tabs/dispatcher/',

    killComet: true,

    // Check that the remote user requesting the tab is indeed the tab's owner
    checkPermissionsGet: function( params, body, options, doc, fullDoc, done ){
      
      var self = this;
      

      // TODO: Optimise a little here. Since checkPermissionsGet is called before driverAllDbFetch,
      // try and cache this result
      exports.Tabs.GetQuery( { filters: { tabId: params.tabId } }, function( err, tab ){
        if( err ){
          done( err );
        } else {

          // This may seem strange, but always pass authentication if the tab is not
          // there, as the store will need to accept the get and return the "storeReset"
          // message after returning the new tab
          if( tab.length == 0 ){
             done( null, true );

          } else {
            tab = tab[0];
            done( null, tab.userId.toString() === self._req.session.userId );
          }
        }
      });

 
    },

    driverAllDbFetch: function( params, body, options, done ){

      var messages = [];
      var self = this;

      // If it's not a remote call, always return empty result
      if( ! self.remote ) return done( null, { messages: [] } );

      // Return all messages for that tab, REMOVING after fetching
      exports.Tabs.GetQuery( { filters: { tabId: params.tabId } }, function( err, tab ){
        if( err ){
          done( err );
        } else {
          if( tab.length != 1 && tab.length != 0 ){
            done( new self.NotFoundError() );

          } else if( tab.length == 0 ){

            exports.Tabs.Post( { lastSync: new Date(), userId: self._req.session.userId }, {}, function( err, tab ){
              if( err ){
                 done( err );
              } else {
                 console.log( { messages: [ { fromUserId: self._req.session.userId, message: { type: 'resetStores', tabId: tab.tabId } } ] } );
                 done( null,  { messages: [ { fromUserId: self._req.session.userId, message: { type: 'resetStores', tabId: tab.tabId } } ] } );
              }
            });

          } else {

            // Write the new access time onto the tab's record; 
            tab = tab[ 0 ];
            tab.lastSync = new Date();
            exports.Tabs.Put( tab.tabId, tab, function( err, tab ){
              if( err ){
                done( err );
              } else {

                // Return all messages for that tab, REMOVING after fetching
                exports.TabMessages.GetQuery( { filters: { tabId: params.tabId }, remove: true }, function( err, tabMessages ){
                  if( err ){
                    done( err );
                  } else {
         
                    tabMessages.forEach( function( tabMessage ){
                      delete tabMessage._id;
                      delete tabMessage.messageId;
                      delete tabMessage.tabId;

                      messages.push( tabMessage);
                    });
                    done( null, { messages: messages } );
                  }
                });
              }

            });

           }
        };
      });
    
    },

  });

  done( null );
}

hooks.init.after = [ 'hotCoreJsonRestStores' ];

hooks.stores = function( done ){

  done( null,  {
    moduleName: 'hotCoreComet', result: [ exports.Tabs, exports.TabMessages, exports.TabMessageDispatcher ]
  });
}


hooks.cometBroadcast = function( userId, tabId, makeTabIdHash, message, done ){

  var self = this;

  // makeTabId function wasn't passed: just use the stock "send it to all tabs" function
  if( ! makeTabIdHash ) makeTabIdHash = allTabIdHash;

  // Get the list of tab ids
  makeTabIdHash( userId, tabId, message, function( err, tabIdHash ){
 
    // For each open tab, add the message to its queue 
    for( tabId in tabIdHash ){
      exports.TabMessages.Post( { tabId: tabId, fromUserId: userId, message: message }, function( err ) {
      } );
    };
   
    done( null );

  });  


}

function allTabIdHash( userId, tabId, message, done ){

  var tabIdHash = {}; 

  // FIXME: For now just return all of the active tabs
  exports.Tabs.GetQuery( { }, function( err, docs ){
    if( err ){
      done( err );
    } else {
      docs.forEach( function( i ){
        if( i.tabId != tabId ) tabIdHash[ i.tabId ] = true;
      });
      done( null, tabIdHash );
    }
  });

}



