"use strict";

var dummy
  , hotplate = require('hotplate')

  , e = require('allhttperrors')

  , JsonRestStore = require('jsonreststores')
  , SimpleSchema = require('simpleschema')

  , declare = require('simpledeclare')

  , hotCoreStoreConfig = require( 'hotCoreStoreConfig' )
  , hotCoreStoreRegistry = require( 'hotCoreStoreRegistry' )

;


// Define store and mongo drivers.

var TABLIFESPAN = 30000;
var CLEANUPINTERVAL = 2000;

hotplate.hotEvents.on( 'stores', 'hotCoreComet', hotplate.cachable( function( done ){

  var stores = {};

  // This module only uses JsonRestStores as a way to access the DB,
  // it doesn't mixin with hotJsonRestStores

  // Get the DB classes
  var BasicDbStore = declare( [ JsonRestStore, hotplate.config.get( 'hotplate.DriverMixin' ) ], { db: hotplate.config.get('hotplate.db') } );
  var BasicDbSchema = declare( [ SimpleSchema, hotplate.config.get( 'hotplate.SchemaMixin' ) ], { db: hotplate.config.get('hotplate.db') } );

  // ***********************************
  // *** OPEN TABS   *******************
  // ***********************************

  stores.Tabs = declare( BasicDbStore, {

    schema: new BasicDbSchema({
      tabId:         { type: 'id', required: true },
      userId:        { type: 'id', required: true },
      lastSync:      { type: 'date', required: true, default: function(){ return new Date() } },
    }),

    searchSchema: new BasicDbSchema({
      tabId:         { type: 'id' },
      userId:        { type: 'id' },
      lastSync:      { type: 'date' },

      // Ordering filters
      fromLastSync:  { type: 'date', filterType: { type: 'range', direction: 'from', field: 'lastSync' } },
      toLastSync:    { type: 'date', filterType: { type: 'range', direction: 'to', field: 'lastSync' }  },
    }),

    handlePost: true,
    handleDelete: true,

    storeName:  'tabs',
    paramIds: [ 'tabId' ],

    publicURL: '/tabs/',

    prepareBodyPost: function( body, cb ){
      var self = this;
      if( self.remote ) {
        if( self._req.session.userId ){
          body.userId = self._req.session.userId;
        }
      }
      cb( null, body );
    },

    checkPermissionsPost: function( params, body, options, cb ){
      var self = this;
      cb( null, true );
    },
   
    // Delete ALL entries in TabMessages when a tab gets deleted
    afterDelete: function( params, body, options, doc, fullDoc, cb ){
      stores.TabMessages.MassDelete( { filters: { tabId: body.tabId } }, function( err ) {
        // TODO: Log err
      }  );
      cb( null );
    },

  });

  stores.TabMessages = declare( BasicDbStore, {

    // COMMON
    schema: new BasicDbSchema({
      messageId:     { type: 'id' },
      tabId:         { type: 'id' },
      fromUserId:    { type: 'id' },
      message:       { type: 'serialize' },
      added:         { type: 'date', required: true, default: function() { return new Date() } },
    }),

    // COMMON
    searchSchema: new BasicDbSchema({
      messageId:     { type: 'id' },
      tabId:         { type: 'id' },
      fromUserId:    { type: 'id' },
      message:       { type: 'serialize' },
      added:         { type: 'date' },

      fromAdded:     { type: 'date', filterType: { type: 'range', direction: 'from', field: 'added' }  },
      toAdded:       { type: 'date', filterType: { type: 'range', direction: 'to', field: 'added' }  },
    }),

    storeName:  'tabMessages',
    paramIds: [ 'tabId', 'messageId' ],
    killComet: true,
  });

  
  // PSEUDO-STORE, sends an object out with all of the messages
  // It will return an array of unserialised messages in TabMessages for
  // a specific tabId, and then it will DELETE those messages
  stores.TabMessageDispatcher = declare( JsonRestStore, {

    // COMMON
    schema: new BasicDbSchema({
      tabId:         { type: 'string' },
      messages:      { type: 'none' },
    }),

    handleGet: true,

    handlePut: false,
    handlePost: false,
    handleGetQuery: false,
    handleDelete: false,
 
    storeName:  'tabMessageDispatcher',

    paramIds: [ 'tabId' ],

    publicURL: '/tabs/dispatcher/',

    killComet: true,

    // Check that the remote user requesting the tab is indeed the tab's owner
    checkPermissionsGet: function( params, body, options, doc, fullDoc, done ){
      
      var self = this;

      // User needs to be logged in
      if( ! self._req.session.userId ) return done( null, false );

      // TODO: Optimise a little here. Since checkPermissionsGet is called before driverAllDbFetch,
      // try and cache this result
      stores.Tabs.GetQuery( { filters: { fromLastSync: new Date() - TABLIFESPAN, tabId: params.tabId } }, function( err, tab ){
        if( err ){
          done( err );
        } else {

          // This may seem strange, but always pass authentication if the tab is not
          // there, as the store will need to accept the get and return the "storeReset"
          // message after returning the new tab
          if( tab.length == 0 ){
             done( null, true );

          } else {
            tab = tab[0];
            done( null, tab.userId.toString() === self._req.session.userId );
          }
        }
      });

 
    },

    driverAllDbFetch: function( params, body, options, done ){

      var messages = [];
      var self = this;

      // If it's not a remote call, always return empty result
      if( ! self.remote ) return done( null, { messages: [] } );

      var headersWorkspaceId = self._req.headers[ 'x-hotplate-workspaceid' ];

      hotplate.log("Looking for tab %s owned by user %s, x-workspaceId is %s", params.tabId, self._req.session.userId, headersWorkspaceId );

      // Return all messages for that tab, REMOVING after fetching
      stores.Tabs.GetQuery( { filters: { tabId: params.tabId, userId: self._req.session.userId, fromLastSync: new Date() - TABLIFESPAN } }, function( err, tab ){
        if( err ){
          done( err );
        } else {


          hotplate.log("Returned:");
          hotplate.log( tab );
          if( tab.length == 0 ){

            hotplate.log("Tab was NOT present. Trying to understand if I should create one");
            // At this point, the tab wasn't found. If workspaceId was passed via headers,
            // the person will be returned the configuration for that workspace. We need to check
            // that the user actually has access to that workspaceId.

            hotCoreStoreRegistry.getAllStores( function( err, storesData ){
              if( err ){
                done( err );
              } else {
                hotplate.log("Checking that user has access to the workspaceId she is trying to register for");
                storesData.stores.userWorkspaces.Store.GetQuery( { filters: { userId: self._req.session.userId, workspaceId: headersWorkspaceId } }, function( err, uwDocs){
                  if( err ){
                    done( err );
                  } else {
                    if( uwDocs.length == 0 ){
                      hotplate.log("No access -- user needs to (re?)login!");
                      done( new self.UnauthorizedError() );
                    } else {
               
    
                      hotplate.log("OK, access is cleared, creating the tab for the user...");
                      hotplate.log( self._req.session.userId );
                      stores.Tabs.Post( { userId: self._req.session.userId }, {}, function( err, tab ){
                        if( err ){
                           done( err );
                        } else {
    
                          
                          hotplate.log("...and ALSO returning the workspace configuration for that userId");
                          hotCoreStoreConfig.getConfigRecords( headersWorkspaceId, self._req.session.userId, function( err, storeRecords ){
                            if( err ){
                              done( err );
                            } else {
                              done( null, { messages: [ { fromUserId: self._req.session.userId, message: { type: 'resetStores', tabId: tab.tabId, storeRecords: storeRecords } } ] } );
                            };
                          });
    
                        }
                      }); // Tabs.Post()
    
    
                    }
                  }
                });//UserWorkspaces.GetQuer ()
              }
            });


          } else {

            // Write the new access time onto the tab's record; 
            tab = tab[ 0 ];
            tab.lastSync = new Date();
            stores.Tabs.Put( tab.tabId, tab, function( err, tab ){
              if( err ){
                done( err );
              } else {

                // Return all messages for that tab, REMOVING after fetching
                stores.TabMessages.GetQuery( { filters: { tabId: params.tabId, fromAdded: new Date() - TABLIFESPAN }, remove: true }, function( err, tabMessages ){
                  if( err ){
                    done( err );
                  } else {
         
                    tabMessages.forEach( function( tabMessage ){
                      delete tabMessage._id;
                      delete tabMessage.messageId;
                      delete tabMessage.tabId;

                      messages.push( tabMessage);
                    });
                    done( null, { messages: messages } );
                  }
                });
              }

            });

           }
        };
      });
    
    },

  });

  // done( null, stores );
  done( null,  [ stores.Tabs, stores.TabMessages, stores.TabMessageDispatcher ] );

}))


hotplate.hotEvents.on( 'run', hotplate.cachable( function( done ){

  hotCoreStoreRegistry.getAllStores( function( err, storesData ){
    if( err ){
      done( err );
    } else {
      // Clean up Tabs collection every 30 seconds, so that
      // dead tabs are gotten rid of
      var cleaningUp = false;
      setInterval( function(){
        if( cleaningUp ) return;
        cleaningUp = true;
  
        storesData.stores.tabs.Store.MassDelete( { filters: { toLastSync: new Date() - TABLIFESPAN } }, function ( err ){
          //TODO: Log error
          storesData.stores.tabMessages.Store.MassDelete( { filters: { toAdded: new Date() - TABLIFESPAN } }, function ( err ){
            // TODO: Log error
            cleaningUp = false;
          });
        });
 
      }, CLEANUPINTERVAL );
    }
  });

  done( null );
}));



hotplate.hotEvents.on('cometBroadcast', 'hotCoreComet', function( userId, tabId, makeTabIdHash, message, done ){

  var self = this;

  hotCoreStoreRegistry.getAllStores( function( err, storesData ){
    if( err ){
      done( err );
    } else {

      // makeTabId function wasn't passed: just use the stock "send it to all tabs" function
      if( ! makeTabIdHash ) makeTabIdHash = allTabIdHash;

      // Get the list of tab ids
      makeTabIdHash( userId, tabId, message, function( err, tabIdHash ){

        // For each open tab, add the message to its queue 
        for( tabId in tabIdHash ){
          storesData.stores.tabMessages.Store.Post( { tabId: tabId, fromUserId: userId, message: message }, function( err ) {
            if( err ){
              // TODO: log err
            }
          } );
        };
   
        done( null );
      })
    }

  });  

});

function allTabIdHash( userId, tabId, message, done ){

  hotCoreStoreRegistry.getAllStores( function( err, storesData ){
    if( err ){
      done( err );
    } else {

      var tabIdHash = {}; 

      // Just return all active tabs

      storesData.stores.tabs.Store.GetQuery( { filters: { fromLastSync: new Date() - TABLIFESPAN  }  }, function( err, docs ){
        if( err ){
          done( err );
        } else {
          docs.forEach( function( i ){
            if( i.tabId != tabId ) tabIdHash[ i.tabId ] = true;
          });
          done( null, tabIdHash );
        }
      });
    }
  });

}



