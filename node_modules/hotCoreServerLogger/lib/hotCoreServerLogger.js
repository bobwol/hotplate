/*!
 * Module dependencies.
 */

var dummy

, hotplate = require( 'hotplate' )
, path = require( 'path' )
, Schema = require( 'simpleschema' )
;

schema = null;

exports.hotHooks = hooks = {};

hooks.init = function( done ){

  var logFields = {};

  // Gather up the fields defined by other modules
  // (and by itself)
  hotplate.invokeAll( 'logFields', function( err, results ){
    results.forEach( function(entry){
      for( var k in entry ){
        logFields[ k ] = entry[ k ];
      }
    })
    schema = new Schema( logFields );

    // Initialise loggers passing them the log fields
    hotplate.invokeAll( 'initLoggers', logFields, function( err, results ){
      done( null );
    })

  });

}
hooks.init.invokes = [ 'logFields', 'initLoggers' ];


exports.log = function(entry){

  var errors = [];
  var e =  Schema.clone( entry );

  schema.castAndParams( e, errors )

  if( errors.length ){

    // We cannot really log this... will print to the console
    console.log("Errors while loggin: %j", errors );
  } else {

    hotplate.invokeAll( 'aboutToLog', e , function( ){
      hotplate.invokeAll( 'log', e, null );
        console.log( "Logged:");
        console.log( entry );
        // console.log( new Error().stack);
    })
  }

}


// Define basic, guaranteed  log Fields used by hotPlate's core modules
hooks.logFields = function( done ){
  done( null, {
    logLevel:      { type: 'number', default: 3 },
    errorName:     { type: 'string', default: '' },
    message:       { type: 'string', default: '' },
    errors:        { type: 'string', serialize: true, default: '' },
    system:        { type: 'number', default: 0 },

    data:          { type: 'string', serialize: true, default: '' },
    loggedOn:      { type: 'date',   default: new Date() },
  } );
}

